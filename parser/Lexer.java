/* The following code was generated by JFlex 1.4.3 on 8/30/11 6:38 PM */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/30/11 6:38 PM from the specification file
 * <tt>parser/scanner.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int script = 4;
  public static final int YYINITIAL = 0;
  public static final int comment = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\2\0\1\3\22\0\1\1\1\62\2\66\1\70"+
    "\1\66\1\64\1\67\1\32\1\33\1\31\1\36\1\4\1\37\1\65"+
    "\1\30\1\45\1\46\1\47\1\50\1\51\1\51\1\51\1\51\1\51"+
    "\1\51\1\66\1\40\1\57\1\56\1\61\1\60\1\0\1\17\1\21"+
    "\1\12\1\22\1\10\1\42\1\27\1\5\1\24\1\43\1\53\1\23"+
    "\1\7\1\25\1\6\1\20\1\55\1\15\1\14\1\11\1\13\1\16"+
    "\1\44\1\52\1\26\1\41\1\34\1\66\1\35\3\0\1\17\1\21"+
    "\1\12\1\22\1\10\1\42\1\27\1\5\1\24\1\43\1\53\1\23"+
    "\1\7\1\25\1\6\1\20\1\55\1\15\1\14\1\11\1\13\1\16"+
    "\1\44\1\52\1\26\1\41\1\66\1\63\1\66\133\0\1\54\37\0"+
    "\1\54\uff06\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\4\1\1\4\14\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\4\1\4\16\1\17\3\20\1\21\1\22\1\23"+
    "\3\24\1\1\1\2\1\0\2\1\1\22\5\1\1\25"+
    "\12\1\1\26\14\1\1\27\1\30\2\1\1\4\1\31"+
    "\2\1\1\4\4\1\1\32\13\1\1\33\4\1\1\34"+
    "\3\1\1\31\4\1\14\0\1\35\1\0\7\1\4\0"+
    "\1\16\2\0\1\36\1\37\1\40\1\4\1\0\1\4"+
    "\11\0\1\41\3\42\1\43\1\44\1\0\1\44\7\0"+
    "\1\44\1\0\2\1\1\4\1\1\1\45\1\46\10\1"+
    "\1\20\4\1\1\47\22\1\1\50\1\1\1\20\1\23"+
    "\7\1\1\45\1\1\1\51\11\1\17\0\1\26\5\1"+
    "\1\0\1\52\3\0\1\53\5\0\1\4\4\0\2\42"+
    "\11\0\1\37\14\1\1\46\17\1\1\54\2\1\1\55"+
    "\1\1\1\56\1\1\1\57\2\1\1\27\1\60\3\1"+
    "\1\61\10\1\1\62\6\1\1\17\2\1\1\63\2\1"+
    "\1\0\1\46\2\0\1\1\1\51\24\0\1\4\2\42"+
    "\1\44\17\1\1\64\11\1\1\65\6\1\1\66\10\1"+
    "\2\0\1\1\1\0\1\52\16\0\1\67\2\0\1\42"+
    "\1\70\4\1\1\60\1\1\1\32\1\1\1\61\3\1"+
    "\1\40\6\1\1\71\1\1\1\0\1\1\5\0\1\42"+
    "\10\1\1\72\17\0\1\67\1\73\5\1\5\0\2\1"+
    "\1\45\1\1\4\0\1\1\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\162\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\162\0\162\0\162\0\162\0\162\0\162"+
    "\0\162\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\162\0\u0759\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\162\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\253\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\253\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\253"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\253\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\253\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\u1041\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\253\0\u160b\0\u1644\0\u167d"+
    "\0\253\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\162\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\162\0\162\0\162\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u08af"+
    "\0\162\0\u2010\0\u2049\0\u2082\0\162\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\162"+
    "\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\253\0\u2412\0\u244b"+
    "\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\253"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a"+
    "\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\253"+
    "\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1"+
    "\0\u341a\0\u3453\0\u348c\0\u34c5\0\u1c80\0\u34fe\0\u3537\0\u3570"+
    "\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\162\0\u36ff"+
    "\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7"+
    "\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\253\0\u3a56"+
    "\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e"+
    "\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6"+
    "\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae"+
    "\0\u3fe7\0\u4020\0\u4059\0\253\0\u4092\0\u40cb\0\253\0\u4104"+
    "\0\253\0\u413d\0\253\0\u4176\0\u41af\0\253\0\u41e8\0\u4221"+
    "\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9"+
    "\0\u4422\0\u445b\0\u4494\0\253\0\u44cd\0\u4506\0\u453f\0\u4578"+
    "\0\u45b1\0\u45ea\0\253\0\u4623\0\u465c\0\253\0\u4695\0\u46ce"+
    "\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb\0\253\0\u4824\0\u485d"+
    "\0\u4896\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25"+
    "\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed"+
    "\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5"+
    "\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d"+
    "\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\253\0\u50d3\0\u510c"+
    "\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b\0\253"+
    "\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8\0\u53f1\0\253\0\u542a"+
    "\0\u5463\0\u549c\0\u54d5\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2"+
    "\0\u562b\0\u5664\0\u569d\0\162\0\u56d6\0\u570f\0\u5748\0\u5781"+
    "\0\u57ba\0\u57f3\0\u582c\0\u5865\0\u589e\0\u58d7\0\u5910\0\u5949"+
    "\0\u5982\0\u59bb\0\u4bed\0\u59f4\0\u5a2d\0\u5a66\0\u2010\0\u5a9f"+
    "\0\u5ad8\0\u5b11\0\u5b4a\0\253\0\u5b83\0\u5bbc\0\u5bf5\0\253"+
    "\0\u5c2e\0\u5c67\0\u5ca0\0\253\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84"+
    "\0\u5dbd\0\u5df6\0\253\0\u5e2f\0\u5e68\0\u5ea1\0\u5eda\0\u5f13"+
    "\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u6069\0\u60a2\0\u60db"+
    "\0\u6114\0\u614d\0\u6186\0\u61bf\0\253\0\u61f8\0\u6231\0\u626a"+
    "\0\u62a3\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0\0\u63f9\0\u6432"+
    "\0\u646b\0\u64a4\0\u64dd\0\u6516\0\162\0\u2010\0\u654f\0\u6588"+
    "\0\u65c1\0\u65fa\0\u6633\0\u666c\0\u66a5\0\u66de\0\u6717\0\u6750"+
    "\0\u6789\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6\0\u68df\0\u6918"+
    "\0\u6951\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\4\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\2\47\1\50\1\51"+
    "\4\4\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\2\5\1\0\26\5\1\65"+
    "\37\5\71\0\1\4\4\0\23\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\1\4\2\0\2\6\65\0\1\4\4\0\1\4\1\67"+
    "\2\4\1\70\16\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\10\4\1\71\2\4\1\72\4\4\1\73\2\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\1\4\1\74\1\4\1\75"+
    "\2\4\1\76\2\4\1\77\1\100\4\4\1\101\1\72"+
    "\2\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\4\4\1\102"+
    "\1\103\1\4\1\104\6\4\1\105\1\4\1\106\2\4"+
    "\1\0\1\4\5\0\1\4\1\0\11\4\1\107\2\4"+
    "\1\110\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\1\111\1\112\1\113\3\4\1\114\1\4\1\115\1\4"+
    "\1\116\4\4\1\117\1\4\1\120\1\4\1\0\1\4"+
    "\5\0\1\4\1\0\11\4\1\121\3\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\1\122\1\123\1\4"+
    "\1\124\4\4\1\125\1\4\1\126\1\127\1\4\1\130"+
    "\5\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\7\4\1\131"+
    "\12\4\1\132\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\133"+
    "\2\4\1\134\1\135\1\4\1\136\1\137\2\4\1\140"+
    "\1\4\1\141\4\4\1\142\1\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\1\4\1\143\1\144\7\4\1\116\10\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\3\4\1\136\6\4"+
    "\1\145\10\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\146\6\4\1\147\1\4\1\150\2\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\1\151\2\4\1\152\4\4\1\153"+
    "\4\4\1\154\1\4\1\155\1\4\1\137\1\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\1\4\1\143\15\4\1\156"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\1\157\14\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\4"+
    "\1\160\1\4\1\161\6\4\1\162\4\4\1\163\3\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\1\4\1\164\4\4"+
    "\1\136\1\165\2\4\1\166\4\4\1\167\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\20\4\1\170\2\4\1\0"+
    "\1\4\5\0\1\4\1\0\1\4\1\171\13\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\1\4\1\172"+
    "\1\4\1\173\6\4\1\174\10\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\1\4\1\130\15\4\1\175\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\1\42\14\4\4\0\1\4"+
    "\2\0\1\66\2\0\1\4\5\0\1\176\1\177\1\200"+
    "\1\201\1\202\1\0\1\203\1\204\1\205\1\206\2\0"+
    "\1\207\1\210\1\211\5\0\1\212\37\0\1\4\4\0"+
    "\23\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\213\2\0\2\4\4\0\17\4\1\151"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\1\4\1\214"+
    "\6\4\1\215\1\4\1\216\4\4\1\217\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\6\4\1\220\14\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\1\221\2\4\1\222\17\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\1\4\1\0\1\223\5\0\1\224"+
    "\11\0\1\225\5\0\1\226\15\0\1\51\4\227\1\0"+
    "\1\230\11\0\1\231\4\0\1\223\5\0\1\224\11\0"+
    "\1\225\5\0\1\226\15\0\5\227\1\0\1\230\11\0"+
    "\1\231\4\0\1\223\5\0\1\224\11\0\1\225\5\0"+
    "\1\226\15\0\2\227\3\51\1\0\1\230\11\0\1\231"+
    "\4\0\1\223\5\0\1\224\11\0\1\225\5\0\1\226"+
    "\15\0\5\51\1\0\1\230\11\0\1\231\61\0\1\54"+
    "\70\0\1\54\1\232\1\0\1\54\7\0\1\4\4\0"+
    "\23\4\1\0\1\4\5\0\1\4\1\0\15\4\1\54"+
    "\3\0\1\4\2\0\1\66\2\0\1\4\63\0\1\233"+
    "\71\0\1\234\11\0\1\235\3\0\1\236\1\237\1\0"+
    "\1\240\1\241\2\0\1\242\1\243\1\244\1\245\3\0"+
    "\1\246\11\0\1\247\27\0\2\250\2\0\63\250\1\251"+
    "\1\250\1\252\4\0\10\252\1\253\7\252\1\254\2\252"+
    "\1\0\1\252\5\0\1\4\1\0\4\252\5\4\4\252"+
    "\4\0\1\252\2\0\1\66\2\0\1\252\30\0\1\255"+
    "\45\0\1\256\3\0\1\257\1\260\1\0\1\261\1\262"+
    "\2\0\1\263\1\264\1\265\1\266\3\0\1\267\1\0"+
    "\1\270\7\0\1\271\27\0\1\4\4\0\2\4\1\272"+
    "\3\4\1\273\14\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\2\4\1\274\20\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\1\4\1\275\1\4\1\276\6\4\1\276\10\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\4\4\1\277\16\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\16\4\1\300\4\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\7\4\1\301\1\4\1\302"+
    "\3\4\1\303\2\4\1\304\2\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\10\4\1\304\4\4\1\305\2\4\1\306"+
    "\2\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\1\4\1\307"+
    "\21\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\10\4\1\304"+
    "\12\4\1\0\1\4\5\0\1\4\1\0\11\4\1\310"+
    "\3\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\20\4\1\310\2\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\5\4\1\277\15\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\16\4\1\311\4\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\3\4\1\312\17\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\7\4\1\313\7\4\1\314\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\15\4\1\315\5\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\3\4\1\316\17\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\6\4\1\317\14\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\3\4\1\320\2\4\1\304\14\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\13\4\1\277\7\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\3\4\1\304\17\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\1\4\1\321\4\4\1\322"+
    "\14\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\10\4\1\137"+
    "\12\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\13\4\1\323"+
    "\7\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\13\4\1\324"+
    "\7\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\4\4\1\137"+
    "\16\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\12\4\1\325"+
    "\10\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\13\4\1\326"+
    "\4\4\1\154\2\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\10\4\1\327\12\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\3\4\1\330\17\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\10\4\1\331\7\4\1\332\2\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\13\4\1\137\7\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\3\4\1\333\4\4\1\277\12\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\6\4\1\334\14\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\1\4\1\335\21\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\3\4\1\336\17\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\12\4\1\337\10\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\20\4\1\304\2\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\4\4\1\304\7\4\1\304"+
    "\6\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\17\4\1\156"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\7\4\1\277"+
    "\13\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\1\4\1\72"+
    "\21\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\10\4\1\277"+
    "\6\4\1\130\3\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\5\4\1\340\15\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\4\4\1\341\11\4\1\342\4\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\15\4\1\343\5\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\10\4\1\344\12\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\1\4\1\345\15\4\1\346\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\23\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\1\137\13\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\6\4\1\112\14\4\1\0"+
    "\1\4\5\0\1\4\1\0\13\4\1\112\1\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\20\4\1\277"+
    "\2\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\23\4\1\0"+
    "\1\4\5\0\1\4\1\0\6\4\1\137\6\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\2\4\1\304"+
    "\2\4\1\137\3\4\1\347\11\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\5\4\1\350\1\4\1\146\1\4\1\277"+
    "\4\4\1\351\4\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\4\4\1\352\14\4\1\353\1\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\2\4\1\354\5\4\1\355\1\356\11\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\22\4\1\142\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\6\4\1\357\11\4\1\360"+
    "\2\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\7\4\1\121"+
    "\4\4\1\277\6\4\1\0\1\4\5\0\1\4\1\0"+
    "\12\4\1\361\2\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\5\4\1\362\11\4\1\363\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\2\4\1\324\20\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\23\4\1\0\1\4\5\0"+
    "\1\4\1\0\11\4\1\364\3\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\2\4\1\365\20\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\1\4\1\366\21\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\1\4\6\0\1\367\102\0\1\370\60\0"+
    "\1\371\14\0\1\370\54\0\1\372\1\373\65\0\1\374"+
    "\75\0\1\375\75\0\1\376\4\0\1\377\50\0\1\u0100"+
    "\101\0\1\u0101\57\0\1\u0100\15\0\1\u0102\54\0\1\u0103"+
    "\66\0\1\u0104\15\0\1\u0105\51\0\1\235\3\0\1\236"+
    "\1\237\1\0\1\240\1\241\2\0\1\242\1\243\1\244"+
    "\1\245\3\0\1\246\1\0\1\270\7\0\1\247\27\0"+
    "\1\4\4\0\10\4\1\u0106\12\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\17\4\1\304\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\16\4\1\u0107\4\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\2\4\4\0\16\4\1\u0108\1\4\1\u0109\2\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\7\4\1\u010a\13\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\3\4\1\u010b\17\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\15\4\1\304\5\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\1\4\7\0\1\224\11\0\1\225\5\0"+
    "\1\226\23\0\1\230\25\0\1\u010c\10\0\1\u010d\75\0"+
    "\1\u010e\63\0\1\u010d\2\0\1\u010c\45\0\1\223\5\0"+
    "\1\224\11\0\1\225\5\0\1\226\1\u010f\14\0\5\51"+
    "\1\0\1\230\11\0\1\231\24\0\1\u010d\2\0\1\u0110"+
    "\111\0\5\u0111\30\0\1\u0112\76\0\1\u0113\32\0\1\u0114"+
    "\24\0\1\u0115\11\0\1\u0116\55\0\1\u0117\6\0\1\u0117"+
    "\73\0\1\u0113\56\0\1\u0116\14\0\1\u0118\3\0\1\u0117"+
    "\103\0\1\u0119\35\0\1\u011a\106\0\1\u011b\105\0\1\247"+
    "\53\0\1\u0116\44\0\1\252\4\0\23\252\1\0\1\252"+
    "\5\0\1\252\1\0\15\252\4\0\1\252\2\0\1\66"+
    "\2\0\2\252\4\0\3\252\1\u011c\17\252\1\0\1\252"+
    "\5\0\1\252\1\0\15\252\4\0\1\252\2\0\1\66"+
    "\2\0\2\252\4\0\12\252\1\u011d\10\252\1\0\1\252"+
    "\5\0\1\252\1\0\15\252\4\0\1\252\2\0\1\66"+
    "\2\0\1\252\11\0\1\u011e\76\0\1\u011f\32\0\1\u0120"+
    "\24\0\1\u0121\11\0\1\u0122\55\0\1\270\6\0\1\270"+
    "\73\0\1\u011f\56\0\1\u0122\14\0\1\u0123\3\0\1\270"+
    "\103\0\1\u0124\35\0\1\u0125\106\0\1\u0126\105\0\1\271"+
    "\53\0\1\u0122\44\0\1\4\4\0\3\4\1\277\17\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\10\4\1\353\12\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\16\4\1\137\4\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\10\4\1\u0127\12\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\1\u0128\1\u0129\1\u012a"+
    "\1\u012b\1\u012c\1\4\1\u012d\1\u012e\1\u012f\1\u0130\2\4"+
    "\1\u0131\1\u0132\1\u0133\4\4\1\u0134\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\21\4\1\310\1\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\4\4\1\u0135\16\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\3\4\1\77\17\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\17\4\1\u0136\3\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\3\4\1\u0137\1\u0138\1\u0139\1\u013a\1\u013b\1\u013c"+
    "\1\u0138\1\u013d\2\4\1\u013e\2\4\1\u013f\2\4\1\u010f"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\17\4\1\u0140\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\1\4\1\112\21\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\11\4\1\u0141\11\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\17\4\1\u0142\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\22\4\1\u0143\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\3\4\1\u0144\17\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\2\4\1\u0145\20\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\17\4\1\u0146\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\5\4\1\u0147\15\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\12\4\1\u0148\10\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\20\4\1\u0149\2\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\11\4\1\u014a\11\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\3\4\1\u014b\17\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\1\4\1\276\15\4\1\276\3\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\3\4\1\276\17\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\20\4\1\u014c\2\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\17\4\1\u014d\1\4"+
    "\1\u014e\1\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\5\4"+
    "\1\u014a\15\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\340\2\4\1\u014f\10\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\4\4\1\u0150\16\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\5\4\1\u0151\15\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\10\4\1\277\12\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\12\4\1\u0152\10\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\23\4\1\0\1\4\5\0\1\4\1\0\3\4"+
    "\1\165\11\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\23\4\1\0\1\4\5\0\1\4\1\0\12\4"+
    "\1\u0153\2\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\2\4\1\u0154\5\4\1\u0155\12\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\10\4\1\u0156\12\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\1\4\1\u0157\21\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\12\4\1\u0158\10\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\2\4\1\u0159\20\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\7\4\1\u015a\13\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\20\4\1\u015b\2\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\3\4\1\u015c\17\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\10\4\1\340\12\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\3\4\1\u015d\17\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\3\4\1\353\6\4\1\276\10\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\7\4\1\276\13\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\3\4\1\u015e\17\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\3\4\1\u015f\17\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\3\4\1\u0160\17\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\20\4\1\u0161\2\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\5\4\1\u0162\15\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\3\4\1\u0163\17\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\16\4\1\u0164\4\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\23\4\1\0\1\4"+
    "\5\0\1\4\1\0\1\u0165\14\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\4\4\1\u0166\16\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\3\4\1\u0167\17\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\3\4\1\u0137\1\u0138\1\u0139"+
    "\1\u013a\1\u013b\1\u0168\1\u0138\1\u013d\2\4\1\u013e\2\4"+
    "\1\u013f\2\4\1\u010f\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\1\4\7\0\1\u0169"+
    "\72\0\1\u016a\101\0\1\u016b\60\0\1\u016a\101\0\1\u016c"+
    "\65\0\1\u016a\60\0\1\u0101\4\0\1\u016a\77\0\1\u0102"+
    "\60\0\1\u016a\62\0\1\370\77\0\1\u016a\100\0\1\u016a"+
    "\61\0\1\u016a\101\0\1\377\62\0\1\u016a\47\0\1\4"+
    "\4\0\3\4\1\u016d\17\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\7\4\1\322\13\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\3\4\1\u016e\17\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\3\4\1\315\11\4\1\u0153\5\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\4\4\1\310\16\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\10\4\1\347\12\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\1\4\27\0\1\u016f\52\0\1\u0170\65\0\1\u0171"+
    "\1\u0172\4\0\1\u0173\2\0\1\u0174\2\0\1\u0175\1\u0176"+
    "\1\0\1\u0177\1\0\1\u0178\12\0\1\u0179\1\u017a\1\0"+
    "\1\u017b\1\u017c\45\0\1\u017d\46\0\1\u017e\5\0\1\u017f"+
    "\11\0\1\u0180\5\0\1\u0181\15\0\5\u0111\1\0\1\u0182"+
    "\24\0\1\u0183\76\0\1\u0117\64\0\1\u0117\104\0\1\u0118"+
    "\63\0\1\u0117\112\0\1\u0117\75\0\1\u0117\33\0\1\u0117"+
    "\72\0\1\u0114\54\0\1\252\4\0\7\252\1\u0184\13\252"+
    "\1\0\1\252\5\0\1\252\1\0\15\252\4\0\1\252"+
    "\2\0\1\66\2\0\2\252\4\0\2\252\1\u0185\20\252"+
    "\1\0\1\252\5\0\1\252\1\0\15\252\4\0\1\252"+
    "\2\0\1\66\2\0\1\252\7\0\1\u0186\76\0\1\270"+
    "\64\0\1\270\104\0\1\u0123\63\0\1\270\112\0\1\270"+
    "\75\0\1\270\33\0\1\270\72\0\1\u0120\54\0\1\4"+
    "\4\0\1\4\1\u0187\21\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\13\4\1\72\7\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\3\4\1\u0188\14\4\1\72\2\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\4\4\1\102\1\103\15\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\2\4\1\113\20\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\7\4\1\131\13\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\14\4\1\141\4\4\1\142"+
    "\1\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\1\4\1\143"+
    "\21\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\12\4\1\333"+
    "\10\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\1\4\1\143"+
    "\15\4\1\156\3\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\3\4\1\u0189\17\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\2\4\4\0"+
    "\1\4\1\164\15\4\1\u018a\3\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\1\4\5\0\1\176\1\177\1\200\1\201\1\202\1\0"+
    "\1\203\1\204\1\205\1\206\2\0\1\207\1\210\1\211"+
    "\45\0\1\4\4\0\10\4\1\u018b\12\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\23\4\1\0\1\4\5\0\1\4"+
    "\1\0\1\4\1\u018c\13\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\10\4\1\u018d\4\4\1\u018e\2\4"+
    "\1\u018f\2\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\u018d\17\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\4"+
    "\1\u0190\21\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\10\4"+
    "\1\u013b\12\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\15\4"+
    "\1\u013e\5\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\u013b\13\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\4\4"+
    "\1\u0191\16\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\12\4"+
    "\1\u0192\10\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\u013c\17\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\12\4"+
    "\1\277\10\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\17\4"+
    "\1\77\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\13\4"+
    "\1\u0193\7\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\6\4"+
    "\1\u0194\14\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\17\4"+
    "\1\u0195\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\23\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\1\u0196\13\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\16\4"+
    "\1\u0163\4\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\12\4"+
    "\1\u0153\10\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\22\4"+
    "\1\u0197\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\12\4\1\u014e"+
    "\10\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\4\4\1\u0198"+
    "\16\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\3\4\1\u0199"+
    "\17\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\3\4\1\u019a"+
    "\17\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\16\4\1\361"+
    "\4\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\2\4\1\u019b"+
    "\1\4\1\u019c\6\4\1\u019d\7\4\1\0\1\4\5\0"+
    "\1\4\1\0\1\4\1\u019e\13\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\13\4\1\u019f\7\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\4\4\1\u01a0\16\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\17\4\1\u01a1\3\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\10\4\1\u01a2\12\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\20\4\1\u01a3\2\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\2\4\4\0\3\4\1\u01a4\13\4\1\u01a5"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\7\4\1\u01a6"+
    "\13\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\4\4\1\u01a7"+
    "\16\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\4\4\1\u01a8"+
    "\16\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\20\4\1\u01a9"+
    "\2\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\5\4\1\u01aa"+
    "\15\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\10\4\1\u01ab"+
    "\12\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\5\4\1\u01ac"+
    "\15\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\17\4\1\u01ad"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\6\4\1\u01ae"+
    "\14\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\17\4\1\u01af"+
    "\3\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\15\4\1\276"+
    "\5\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\7\4\1\u013b"+
    "\10\4\1\323\2\4\1\0\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\66\2\0\1\4\10\0"+
    "\1\u016a\65\0\1\176\1\177\1\200\1\201\1\202\1\0"+
    "\1\203\1\204\1\205\1\206\2\0\1\207\1\210\1\211"+
    "\4\0\1\u0134\64\0\1\u01b0\70\0\1\u01b1\44\0\1\4"+
    "\4\0\12\4\1\u01b2\10\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\1\4"+
    "\17\0\1\u01b3\61\0\1\u01b4\71\0\2\u01b5\75\0\1\u01b6"+
    "\61\0\1\u01b7\100\0\1\u01b8\6\0\1\u01b9\51\0\1\u01ba"+
    "\13\0\1\u01ba\57\0\1\u01bb\63\0\1\u01bc\72\0\1\u01bd"+
    "\13\0\1\u01be\54\0\1\u01bf\73\0\1\u01c0\3\0\1\u01bd"+
    "\117\0\4\u01c1\64\0\3\u01c1\27\0\1\u01b3\71\0\1\u017f"+
    "\11\0\1\u0180\5\0\1\u0181\23\0\1\u0182\25\0\1\u01c2"+
    "\10\0\1\u01c3\75\0\1\u01c4\63\0\1\u01c3\2\0\1\u01c2"+
    "\65\0\1\u01c3\2\0\1\u01c5\67\0\1\u0117\45\0\1\252"+
    "\4\0\6\252\1\u01c6\14\252\1\0\1\252\5\0\1\252"+
    "\1\0\15\252\4\0\1\252\2\0\1\66\2\0\2\252"+
    "\4\0\3\252\1\u01c7\17\252\1\0\1\252\5\0\1\252"+
    "\1\0\15\252\4\0\1\252\2\0\1\66\2\0\1\252"+
    "\23\0\1\270\45\0\1\4\4\0\2\4\1\272\20\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\15\4\1\305\5\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\11\4\1\277\11\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\14\4\1\277\6\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\12\4\1\165\10\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\17\4\1\u01c8\1\4"+
    "\1\276\1\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\15\4"+
    "\1\u018e\5\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\17\4"+
    "\1\u01c9\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\17\4"+
    "\1\u01ca\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\16\4"+
    "\1\u0138\4\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\4"+
    "\1\u01c9\21\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\21\4"+
    "\1\u01c9\1\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\272\13\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\17\4"+
    "\1\u0147\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\20\4"+
    "\1\u01cb\2\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\130\17\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\u01cc\17\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\16\4"+
    "\1\u01cd\4\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\16\4"+
    "\1\u01ce\4\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\u01cf\17\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\4"+
    "\1\u01d0\21\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\17\4"+
    "\1\u01d1\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\4"+
    "\1\u01d2\21\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\12\4"+
    "\1\u01a7\10\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\2\4"+
    "\1\u01d3\20\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\12\4"+
    "\1\u0149\10\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\15\4"+
    "\1\u01d4\5\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\u01d5\13\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\u01d6\13\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\17\4"+
    "\1\u01d7\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\144\17\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\u01d8\13\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\4\4"+
    "\1\u01d9\16\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\u01da\13\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\u01db"+
    "\22\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\12\4\1\u01db"+
    "\10\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\15\4\1\u01dc"+
    "\5\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\2\4\4\0\1\4\1\u01a0"+
    "\21\4\1\0\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\66\2\0\1\4\17\0\1\u016a\71\0"+
    "\1\u01dd\50\0\1\4\4\0\5\4\1\u01de\15\4\1\0"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\66\2\0\1\4\21\0\1\225\60\0\1\u01df\74\0"+
    "\1\u01df\10\0\2\u01df\52\0\1\u01df\6\0\1\u01df\65\0"+
    "\1\u01df\61\0\1\u01df\74\0\1\u01df\105\0\1\u01df\57\0"+
    "\1\u01df\77\0\1\u01df\56\0\1\u01df\76\0\1\u01df\72\0"+
    "\1\u01df\1\0\1\u01df\73\0\1\u01e0\67\0\1\u01e1\52\0"+
    "\1\u01e2\102\0\1\u01e3\45\0\1\252\4\0\16\252\1\u01e4"+
    "\4\252\1\0\1\252\5\0\1\252\1\0\15\252\4\0"+
    "\1\252\2\0\1\66\2\0\1\252\1\4\4\0\5\4"+
    "\1\u01e5\15\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\23\4"+
    "\1\u010f\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\5\4\1\u01e6\15\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\12\4\1\144\10\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\16\4\1\u01e7\4\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\16\4\1\u01cb\4\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\20\4\1\u019c\2\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\6\4\1\u01d0\14\4"+
    "\1\0\1\4\5\0\1\4\1\0\13\4\1\u01d0\1\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\10\4"+
    "\1\u01d0\12\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\u01e8\17\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\323\13\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\7\4"+
    "\1\u01e9\13\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\2\4"+
    "\1\u01ea\20\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\17\4"+
    "\1\u01eb\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\4"+
    "\1\u01ec\21\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\1\4"+
    "\1\310\21\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\310\17\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\1\4\14\0\1\u0169"+
    "\54\0\1\4\4\0\1\u01ed\22\4\1\0\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\66\2\0"+
    "\1\4\6\0\1\u01ee\1\0\1\u01ef\1\u01f0\1\u01f1\1\u01f2"+
    "\1\u01f3\1\u01f4\3\0\1\u01f5\1\0\1\u01f6\1\u01f7\1\u01f8"+
    "\1\u01c1\1\u01f9\1\u01e0\10\0\1\u01fa\74\0\5\u01fb\36\0"+
    "\1\u01fc\61\0\1\u01fd\66\0\1\u01fc\62\0\1\252\4\0"+
    "\4\252\1\u01fe\16\252\1\0\1\252\5\0\1\252\1\0"+
    "\15\252\4\0\1\252\2\0\1\66\2\0\1\252\1\4"+
    "\4\0\12\4\1\u01ff\10\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\12\4\1\u01c9\10\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\3\4\1\u016e\6\4\1\u016e\10\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\20\4\1\u0200\2\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\17\4\1\u0201\3\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\1\4\1\u0166\21\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\1\4\1\u0202\21\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\2\4\4\0\10\4\1\u0203\12\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\1\4\21\0\1\u0204\56\0\1\u01ee\20\0\1\u01e0"+
    "\50\0\1\u0205\65\0\1\u01c1\102\0\1\u0206\62\0\1\u01fa"+
    "\72\0\1\u01f2\72\0\1\u01f8\77\0\1\u01fa\67\0\1\u0207"+
    "\64\0\1\u01f6\75\0\2\u01fa\51\0\1\u01c1\127\0\5\u0208"+
    "\40\0\1\u0180\47\0\1\4\4\0\4\4\1\323\16\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\4\4\1\u0209\16\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\1\4\1\u020a\21\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\20\4\1\u020b\2\4"+
    "\1\0\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\66\2\0\2\4\4\0\17\4\1\u020c\1\4"+
    "\1\u016e\1\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\1\4\10\0\1\u020d"+
    "\4\0\1\u020e\62\0\1\u01ee\76\0\1\u020f\63\0\1\u01c1"+
    "\17\0\1\u01e0\105\0\5\u0210\17\0\1\4\4\0\17\4"+
    "\1\u0144\3\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\20\4"+
    "\1\353\2\4\1\0\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\66\2\0\2\4\4\0\3\4"+
    "\1\276\3\4\1\276\13\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\2\4"+
    "\4\0\3\4\1\u0211\17\4\1\0\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\66\2\0\1\4"+
    "\15\0\1\u01c1\63\0\1\u01c1\106\0\1\u01c1\107\0\5\u0212"+
    "\17\0\1\4\4\0\7\4\1\u016e\13\4\1\0\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\66"+
    "\2\0\1\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27018];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\1\1\11\25\1\7\11\12\1\1\11"+
    "\5\1\1\11\3\1\1\0\107\1\14\0\1\11\1\0"+
    "\7\1\4\0\1\1\2\0\3\11\1\1\1\0\1\1"+
    "\11\0\1\11\3\1\1\11\1\1\1\0\1\1\7\0"+
    "\1\11\1\0\75\1\17\0\6\1\1\0\1\1\3\0"+
    "\1\1\5\0\1\11\4\0\2\1\11\0\102\1\1\0"+
    "\1\1\2\0\2\1\24\0\55\1\2\0\1\1\1\0"+
    "\1\11\16\0\1\1\2\0\27\1\1\0\1\1\5\0"+
    "\12\1\17\0\1\11\6\1\5\0\4\1\4\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[530];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	/* Per disattivare il debugging, quindi la stampa dei simboli riconosciuti
	da parte dello scanner impostare la costante _DEBUG a false */
	private static final boolean _DEBUG = false;
	private Symbol symbol(int type) {
		if (_DEBUG) System.out.print("# "+type+" "+yytext()+"\n");	
		return new Symbol(type, yyline, yycolumn);
  	}
	private Symbol symbol(int type, Object value) {
	    	if (_DEBUG) System.out.print("# "+type+" > " +value+"\n");
		return new Symbol(type, yyline, yycolumn, value);
	}
	private int lines=0;	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 49: 
          { return symbol(sym.Com_Find);
          }
        case 61: break;
        case 46: 
          { return symbol(sym.Com_If_2);
          }
        case 62: break;
        case 10: 
          { return symbol(sym.SC);
          }
        case 63: break;
        case 22: 
          { return symbol(sym.Prep_supp);
          }
        case 64: break;
        case 58: 
          { return symbol(sym.Com_For);
          }
        case 65: break;
        case 12: 
          { return symbol(sym.Minus,new String(yytext()));
          }
        case 66: break;
        case 5: 
          { return symbol(sym.Div,new String(yytext()));
          }
        case 67: break;
        case 52: 
          { return symbol(sym.Com_If_e);
          }
        case 68: break;
        case 11: 
          { return symbol(sym.Plus,new String(yytext()));
          }
        case 69: break;
        case 15: 
          { return symbol(sym.C_Ug);
          }
        case 70: break;
        case 43: 
          { return symbol(sym.Vint, new Float(yytext()));
          }
        case 71: break;
        case 44: 
          { return symbol(sym.Com_If_m);
          }
        case 72: break;
        case 7: 
          { return symbol(sym.RO);
          }
        case 73: break;
        case 41: 
          { return symbol(sym.Obj);
          }
        case 74: break;
        case 34: 
          { return symbol(sym.Var,new String(yytext()));
          }
        case 75: break;
        case 45: 
          { return symbol(sym.Com_Ex);
          }
        case 76: break;
        case 18: 
          { return symbol(sym.C_Or,new String("|"));
          }
        case 77: break;
        case 31: 
          { return symbol(sym.C_Orr,new String("||"));
          }
        case 78: break;
        case 19: 
          { return symbol(sym.C_And,new String("&"));
          }
        case 79: break;
        case 50: 
          { return symbol(sym.Where);
          }
        case 80: break;
        case 54: 
          { return symbol(sym.Com_P);
          }
        case 81: break;
        case 1: 
          { return symbol(sym.ID,new String(yytext()));
          }
        case 82: break;
        case 56: 
          { return symbol(sym.Name);
          }
        case 83: break;
        case 23: 
          { return symbol(sym.Com_Cp);
          }
        case 84: break;
        case 35: 
          { yybegin(YYINITIAL);
          }
        case 85: break;
        case 16: 
          { return symbol(sym.Cond);
          }
        case 86: break;
        case 2: 
          { ;
          }
        case 87: break;
        case 39: 
          { /*yybegin(YYINITIAL);*/ return symbol(sym.End_S);
          }
        case 88: break;
        case 60: 
          { return symbol(sym.GMA);
          }
        case 89: break;
        case 48: 
          { return symbol(sym.Com_Str);
          }
        case 90: break;
        case 55: 
          { return symbol(sym.FUnit);
          }
        case 91: break;
        case 42: 
          { return symbol(sym.IUnit);
          }
        case 92: break;
        case 8: 
          { return symbol(sym.RC);
          }
        case 93: break;
        case 30: 
          { return symbol(sym.Minor);
          }
        case 94: break;
        case 36: 
          { return symbol(sym.File);
          }
        case 95: break;
        case 9: 
          { return symbol(sym.SO);
          }
        case 96: break;
        case 57: 
          { return symbol(sym.Throw_S);
          }
        case 97: break;
        case 21: 
          { return symbol(sym.Com_Mov);
          }
        case 98: break;
        case 28: 
          { return symbol(sym.Com_Ls);
          }
        case 99: break;
        case 32: 
          { return symbol(sym.C_Andd,new String("&&"));
          }
        case 100: break;
        case 3: 
          { lines++;System.out.println("\t\tlinea:"+lines);return symbol(sym.EL);
          }
        case 101: break;
        case 53: 
          { /*yybegin(script);*/ return symbol(sym.Start_S);
          }
        case 102: break;
        case 24: 
          { return symbol(sym.Com_Cd);
          }
        case 103: break;
        case 20: 
          { System.out.println("errore: "+yytext());
          }
        case 104: break;
        case 51: 
          { return symbol(sym.Com_For_e);
          }
        case 105: break;
        case 4: 
          { return symbol(sym.Ext);
          }
        case 106: break;
        case 27: 
          { return symbol(sym.Com_For_m);
          }
        case 107: break;
        case 29: 
          { yybegin(comment);
          }
        case 108: break;
        case 26: 
          { return symbol(sym.Com_Rm);
          }
        case 109: break;
        case 33: 
          { String s = new String(yytext());
					return symbol(sym.Str,s.substring(1, s.length()-1));
          }
        case 110: break;
        case 13: 
          { return symbol(sym.Pv);
          }
        case 111: break;
        case 47: 
          { return symbol(sym.Bool,new Boolean(yytext()));
          }
        case 112: break;
        case 37: 
          { return symbol(sym.Criteria);
          }
        case 113: break;
        case 40: 
          { return symbol(sym.Order);
          }
        case 114: break;
        case 38: 
          { return symbol(sym.Path);
          }
        case 115: break;
        case 14: 
          { return symbol(sym.Int, new Integer(yytext()));
          }
        case 116: break;
        case 59: 
          { return symbol(sym.Result);
          }
        case 117: break;
        case 17: 
          { return symbol(sym.C_Not,new String("!"));
          }
        case 118: break;
        case 6: 
          { return symbol(sym.Times,new String(yytext()));
          }
        case 119: break;
        case 25: 
          { return symbol(sym.Com_If);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
