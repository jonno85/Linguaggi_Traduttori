
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Sep 10 01:10:22 CEST 2011
//----------------------------------------------------


/** CUP v0.10k generated parser.
  * @version Sat Sep 10 01:10:22 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\026\005\000\002\037\005\000\002\040\004" +
    "\000\002\010\003\000\002\010\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\004\004\000\002\004\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\007\005\000\002\007\003\000\002\005\004\000\002" +
    "\005\004\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\004\000\002\030\003\000\002\030\005\000" +
    "\002\030\004\000\002\032\003\000\002\032\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\051\003\000\002\051\004\000\002\051\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\006\000\002\020\003\000\002\020\005\000" +
    "\002\020\004\000\002\014\002\000\002\014\003\000\002" +
    "\021\003\000\002\021\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\024\006\000\002\024\006" +
    "\000\002\024\006\000\002\024\006\000\002\024\006\000" +
    "\002\024\006\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\041\003\000\002\041\003\000\002\044\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\016\003" +
    "\000\002\016\003\000\002\043\005\000\002\042\003\000" +
    "\002\042\004\000\002\042\005\000\002\042\005\000\002" +
    "\013\007\000\002\050\007\000\002\050\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\033\010\000\002\036\003\000\002\036\003\000" +
    "\002\045\005\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\064\002\000\005\026\006\007\007\055\010" +
    "\052\011\004\012\011\016\013\021\054\022\057\023\022" +
    "\024\043\056\017\057\020\062\030\064\053\070\033\071" +
    "\041\076\035\077\005\101\023\103\037\104\031\105\010" +
    "\110\050\001\002\000\024\025\uffd4\027\uffd4\030\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\041\uffd4\073\uffd4\074\uffd4\001\002" +
    "\000\004\102\276\001\002\000\030\025\uffcf\027\uffcf\030" +
    "\uffcf\031\275\035\uffcf\036\uffcf\037\uffcf\040\274\041\uffcf" +
    "\073\uffcf\074\uffcf\001\002\000\024\025\uffd1\027\uffd1\030" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\073\uffd1\074\uffd1" +
    "\001\002\000\052\004\uffa6\013\uffa6\025\uffa6\027\uffa6\030" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\041\uffa6\051\uffa6\052\uffa6" +
    "\054\uffa6\055\uffa6\057\uffa6\063\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\067\uffa6\103\uffa6\001\002\000\026\056\017\057\066" +
    "\062\030\064\053\070\033\071\041\101\023\104\031\105" +
    "\010\110\050\001\002\000\010\012\uffee\016\uffee\103\uffee" +
    "\001\002\000\012\026\240\057\244\104\243\105\242\001" +
    "\002\000\010\012\011\016\013\103\262\001\002\000\004" +
    "\002\257\001\002\000\064\002\uffff\005\026\006\007\007" +
    "\055\010\052\011\004\012\011\016\013\021\054\022\057" +
    "\023\022\024\043\056\017\057\020\062\030\064\053\070" +
    "\033\071\041\076\035\077\005\101\023\103\037\104\031" +
    "\105\010\110\050\001\002\000\026\056\064\057\066\062" +
    "\030\064\053\070\033\071\041\101\023\104\031\105\010" +
    "\110\050\001\002\000\022\050\063\051\uffdd\052\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\103\uffea\001\002\000\006" +
    "\014\251\015\250\001\002\000\024\025\uffd2\027\uffd2\030" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\073\uffd2\074\uffd2" +
    "\001\002\000\052\004\uffa5\013\uffa5\025\uffa5\027\uffa5\030" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\051\uffa5\052\uffa5" +
    "\054\uffa5\055\uffa5\057\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\067\uffa5\103\uffa5\001\002\000\004\103\247\001\002" +
    "\000\016\051\074\052\067\064\070\065\073\066\071\067" +
    "\072\001\002\000\020\025\105\027\112\030\107\035\uffc3" +
    "\036\uffc3\037\uffc3\041\104\001\002\000\062\005\026\006" +
    "\007\007\055\010\052\011\004\012\011\016\013\021\054" +
    "\022\057\023\022\024\043\056\017\057\020\062\030\064" +
    "\053\070\033\071\041\076\035\077\005\101\023\103\037" +
    "\104\031\105\010\110\050\001\002\000\026\056\064\057" +
    "\066\062\030\064\053\070\033\071\041\101\023\104\031" +
    "\105\010\110\050\001\002\000\052\004\uffa7\013\uffa7\025" +
    "\uffa7\027\uffa7\030\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7" +
    "\051\uffa7\052\uffa7\054\uffa7\055\uffa7\057\uffa7\063\uffa7\064" +
    "\uffa7\065\uffa7\066\uffa7\067\uffa7\103\uffa7\001\002\000\006" +
    "\057\062\103\226\001\002\000\052\004\uffa3\013\uffa3\025" +
    "\uffa3\027\uffa3\030\uffa3\035\uffa3\036\uffa3\037\uffa3\041\uffa3" +
    "\051\uffa3\052\uffa3\054\uffa3\055\uffa3\057\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\103\uffa3\001\002\000\004" +
    "\103\224\001\002\000\004\027\223\001\002\000\024\004" +
    "\214\025\105\027\112\030\107\035\uffc3\036\uffc3\037\uffc3" +
    "\041\104\103\213\001\002\000\072\002\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\056" +
    "\ufff0\057\ufff0\062\ufff0\064\ufff0\070\ufff0\071\ufff0\076\ufff0" +
    "\077\ufff0\101\ufff0\103\ufff0\104\ufff0\105\ufff0\110\ufff0\001" +
    "\002\000\020\025\105\027\112\030\107\035\uffc3\036\uffc3" +
    "\037\uffc3\041\104\001\002\000\052\004\uffa4\013\uffa4\025" +
    "\uffa4\027\uffa4\030\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4" +
    "\051\uffa4\052\uffa4\054\uffa4\055\uffa4\057\uffa4\063\uffa4\064" +
    "\uffa4\065\uffa4\066\uffa4\067\uffa4\103\uffa4\001\002\000\032" +
    "\013\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc\057\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\103\uffdc\001\002" +
    "\000\026\056\064\057\066\062\030\064\053\070\033\071" +
    "\041\101\023\104\031\105\010\110\050\001\002\000\004" +
    "\103\205\001\002\000\032\013\uffe0\051\uffe0\052\uffe0\054" +
    "\uffe0\055\uffe0\057\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\103\uffe0\001\002\000\012\013\uff9e\054\uff9e\055" +
    "\uff9e\103\uff9e\001\002\000\010\054\175\055\176\103\200" +
    "\001\002\000\052\004\uffa2\013\uffa2\025\uffa2\027\uffa2\030" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\051\uffa2\052\uffa2" +
    "\054\uffa2\055\uffa2\057\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\103\uffa2\001\002\000\010\012\uffef\016\uffef" +
    "\103\uffef\001\002\000\024\025\uffd0\027\uffd0\030\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\041\uffd0\073\uffd0\074\uffd0\001\002" +
    "\000\026\056\064\057\066\062\030\064\053\070\033\071" +
    "\041\101\023\104\031\105\010\110\050\001\002\000\030" +
    "\025\uffce\027\uffce\030\uffce\031\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\073\uffce\074\uffce\001\002\000\024" +
    "\025\uffd3\027\uffd3\030\uffd3\035\uffd3\036\uffd3\037\uffd3\041" +
    "\uffd3\073\uffd3\074\uffd3\001\002\000\022\025\105\027\112" +
    "\030\107\035\uffc3\036\uffc3\037\uffc3\041\104\103\114\001" +
    "\002\000\004\057\062\001\002\000\072\002\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\056\ufffb\057\ufffb\062\ufffb\064\ufffb\070\ufffb\071\ufffb\076" +
    "\ufffb\077\ufffb\101\ufffb\103\ufffb\104\ufffb\105\ufffb\110\ufffb" +
    "\001\002\000\006\057\uffe9\103\uffe9\001\002\000\010\050" +
    "\063\057\uffea\103\uffea\001\002\000\026\056\064\057\066" +
    "\062\030\064\053\070\033\071\041\101\023\104\031\105" +
    "\010\110\050\001\002\000\026\056\064\057\066\062\030" +
    "\064\053\070\033\071\041\101\023\104\031\105\010\110" +
    "\050\001\002\000\022\051\074\052\067\057\uffeb\064\070" +
    "\065\073\066\071\067\072\103\uffeb\001\002\000\032\013" +
    "\uffdd\051\uffdd\052\uffdd\054\uffdd\055\uffdd\057\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\103\uffdd\001\002\000" +
    "\026\056\064\057\066\062\030\064\053\070\033\071\041" +
    "\101\023\104\031\105\010\110\050\001\002\000\026\056" +
    "\064\057\066\062\030\064\053\070\033\071\041\101\023" +
    "\104\031\105\010\110\050\001\002\000\026\056\064\057" +
    "\066\062\030\064\053\070\033\071\041\101\023\104\031" +
    "\105\010\110\050\001\002\000\026\056\064\057\066\062" +
    "\030\064\053\070\033\071\041\101\023\104\031\105\010" +
    "\110\050\001\002\000\026\056\064\057\066\062\030\064" +
    "\053\070\033\071\041\101\023\104\031\105\010\110\050" +
    "\001\002\000\026\056\064\057\066\062\030\064\053\070" +
    "\033\071\041\101\023\104\031\105\010\110\050\001\002" +
    "\000\032\013\uffe3\051\uffe3\052\uffe3\054\uffe3\055\uffe3\057" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\103\uffe3" +
    "\001\002\000\032\013\uffe5\051\074\052\uffe5\054\uffe5\055" +
    "\uffe5\057\uffe5\063\uffe5\064\uffe5\065\uffe5\066\071\067\072" +
    "\103\uffe5\001\002\000\032\013\uffe6\051\uffe6\052\uffe6\054" +
    "\uffe6\055\uffe6\057\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\103\uffe6\001\002\000\032\013\uffe7\051\uffe7\052" +
    "\uffe7\054\uffe7\055\uffe7\057\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\103\uffe7\001\002\000\032\013\uffe4\051" +
    "\074\052\uffe4\054\uffe4\055\uffe4\057\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\066\071\067\072\103\uffe4\001\002\000\032\013" +
    "\uffe2\051\074\052\uffe2\054\uffe2\055\uffe2\057\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\071\067\072\103\uffe2\001\002\000" +
    "\032\013\uffde\051\uffde\052\uffde\054\uffde\055\uffde\057\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\103\uffde\001" +
    "\002\000\010\035\uffc2\036\uffc2\037\uffc2\001\002\000\030" +
    "\004\uffd9\025\uffd9\027\uffd9\030\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\041\uffd9\073\uffd9\074\uffd9\103\uffd9\001\002\000\022" +
    "\025\uffd6\027\uffd6\030\uffd6\035\uffd6\036\uffd6\037\uffd6\041" +
    "\uffd6\103\uffd6\001\002\000\030\004\uffdb\025\uffdb\027\uffdb" +
    "\030\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb\073\uffdb\074" +
    "\uffdb\103\uffdb\001\002\000\030\004\uffbf\025\uffbf\027\uffbf" +
    "\030\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf\051\uffbf\052" +
    "\uffbf\103\uffbf\001\002\000\030\004\uffc1\025\uffc1\027\uffc1" +
    "\030\uffc1\035\uffc1\036\uffc1\037\uffc1\041\uffc1\051\uffc1\052" +
    "\uffc1\103\uffc1\001\002\000\030\004\uffda\025\uffda\027\uffda" +
    "\030\uffda\035\uffda\036\uffda\037\uffda\041\uffda\073\uffda\074" +
    "\uffda\103\uffda\001\002\000\010\035\126\036\124\037\125" +
    "\001\002\000\072\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\056\ufff6\057\ufff6\062" +
    "\ufff6\064\ufff6\070\ufff6\071\ufff6\076\ufff6\077\ufff6\101\ufff6" +
    "\103\ufff6\104\ufff6\105\ufff6\110\ufff6\001\002\000\030\004" +
    "\uffbd\025\uffbd\027\uffbd\030\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\041\uffbd\051\uffbd\052\uffbd\103\uffbd\001\002\000\026\025" +
    "\uffd5\027\uffd5\030\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5" +
    "\051\121\052\120\103\uffd5\001\002\000\030\004\uffbe\025" +
    "\uffbe\027\uffbe\030\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe" +
    "\051\uffbe\052\uffbe\103\uffbe\001\002\000\012\035\uffa9\036" +
    "\uffa9\037\uffa9\041\uffa9\001\002\000\012\035\uffaa\036\uffaa" +
    "\037\uffaa\041\uffaa\001\002\000\012\035\uffc3\036\uffc3\037" +
    "\uffc3\041\104\001\002\000\030\004\uffc0\025\uffc0\027\uffc0" +
    "\030\uffc0\035\uffc0\036\uffc0\037\uffc0\041\uffc0\051\uffc0\052" +
    "\uffc0\103\uffc0\001\002\000\016\043\160\044\161\045\162" +
    "\046\164\047\165\050\163\001\002\000\016\043\144\044" +
    "\145\045\146\046\150\047\151\050\147\001\002\000\016" +
    "\043\130\044\127\045\131\046\133\047\134\050\132\001" +
    "\002\000\004\032\136\001\002\000\004\032\136\001\002" +
    "\000\004\032\136\001\002\000\004\032\136\001\002\000" +
    "\004\032\136\001\002\000\004\032\136\001\002\000\030" +
    "\004\uffac\025\uffac\027\uffac\030\uffac\035\uffac\036\uffac\037" +
    "\uffac\041\uffac\051\uffac\052\uffac\103\uffac\001\002\000\030" +
    "\004\uffa8\025\uffa8\027\uffa8\030\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\041\uffa8\051\uffa8\052\uffa8\103\uffa8\001\002\000\030" +
    "\004\uffad\025\uffad\027\uffad\030\uffad\035\uffad\036\uffad\037" +
    "\uffad\041\uffad\051\uffad\052\uffad\103\uffad\001\002\000\030" +
    "\004\uffab\025\uffab\027\uffab\030\uffab\035\uffab\036\uffab\037" +
    "\uffab\041\uffab\051\uffab\052\uffab\103\uffab\001\002\000\030" +
    "\004\uffae\025\uffae\027\uffae\030\uffae\035\uffae\036\uffae\037" +
    "\uffae\041\uffae\051\uffae\052\uffae\103\uffae\001\002\000\030" +
    "\004\uffb0\025\uffb0\027\uffb0\030\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\041\uffb0\051\uffb0\052\uffb0\103\uffb0\001\002\000\030" +
    "\004\uffaf\025\uffaf\027\uffaf\030\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\041\uffaf\051\uffaf\052\uffaf\103\uffaf\001\002\000\016" +
    "\070\033\071\041\101\023\104\031\105\010\110\050\001" +
    "\002\000\016\070\033\071\041\101\023\104\031\105\010" +
    "\110\050\001\002\000\016\070\033\071\041\101\023\104" +
    "\031\105\010\110\050\001\002\000\016\070\033\071\041" +
    "\101\023\104\031\105\010\110\050\001\002\000\016\070" +
    "\033\071\041\101\023\104\031\105\010\110\050\001\002" +
    "\000\016\070\033\071\041\101\023\104\031\105\010\110" +
    "\050\001\002\000\030\004\uffb8\025\uffb8\027\uffb8\030\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\041\uffb8\051\uffb8\052\uffb8\103" +
    "\uffb8\001\002\000\030\004\uffb9\025\uffb9\027\uffb9\030\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\041\uffb9\051\uffb9\052\uffb9\103" +
    "\uffb9\001\002\000\030\004\uffb7\025\uffb7\027\uffb7\030\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\041\uffb7\051\uffb7\052\uffb7\103" +
    "\uffb7\001\002\000\030\004\uffba\025\uffba\027\uffba\030\uffba" +
    "\035\uffba\036\uffba\037\uffba\041\uffba\051\uffba\052\uffba\103" +
    "\uffba\001\002\000\030\004\uffbb\025\uffbb\027\uffbb\030\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\041\uffbb\051\uffbb\052\uffbb\103" +
    "\uffbb\001\002\000\030\004\uffbc\025\uffbc\027\uffbc\030\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\041\uffbc\051\uffbc\052\uffbc\103" +
    "\uffbc\001\002\000\016\070\033\071\041\101\023\104\031" +
    "\105\010\110\050\001\002\000\016\070\033\071\041\101" +
    "\023\104\031\105\010\110\050\001\002\000\016\070\033" +
    "\071\041\101\023\104\031\105\010\110\050\001\002\000" +
    "\016\070\033\071\041\101\023\104\031\105\010\110\050" +
    "\001\002\000\016\070\033\071\041\101\023\104\031\105" +
    "\010\110\050\001\002\000\016\070\033\071\041\101\023" +
    "\104\031\105\010\110\050\001\002\000\030\004\uffb2\025" +
    "\uffb2\027\uffb2\030\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2" +
    "\051\uffb2\052\uffb2\103\uffb2\001\002\000\030\004\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\035\uffb3\036\uffb3\037\uffb3\041\uffb3" +
    "\051\uffb3\052\uffb3\103\uffb3\001\002\000\030\004\uffb1\025" +
    "\uffb1\027\uffb1\030\uffb1\035\uffb1\036\uffb1\037\uffb1\041\uffb1" +
    "\051\uffb1\052\uffb1\103\uffb1\001\002\000\030\004\uffb4\025" +
    "\uffb4\027\uffb4\030\uffb4\035\uffb4\036\uffb4\037\uffb4\041\uffb4" +
    "\051\uffb4\052\uffb4\103\uffb4\001\002\000\030\004\uffb5\025" +
    "\uffb5\027\uffb5\030\uffb5\035\uffb5\036\uffb5\037\uffb5\041\uffb5" +
    "\051\uffb5\052\uffb5\103\uffb5\001\002\000\030\004\uffb6\025" +
    "\uffb6\027\uffb6\030\uffb6\035\uffb6\036\uffb6\037\uffb6\041\uffb6" +
    "\051\uffb6\052\uffb6\103\uffb6\001\002\000\032\013\uffe1\051" +
    "\074\052\uffe1\054\uffe1\055\uffe1\057\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\066\071\067\072\103\uffe1\001\002\000\026\056" +
    "\uffa0\057\uffa0\062\uffa0\064\uffa0\070\uffa0\071\uffa0\101\uffa0" +
    "\104\uffa0\105\uffa0\110\uffa0\001\002\000\026\056\uffa1\057" +
    "\uffa1\062\uffa1\064\uffa1\070\uffa1\071\uffa1\101\uffa1\104\uffa1" +
    "\105\uffa1\110\uffa1\001\002\000\026\056\064\057\066\062" +
    "\030\064\053\070\033\071\041\101\023\104\031\105\010" +
    "\110\050\001\002\000\072\002\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\056\ufff1\057" +
    "\ufff1\062\ufff1\064\ufff1\070\ufff1\071\ufff1\076\ufff1\077\ufff1" +
    "\101\ufff1\103\ufff1\104\ufff1\105\ufff1\110\ufff1\001\002\000" +
    "\012\013\uff9c\054\uff9c\055\uff9c\103\uff9c\001\002\000\026" +
    "\013\uff9b\051\074\052\067\054\uff9b\055\uff9b\064\070\065" +
    "\073\066\071\067\072\103\uff9b\001\002\000\026\056\064" +
    "\057\066\062\030\064\053\070\033\071\041\101\023\104" +
    "\031\105\010\110\050\001\002\000\026\013\uff9f\051\074" +
    "\052\067\054\uff9f\055\uff9f\064\070\065\073\066\071\067" +
    "\072\103\uff9f\001\002\000\072\002\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\056\ufff4" +
    "\057\ufff4\062\ufff4\064\ufff4\070\ufff4\071\ufff4\076\ufff4\077" +
    "\ufff4\101\ufff4\103\ufff4\104\ufff4\105\ufff4\110\ufff4\001\002" +
    "\000\020\051\074\052\067\064\070\065\073\066\071\067" +
    "\072\103\207\001\002\000\072\002\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\056\ufff2" +
    "\057\ufff2\062\ufff2\064\ufff2\070\ufff2\071\ufff2\076\ufff2\077" +
    "\ufff2\101\ufff2\103\ufff2\104\ufff2\105\ufff2\110\ufff2\001\002" +
    "\000\022\025\uffd8\027\uffd8\030\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\041\uffd8\103\uffd8\001\002\000\026\025\uffd7\027\uffd7" +
    "\030\uffd7\035\uffd7\036\uffd7\037\uffd7\041\uffd7\051\121\052" +
    "\120\103\uffd7\001\002\000\024\004\uffc9\025\uffc9\027\uffc9" +
    "\030\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\103\uffc9\001" +
    "\002\000\072\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\056\ufff5\057\ufff5\062\ufff5" +
    "\064\ufff5\070\ufff5\071\ufff5\076\ufff5\077\ufff5\101\ufff5\103" +
    "\ufff5\104\ufff5\105\ufff5\110\ufff5\001\002\000\016\006\007" +
    "\007\055\010\052\011\004\021\054\023\022\001\002\000" +
    "\030\004\uffc8\025\uffc8\027\uffc8\030\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\041\uffc8\051\121\052\120\103\uffc8\001\002\000" +
    "\006\073\uffc6\074\uffc6\001\002\000\006\073\221\074\220" +
    "\001\002\000\014\025\105\027\112\030\107\073\uffc4\074" +
    "\uffc4\001\002\000\024\004\uffc7\025\uffc7\027\uffc7\030\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\041\uffc7\103\uffc7\001\002\000" +
    "\006\073\uffc5\074\uffc5\001\002\000\004\103\ufffc\001\002" +
    "\000\072\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\056\ufff8\057\ufff8\062\ufff8\064" +
    "\ufff8\070\ufff8\071\ufff8\076\ufff8\077\ufff8\101\ufff8\103\ufff8" +
    "\104\ufff8\105\ufff8\110\ufff8\001\002\000\006\057\uffe8\103" +
    "\uffe8\001\002\000\072\002\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\056\ufff9\057\ufff9" +
    "\062\ufff9\064\ufff9\070\ufff9\071\ufff9\076\ufff9\077\ufff9\101" +
    "\ufff9\103\ufff9\104\ufff9\105\ufff9\110\ufff9\001\002\000\020" +
    "\051\074\052\067\063\230\064\070\065\073\066\071\067" +
    "\072\001\002\000\032\013\uffdf\051\uffdf\052\uffdf\054\uffdf" +
    "\055\uffdf\057\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\103\uffdf\001\002\000\064\005\026\006\007\007\055" +
    "\010\052\011\004\012\011\016\013\017\233\021\054\022" +
    "\057\023\022\024\043\056\017\057\020\062\030\064\053" +
    "\070\033\071\041\076\035\077\005\101\023\103\037\104" +
    "\031\105\010\110\050\001\002\000\010\012\uff8f\016\uff8f" +
    "\103\uff8f\001\002\000\006\064\235\065\237\001\002\000" +
    "\072\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\056\ufffa\057\ufffa\062\ufffa\064\ufffa" +
    "\070\ufffa\071\ufffa\076\ufffa\077\ufffa\101\ufffa\103\ufffa\104" +
    "\ufffa\105\ufffa\110\ufffa\001\002\000\012\026\uff91\057\uff91" +
    "\104\uff91\105\uff91\001\002\000\012\026\240\057\244\104" +
    "\243\105\242\001\002\000\012\026\uff92\057\uff92\104\uff92" +
    "\105\uff92\001\002\000\022\012\uff94\016\uff94\020\uff94\026" +
    "\uff94\057\uff94\103\uff94\104\uff94\105\uff94\001\002\000\010" +
    "\012\uff90\016\uff90\103\uff90\001\002\000\022\012\uff95\016" +
    "\uff95\020\uff95\026\uff95\057\uff95\103\uff95\104\uff95\105\uff95" +
    "\001\002\000\022\012\uff96\016\uff96\020\uff96\026\uff96\057" +
    "\uff96\103\uff96\104\uff96\105\uff96\001\002\000\022\012\uff97" +
    "\016\uff97\020\uff97\026\uff97\057\uff97\103\uff97\104\uff97\105" +
    "\uff97\001\002\000\024\004\uffcb\025\uffcb\027\uffcb\030\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\041\uffcb\103\uffcb\001\002\000" +
    "\030\004\uffca\025\uffca\027\uffca\030\uffca\035\uffca\036\uffca" +
    "\037\uffca\041\uffca\051\121\052\120\103\uffca\001\002\000" +
    "\072\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\056\ufff3\057\ufff3\062\ufff3\064\ufff3" +
    "\070\ufff3\071\ufff3\076\ufff3\077\ufff3\101\ufff3\103\ufff3\104" +
    "\ufff3\105\ufff3\110\ufff3\001\002\000\010\012\uff98\016\uff98" +
    "\103\uff98\001\002\000\004\103\252\001\002\000\062\005" +
    "\026\006\007\007\055\010\052\011\004\012\011\016\013" +
    "\021\054\022\057\023\022\024\043\056\017\057\020\062" +
    "\030\064\053\070\033\071\041\076\035\077\005\101\023" +
    "\103\037\104\031\105\010\110\050\001\002\000\064\005" +
    "\026\006\007\007\055\010\052\011\004\012\011\015\254" +
    "\016\013\021\054\022\057\023\022\024\043\056\017\057" +
    "\020\062\030\064\053\070\033\071\041\076\035\077\005" +
    "\101\023\103\037\104\031\105\010\110\050\001\002\000" +
    "\010\012\uff99\016\uff99\103\uff99\001\002\000\012\013\uff9d" +
    "\054\uff9d\055\uff9d\103\uff9d\001\002\000\016\051\uffde\052" +
    "\uffde\064\uffde\065\uffde\066\uffde\067\uffde\001\002\000\004" +
    "\002\001\001\002\000\010\012\uffec\016\uffec\103\uffec\001" +
    "\002\000\010\012\uffed\016\uffed\103\uffed\001\002\000\072" +
    "\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\056\ufff7\057\ufff7\062\ufff7\064\ufff7\070" +
    "\ufff7\071\ufff7\076\ufff7\077\ufff7\101\ufff7\103\ufff7\104\ufff7" +
    "\105\ufff7\110\ufff7\001\002\000\012\026\240\057\244\104" +
    "\243\105\242\001\002\000\012\026\240\057\244\104\243" +
    "\105\242\001\002\000\004\020\266\001\002\000\004\103" +
    "\267\001\002\000\062\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\016\uff93\021\uff93\022\uff93\023\uff93\024" +
    "\uff93\056\uff93\057\uff93\062\uff93\064\uff93\070\uff93\071\uff93" +
    "\076\uff93\077\uff93\101\uff93\103\uff93\104\uff93\105\uff93\110" +
    "\uff93\001\002\000\010\013\271\054\175\055\176\001\002" +
    "\000\004\103\272\001\002\000\062\005\026\006\007\007" +
    "\055\010\052\011\004\012\011\016\013\021\054\022\057" +
    "\023\022\024\043\056\017\057\020\062\030\064\053\070" +
    "\033\071\041\076\035\077\005\101\023\103\037\104\031" +
    "\105\010\110\050\001\002\000\066\005\026\006\007\007" +
    "\055\010\052\011\004\012\011\014\uff9a\015\uff9a\016\013" +
    "\021\054\022\057\023\022\024\043\056\017\057\020\062" +
    "\030\064\053\070\033\071\041\076\035\077\005\101\023" +
    "\103\037\104\031\105\010\110\050\001\002\000\030\025" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\073\uffcc\074\uffcc\001\002\000\030\025" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\073\uffcd\074\uffcd\001\002\000\004\103" +
    "\277\001\002\000\004\103\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\054\003\014\004\057\005\031\006\013\007" +
    "\033\010\015\013\020\017\035\027\041\030\024\032\044" +
    "\033\026\034\037\037\043\040\023\042\046\043\045\046" +
    "\055\047\011\050\050\051\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\027\041\030\024\032\044\042\267" +
    "\043\045\001\001\000\002\001\001\000\004\031\262\001" +
    "\001\000\012\013\020\033\026\047\260\050\257\001\001" +
    "\000\002\001\001\000\050\004\233\005\031\006\013\007" +
    "\033\013\020\017\035\027\041\030\024\032\044\033\026" +
    "\034\037\037\043\040\023\042\046\043\045\046\055\047" +
    "\011\050\050\051\005\001\001\000\012\027\041\030\255" +
    "\032\044\043\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\202\001\001\000\020\014\112\021\245\022" +
    "\116\023\107\024\114\025\110\052\244\001\001\000\052" +
    "\004\057\005\031\006\013\007\033\010\230\013\020\017" +
    "\035\027\041\030\024\032\044\033\026\034\037\037\043" +
    "\040\023\042\046\043\045\046\055\047\011\050\050\051" +
    "\005\001\001\000\010\027\041\030\226\032\044\001\001" +
    "\000\002\001\001\000\004\007\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\112" +
    "\021\214\022\116\023\107\024\114\025\110\052\211\001" +
    "\001\000\002\001\001\000\020\014\112\021\210\022\116" +
    "\023\107\024\114\025\110\052\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\041\030\205\032\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\041\030\173\032" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\112\021\115\022\116\023\107\024\114\025\110\052" +
    "\105\001\001\000\004\007\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\041\030" +
    "\064\032\044\001\001\000\010\027\041\030\102\032\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\041\030\101\032\044\001\001\000\010\027\041\030\100" +
    "\032\044\001\001\000\010\027\041\030\077\032\044\001" +
    "\001\000\010\027\041\030\076\032\044\001\001\000\010" +
    "\027\041\030\075\032\044\001\001\000\010\027\041\030" +
    "\074\032\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\112\022\116\023\107\024\114\025\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\142\001\001\000\004\044" +
    "\141\001\001\000\004\044\140\001\001\000\004\044\137" +
    "\001\001\000\004\044\136\001\001\000\004\044\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\156\001\001\000\004\027\155" +
    "\001\001\000\004\027\154\001\001\000\004\027\153\001" +
    "\001\000\004\027\152\001\001\000\004\027\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\172\001\001\000\004\027\171\001\001\000\004\027" +
    "\170\001\001\000\004\027\167\001\001\000\004\027\166" +
    "\001\001\000\004\027\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\041\030\201\032\044" +
    "\043\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\202\001\001\000\010\027\041\030\203\032\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\216\034\215\051\005\001\001\000\004\041\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\233\005\031" +
    "\006\013\007\033\013\020\017\035\027\041\030\024\032" +
    "\044\033\026\034\037\037\043\040\023\042\046\043\045" +
    "\045\231\046\055\047\011\050\050\051\005\001\001\000" +
    "\002\001\001\000\004\036\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\004\057\005\031\006\013\007" +
    "\033\010\252\013\020\017\035\027\041\030\024\032\044" +
    "\033\026\034\037\037\043\040\023\042\046\043\045\046" +
    "\055\047\011\050\050\051\005\001\001\000\050\004\233" +
    "\005\031\006\013\007\033\013\020\017\035\027\041\030" +
    "\024\032\044\033\026\034\037\037\043\040\023\042\046" +
    "\043\045\046\055\047\011\050\050\051\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\263\001\001\000\004\031\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\176\001\001\000\002\001\001\000\052" +
    "\004\057\005\031\006\013\007\033\010\272\013\020\017" +
    "\035\027\041\030\024\032\044\033\026\034\037\037\043" +
    "\040\023\042\046\043\045\046\055\047\011\050\050\051" +
    "\005\001\001\000\050\004\233\005\031\006\013\007\033" +
    "\013\020\017\035\027\041\030\024\032\044\033\026\034" +
    "\037\037\043\040\023\042\046\043\045\046\055\047\011" +
    "\050\050\051\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {




 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }






}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_stmt ::= for_head i_stmt for_tail 
            { parser.Tree.reduce(3,"for_stmt",0);
              Object[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[] y = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println("for cycle");
			/*
			RESULT= new Object[5];
			RESULT[0] = (myVar)x[0];
			RESULT[1] = (myVar)x[1];
			RESULT[2] = (myVar)x[2];			
			RESULT[3] = parser.vm.extractVar(y[1].toString());  
			RESULT[4] = (String)y[0];					*/
		
              CUP$parser$result = new java_cup.runtime.Symbol(37/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_tail ::= Com_For_e i_Op_ps for_arg 
            { parser.Tree.reduce(3,"for_tail",0);
              String[] RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	
			//verifichiamo che sia l'ultimo dei comandi in un albero e cominciamo a chiuderli tornando indietro nella lista
			if(!parser.list_script.listIterator().hasNext())
			{
				parser.ifcc = (for_command)parser.list_script.getLast();
				//chiude e verifica l'ultimo FOREACH
				if(!parser.ifcc.close_command(parser.vm.Auto_Neg(y,s)))
					throw new ParserException(ParserErrorType.STATEMENT_ERROR, 
							"sstaMMMinkia",
							 "Chiusura Statement non valida ", null);
				Utility.mf("ULTIMO CICLO FOR CHIUSO");
			}else{
				int k = 2;
				int j = 0;
				while(parser.list_script.listIterator().hasPrevious())
				{
					j = parser.list_script.size();
					parser.ifcc = (for_command)parser.list_script.get(j-k);
					k--;
					if(parser.ifcc.equals(for_command.class))//si suppone che risalendo nessun comando sia giÃ  chiuso
					{
						if(!parser.ifcc.close_command(parser.vm.Auto_Neg(y,s)))
							throw new ParserException(ParserErrorType.STATEMENT_ERROR, 
								"sstaMMMinkia",
								 "Chiusura Statement non valida ", null);
						Utility.mf("CICLO FOR CHIUSO posizione lista: "+(j-k));
					}
				}
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(35/*for_tail*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // i_Op_ps ::= Minus 
            { parser.Tree.reduce(1,"i_Op_ps",0);
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(28/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // i_Op_ps ::= Plus 
            { parser.Tree.reduce(1,"i_Op_ps",0);
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(28/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // for_head ::= Com_For for_arg for_arg for_arg Com_For_m EL 
            { parser.Tree.reduce(6,"for_head",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				System.out.println("for_head variabili \n"+x.toString()+"\n"+y.toString()+"\n"+z.toString());
				parser.list_script.add(new for_command(x,y,z));
		// passiamo un vettore contenente le tre variabili sulle quali controllare il ciclo for
			RESULT= new myVar[3];
			RESULT[0]= x;
			RESULT[1]= y;
			RESULT[2]= z;							
              CUP$parser$result = new java_cup.runtime.Symbol(25/*for_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_arg ::= ID 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for_arg ::= Vint 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(23/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_arg ::= Int 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(23/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_arg ::= Var 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(x); 				
              CUP$parser$result = new java_cup.runtime.Symbol(23/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_stmt ::= if_head Com_If_e 
            { parser.Tree.reduce(2,"if_stmt",0);
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_stmt ::= if_head Com_If_m EL i_stmt Com_If_e 
            { parser.Tree.reduce(5,"if_stmt",0);
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_head ::= Com_If conf_exp Com_If_2 EL i_stmt 
            { parser.Tree.reduce(5,"if_head",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*if_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conf_exp ::= conf_exp cond_if arit_stmt 
            { parser.Tree.reduce(3,"conf_exp",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // conf_exp ::= conf_exp cond_if conf 
            { parser.Tree.reduce(3,"conf_exp",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // conf_exp ::= C_Not conf 
            { parser.Tree.reduce(2,"conf_exp",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // conf_exp ::= conf 
            { parser.Tree.reduce(1,"conf_exp",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // conf ::= arit_stmt cond arit_stmt 
            { parser.Tree.reduce(3,"conf",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*conf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cond_if ::= C_Andd 
            { parser.Tree.reduce(1,"cond_if",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cond_if ::= C_Orr 
            { parser.Tree.reduce(1,"cond_if",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // i_arg ::= Bool 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // i_arg ::= FUnit 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // i_arg ::= IUnit 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // i_arg ::= Str 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // i_arg ::= Vint 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // i_arg ::= Int 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // date_arg ::= Data 
            { parser.Tree.reduce(1,"date_arg",0);
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x;	
              CUP$parser$result = new java_cup.runtime.Symbol(34/*date_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bool_op ::= C_Or 
            { parser.Tree.reduce(1,"bool_op",0);
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(31/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bool_op ::= C_And 
            { parser.Tree.reduce(1,"bool_op",0);
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(31/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cc_date_cond ::= _where Date_Criteria C_Ug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cc_date_cond ::= _where Date_Criteria Diver date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cc_date_cond ::= _where Date_Criteria Maggug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cc_date_cond ::= _where Date_Criteria Minug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cc_date_cond ::= _where Date_Criteria Magg date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cc_date_cond ::= _where Date_Criteria Min date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
							
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cc_permission_cond ::= _where Permission_Criteria C_Ug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 

								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cc_permission_cond ::= _where Permission_Criteria Diver i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 

              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cc_permission_cond ::= _where Permission_Criteria Maggug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 

								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cc_permission_cond ::= _where Permission_Criteria Minug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cc_permission_cond ::= _where Permission_Criteria Magg i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cc_permission_cond ::= _where Permission_Criteria Min i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cc_dimension_cond ::= _where Dimension_Criteria C_Ug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
								
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cc_dimension_cond ::= _where Dimension_Criteria Diver i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 

								
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cc_dimension_cond ::= _where Dimension_Criteria Maggug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cc_dimension_cond ::= _where Dimension_Criteria Minug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cc_dimension_cond ::= _where Dimension_Criteria Magg i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cc_dimension_cond ::= _where Dimension_Criteria Min i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cc_conds ::= cc_dimension_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

					
              CUP$parser$result = new java_cup.runtime.Symbol(19/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cc_conds ::= cc_date_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

					
              CUP$parser$result = new java_cup.runtime.Symbol(19/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cc_conds ::= cc_permission_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

//					parser.cp[5] = null;
					
              CUP$parser$result = new java_cup.runtime.Symbol(19/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // i_cc_conds ::= i_cc_conds bool_op cc_conds 
            { parser.Tree.reduce(3,"i_cc_conds",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // i_cc_conds ::= cc_conds 
            { parser.Tree.reduce(1,"i_cc_conds",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _where ::= Where 
            { parser.Tree.reduce(1,"_where",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // _where ::= 
            { parser.Tree.reduce(0,"_where",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comm_find_stmt_2 ::= comm_find_stmt_2 Name 
            { parser.Tree.reduce(2,"comm_find_stmt_2",0);
              Object RESULT = null;
		
					
              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comm_find_stmt_2 ::= comm_find_stmt_2 Name param 
            { parser.Tree.reduce(3,"comm_find_stmt_2",0);
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					
              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comm_find_stmt_2 ::= commands 
            { parser.Tree.reduce(1,"comm_find_stmt_2",0);
              Object RESULT = null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					
              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comm_find_stmt ::= comm_find_stmt Com_Ex comm_find_stmt_2 Pv 
            { parser.Tree.reduce(4,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comm_find_stmt ::= comm_find_stmt i_cc_conds 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comm_find_stmt ::= comm_find_stmt param 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter x = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					
              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comm_find_stmt ::= Com_Find i_cc_conds 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comm_find_stmt ::= Com_Find param 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter x = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
/*
					parser.counter_file = 0; //posso usare una arraylist e poi convertire in array
					parser.counter_path = 0;*/


					
              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LS_stmt ::= LS_stmt Obj 
            { parser.Tree.reduce(2,"LS_stmt",0);
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					
              CUP$parser$result = new java_cup.runtime.Symbol(39/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LS_stmt ::= LS_stmt Order 
            { parser.Tree.reduce(2,"LS_stmt",0);
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					
              CUP$parser$result = new java_cup.runtime.Symbol(39/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LS_stmt ::= Com_Ls 
            { parser.Tree.reduce(1,"LS_stmt",0);
              Object[] RESULT = null;
		 
					
              CUP$parser$result = new java_cup.runtime.Symbol(39/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // commands ::= LS_stmt 
            { parser.Tree.reduce(1,"commands",0);
              String RESULT = null;
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // commands ::= Com_Cp 
            { parser.Tree.reduce(1,"commands",0);
              String RESULT = null;
		 
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // commands ::= Com_Rm 
            { parser.Tree.reduce(1,"commands",0);
              String RESULT = null;
		 
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // commands ::= Com_Mov 
            { parser.Tree.reduce(1,"commands",0);
              String RESULT = null;
		 
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // commands ::= Com_MKDir 
            { parser.Tree.reduce(1,"commands",0);
              String RESULT = null;
		 
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // commands ::= Com_Cd 
            { parser.Tree.reduce(1,"commands",0);
              String RESULT = null;
		 

					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sh_stmt ::= sh_stmt i_cc_conds 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sh_stmt ::= sh_stmt param 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object[] RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sh_stmt ::= commands i_cc_conds 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sh_stmt ::= commands param 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object[] RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= Ext 
            { parser.Tree.reduce(1,"param",0);
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= File 
            { parser.Tree.reduce(1,"param",0);
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= Path 
            { parser.Tree.reduce(1,"param",0);
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arit_arg ::= i_arg 
            { parser.Tree.reduce(1,"arit_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arit_arg ::= Var 
            { parser.Tree.reduce(1,"arit_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arit_stmt ::= C_Not arit_stmt 
            { parser.Tree.reduce(2,"arit_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arit_stmt ::= RO arit_stmt RC 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arit_stmt ::= arit_arg 
            { parser.Tree.reduce(1,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arit_stmt ::= Minus arit_stmt 
            { parser.Tree.reduce(2,"arit_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arit_stmt ::= arit_stmt C_Or arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_stmt ::= arit_stmt C_And arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_stmt ::= arit_stmt Minus arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_stmt ::= arit_stmt Plus arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arit_stmt ::= arit_stmt Div arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arit_stmt ::= arit_stmt Times arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_stmt ::= init_stmt assig_stmt 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_stmt ::= Com_Str assig_stmt 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assig_stmt ::= Var 
            { parser.Tree.reduce(1,"assig_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assig_stmt ::= Var C_Ug arit_stmt 
            { parser.Tree.reduce(3,"assig_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_stmt ::= str_stmt if_stmt 
            { parser.Tree.reduce(2,"str_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_stmt ::= str_stmt for_stmt 
            { parser.Tree.reduce(2,"str_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_stmt ::= for_stmt 
            { parser.Tree.reduce(1,"str_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // str_stmt ::= if_stmt 
            { parser.Tree.reduce(1,"str_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= EL 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= conf_exp EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= Com_P arit_stmt EL 
            { parser.Tree.reduce(3,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= throw_s EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= start_s EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= comm_find_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		
					

					
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= sh_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] x = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

					/*parser.cp[0] = parser.array_file.get(0);
					parser.cp[1] = parser.array_path.get(0);
					parser.cp[2] = parser.array_perm.get(0);
					parser.cp[3] = parser.array_data.get(0);
					parser.cp[4] = parser.array_dim.get(0);*/
					
					
					
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= str_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= assig_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= init_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		  	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_stmt ::= i_stmt stmt 
            { parser.Tree.reduce(2,"i_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // i_stmt ::= stmt 
            { parser.Tree.reduce(1,"i_stmt",0);
              Object RESULT = null;
		//RE-Init

					
              CUP$parser$result = new java_cup.runtime.Symbol(6/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // throw_s ::= Throw_S File 
            { parser.Tree.reduce(2,"throw_s",0);
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*throw_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_s ::= Start_S FileScript EL 
            { parser.Tree.reduce(3,"start_s",0);
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

					
              CUP$parser$result = new java_cup.runtime.Symbol(29/*start_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= start_s i_stmt End_S 
            { parser.Tree.reduce(3,"script",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= i_stmt 
            { parser.Tree.reduce(1,"S",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= 
            { parser.Tree.reduce(0,"S",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

