
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Sep 16 23:23:52 CEST 2011
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Fri Sep 16 23:23:52 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\017\005\000\002\033\005\000\002\034\004" +
    "\000\002\035\004\000\002\051\003\000\002\051\004\000" +
    "\002\053\004\000\002\053\004\000\002\053\004\000\002" +
    "\053\004\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\005\000\002\053\004\000\002\053\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\004\000" +
    "\002\054\004\000\002\021\005\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\022" +
    "\004\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\022\005\000\002\022\004\000\002" +
    "\024\003\000\002\024\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\042\004\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\043\003\000\002\043" +
    "\004\000\002\043\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\006\000" +
    "\002\011\003\000\002\011\005\000\002\011\004\000\002" +
    "\006\002\000\002\006\003\000\002\012\003\000\002\012" +
    "\005\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\015\006\000\002\015\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\036\003\000\002" +
    "\036\003\000\002\040\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\041\003\000\002\041\003\000" +
    "\002\025\003\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\050\007\000\002\047\007\000" +
    "\002\047\004\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\046\010\000\002\032" +
    "\003\000\002\032\003\000\002\027\005\000\002\045\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\064\002\000\005\030\006\007\007\056\010" +
    "\051\011\004\012\010\016\013\021\055\022\060\023\024" +
    "\024\045\056\021\061\032\063\054\067\035\070\043\075" +
    "\037\076\005\100\025\102\041\103\033\104\011\107\053" +
    "\110\022\001\002\000\024\025\uffd2\027\uffd2\030\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\041\uffd2\072\uffd2\073\uffd2\001\002" +
    "\000\004\027\316\001\002\000\030\025\uffcd\027\uffcd\030" +
    "\uffcd\031\315\035\uffcd\036\uffcd\037\uffcd\040\314\041\uffcd" +
    "\072\uffcd\073\uffcd\001\002\000\024\025\uffcf\027\uffcf\030" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\041\uffcf\072\uffcf\073\uffcf" +
    "\001\002\000\026\056\021\061\032\063\054\067\035\070" +
    "\043\100\025\103\033\104\011\107\053\110\067\001\002" +
    "\000\066\004\uffa4\013\uffa4\025\uffa4\027\uffa4\030\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\041\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\102\uffa4" +
    "\110\uffa4\001\002\000\010\012\uffed\016\uffed\102\uffed\001" +
    "\002\000\012\026\260\103\263\104\262\110\264\001\002" +
    "\000\010\012\010\016\013\102\302\001\002\000\004\002" +
    "\277\001\002\000\004\102\276\001\002\000\012\013\uff9d" +
    "\054\uff9d\055\uff9d\102\uff9d\001\002\000\064\002\uffff\005" +
    "\030\006\007\007\056\010\051\011\004\012\010\016\013" +
    "\021\055\022\060\023\024\024\045\056\021\061\032\063" +
    "\054\067\035\070\043\075\037\076\005\100\025\102\041" +
    "\103\033\104\011\107\053\110\022\001\002\000\026\056" +
    "\065\061\032\063\054\067\035\070\043\100\025\103\033" +
    "\104\011\107\053\110\067\001\002\000\034\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\064\051\uffdb\052\uffdb" +
    "\053\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000" +
    "\006\014\271\015\270\001\002\000\024\025\uffd0\027\uffd0" +
    "\030\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0\072\uffd0\073" +
    "\uffd0\001\002\000\066\004\uffa3\013\uffa3\025\uffa3\027\uffa3" +
    "\030\uffa3\035\uffa3\036\uffa3\037\uffa3\041\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\102\uffa3\110\uffa3\001\002\000\004\102\267\001\002" +
    "\000\032\043\206\044\212\045\211\046\210\047\205\051" +
    "\075\052\070\053\207\063\071\064\074\065\072\066\073" +
    "\001\002\000\020\025\105\027\114\030\110\035\uffc1\036" +
    "\uffc1\037\uffc1\041\106\001\002\000\062\005\030\006\007" +
    "\007\056\010\051\011\004\012\010\016\013\021\055\022" +
    "\060\023\024\024\045\056\021\061\032\063\054\067\035" +
    "\070\043\075\037\076\005\100\025\102\041\103\033\104" +
    "\011\107\053\110\022\001\002\000\026\056\065\061\032" +
    "\063\054\067\035\070\043\100\025\103\033\104\011\107" +
    "\053\110\067\001\002\000\066\004\uffa5\013\uffa5\025\uffa5" +
    "\027\uffa5\030\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\062\uffa5\063\uffa5\064\uffa5\065" +
    "\uffa5\066\uffa5\102\uffa5\110\uffa5\001\002\000\006\102\246" +
    "\110\247\001\002\000\066\004\uffa1\013\uffa1\025\uffa1\027" +
    "\uffa1\030\uffa1\035\uffa1\036\uffa1\037\uffa1\041\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\102\uffa1\110\uffa1\001\002\000\004\102\244\001" +
    "\002\000\004\027\243\001\002\000\024\004\234\025\105" +
    "\027\114\030\110\035\uffc1\036\uffc1\037\uffc1\041\106\102" +
    "\233\001\002\000\074\002\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\056\uffef\061\uffef" +
    "\063\uffef\067\uffef\070\uffef\075\uffef\076\uffef\077\uffef\100" +
    "\uffef\102\uffef\103\uffef\104\uffef\107\uffef\110\uffef\001\002" +
    "\000\020\025\105\027\114\030\110\035\uffc1\036\uffc1\037" +
    "\uffc1\041\106\001\002\000\066\004\uffa2\013\uffa2\025\uffa2" +
    "\027\uffa2\030\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\102\uffa2\110\uffa2\001\002\000\046\013\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\102\uffda\110\uffda\001\002\000\026\056" +
    "\065\061\032\063\054\067\035\070\043\100\025\103\033" +
    "\104\011\107\053\110\067\001\002\000\062\005\030\006" +
    "\007\007\056\010\051\011\004\012\010\016\013\021\055" +
    "\022\060\023\024\024\045\056\021\061\032\063\054\067" +
    "\035\070\043\075\037\076\005\100\025\102\041\103\033" +
    "\104\011\107\053\110\022\001\002\000\046\013\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\102\uffde\110\uffde\001\002\000\010\054\176" +
    "\055\177\102\201\001\002\000\024\025\uffce\027\uffce\030" +
    "\uffce\035\uffce\036\uffce\037\uffce\041\uffce\072\uffce\073\uffce" +
    "\001\002\000\010\012\uffee\016\uffee\102\uffee\001\002\000" +
    "\066\004\uffa0\013\uffa0\025\uffa0\027\uffa0\030\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\041\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\102\uffa0\110" +
    "\uffa0\001\002\000\026\056\065\061\032\063\054\067\035" +
    "\070\043\100\025\103\033\104\011\107\053\110\067\001" +
    "\002\000\030\025\uffcc\027\uffcc\030\uffcc\031\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\072\uffcc\073\uffcc\001" +
    "\002\000\024\025\uffd1\027\uffd1\030\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\041\uffd1\072\uffd1\073\uffd1\001\002\000\022\025" +
    "\105\027\114\030\110\035\uffc1\036\uffc1\037\uffc1\041\106" +
    "\102\115\001\002\000\004\110\063\001\002\000\074\002" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\056\ufffa\061\ufffa\063\ufffa\067\ufffa\070\ufffa" +
    "\075\ufffa\076\ufffa\077\ufffa\100\ufffa\102\ufffa\103\ufffa\104" +
    "\ufffa\107\ufffa\110\ufffa\001\002\000\006\102\uffe9\110\uffe9" +
    "\001\002\000\010\050\064\102\uffe8\110\uffe8\001\002\000" +
    "\026\056\065\061\032\063\054\067\035\070\043\100\025" +
    "\103\033\104\011\107\053\110\067\001\002\000\026\056" +
    "\065\061\032\063\054\067\035\070\043\100\025\103\033" +
    "\104\011\107\053\110\067\001\002\000\022\051\075\052" +
    "\070\063\071\064\074\065\072\066\073\102\uffea\110\uffea" +
    "\001\002\000\046\013\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\102\uffdb\110" +
    "\uffdb\001\002\000\026\056\065\061\032\063\054\067\035" +
    "\070\043\100\025\103\033\104\011\107\053\110\067\001" +
    "\002\000\026\056\065\061\032\063\054\067\035\070\043" +
    "\100\025\103\033\104\011\107\053\110\067\001\002\000" +
    "\026\056\065\061\032\063\054\067\035\070\043\100\025" +
    "\103\033\104\011\107\053\110\067\001\002\000\026\056" +
    "\065\061\032\063\054\067\035\070\043\100\025\103\033" +
    "\104\011\107\053\110\067\001\002\000\026\056\065\061" +
    "\032\063\054\067\035\070\043\100\025\103\033\104\011" +
    "\107\053\110\067\001\002\000\026\056\065\061\032\063" +
    "\054\067\035\070\043\100\025\103\033\104\011\107\053" +
    "\110\067\001\002\000\046\013\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\102" +
    "\uffe0\110\uffe0\001\002\000\046\013\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\051\075\052\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\062\uffe2\063\uffe2\064\uffe2\065\072\066\073" +
    "\102\uffe2\110\uffe2\001\002\000\046\013\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\102\uffe3\110\uffe3\001\002\000\046\013\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\102\uffe4\110\uffe4\001\002\000\046\013\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\075\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\072\066\073\102\uffe1\110\uffe1\001\002\000\046\013\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\075\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\072\066\073\102\uffdf\110\uffdf\001\002\000\046\013" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\102\uffdc\110\uffdc\001\002\000\030" +
    "\004\uffd7\025\uffd7\027\uffd7\030\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\041\uffd7\072\uffd7\073\uffd7\102\uffd7\001\002\000\010" +
    "\035\uffc0\036\uffc0\037\uffc0\001\002\000\022\025\uffd4\027" +
    "\uffd4\030\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\102\uffd4" +
    "\001\002\000\030\004\uffd9\025\uffd9\027\uffd9\030\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\041\uffd9\072\uffd9\073\uffd9\102\uffd9" +
    "\001\002\000\030\004\uffbd\025\uffbd\027\uffbd\030\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\041\uffbd\051\uffbd\052\uffbd\102\uffbd" +
    "\001\002\000\030\004\uffbf\025\uffbf\027\uffbf\030\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\041\uffbf\051\uffbf\052\uffbf\102\uffbf" +
    "\001\002\000\010\035\127\036\125\037\126\001\002\000" +
    "\030\004\uffd8\025\uffd8\027\uffd8\030\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\041\uffd8\072\uffd8\073\uffd8\102\uffd8\001\002\000" +
    "\074\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\056\ufff5\061\ufff5\063\ufff5\067\ufff5" +
    "\070\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\102\ufff5\103" +
    "\ufff5\104\ufff5\107\ufff5\110\ufff5\001\002\000\030\004\uffbb" +
    "\025\uffbb\027\uffbb\030\uffbb\035\uffbb\036\uffbb\037\uffbb\041" +
    "\uffbb\051\uffbb\052\uffbb\102\uffbb\001\002\000\030\004\uffbc" +
    "\025\uffbc\027\uffbc\030\uffbc\035\uffbc\036\uffbc\037\uffbc\041" +
    "\uffbc\051\uffbc\052\uffbc\102\uffbc\001\002\000\026\025\uffd3" +
    "\027\uffd3\030\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\051" +
    "\122\052\121\102\uffd3\001\002\000\012\035\uffa7\036\uffa7" +
    "\037\uffa7\041\uffa7\001\002\000\012\035\uffa8\036\uffa8\037" +
    "\uffa8\041\uffa8\001\002\000\012\035\uffc1\036\uffc1\037\uffc1" +
    "\041\106\001\002\000\030\004\uffbe\025\uffbe\027\uffbe\030" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe\051\uffbe\052\uffbe" +
    "\102\uffbe\001\002\000\016\043\161\044\162\045\164\046" +
    "\165\047\166\050\163\001\002\000\016\043\145\044\146" +
    "\045\147\046\151\047\152\050\150\001\002\000\016\043" +
    "\130\044\131\045\132\046\134\047\135\050\133\001\002" +
    "\000\004\032\137\001\002\000\004\032\137\001\002\000" +
    "\004\032\137\001\002\000\004\032\137\001\002\000\004" +
    "\032\137\001\002\000\004\032\137\001\002\000\030\004" +
    "\uffaa\025\uffaa\027\uffaa\030\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\041\uffaa\051\uffaa\052\uffaa\102\uffaa\001\002\000\030\004" +
    "\uffa6\025\uffa6\027\uffa6\030\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\041\uffa6\051\uffa6\052\uffa6\102\uffa6\001\002\000\030\004" +
    "\uffab\025\uffab\027\uffab\030\uffab\035\uffab\036\uffab\037\uffab" +
    "\041\uffab\051\uffab\052\uffab\102\uffab\001\002\000\030\004" +
    "\uffa9\025\uffa9\027\uffa9\030\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\041\uffa9\051\uffa9\052\uffa9\102\uffa9\001\002\000\030\004" +
    "\uffac\025\uffac\027\uffac\030\uffac\035\uffac\036\uffac\037\uffac" +
    "\041\uffac\051\uffac\052\uffac\102\uffac\001\002\000\030\004" +
    "\uffad\025\uffad\027\uffad\030\uffad\035\uffad\036\uffad\037\uffad" +
    "\041\uffad\051\uffad\052\uffad\102\uffad\001\002\000\030\004" +
    "\uffae\025\uffae\027\uffae\030\uffae\035\uffae\036\uffae\037\uffae" +
    "\041\uffae\051\uffae\052\uffae\102\uffae\001\002\000\016\067" +
    "\035\070\043\100\025\103\033\104\011\107\053\001\002" +
    "\000\016\067\035\070\043\100\025\103\033\104\011\107" +
    "\053\001\002\000\016\067\035\070\043\100\025\103\033" +
    "\104\011\107\053\001\002\000\016\067\035\070\043\100" +
    "\025\103\033\104\011\107\053\001\002\000\016\067\035" +
    "\070\043\100\025\103\033\104\011\107\053\001\002\000" +
    "\016\067\035\070\043\100\025\103\033\104\011\107\053" +
    "\001\002\000\030\004\uffb6\025\uffb6\027\uffb6\030\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\041\uffb6\051\uffb6\052\uffb6\102\uffb6" +
    "\001\002\000\030\004\uffb7\025\uffb7\027\uffb7\030\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\041\uffb7\051\uffb7\052\uffb7\102\uffb7" +
    "\001\002\000\030\004\uffb5\025\uffb5\027\uffb5\030\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\041\uffb5\051\uffb5\052\uffb5\102\uffb5" +
    "\001\002\000\030\004\uffb8\025\uffb8\027\uffb8\030\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\041\uffb8\051\uffb8\052\uffb8\102\uffb8" +
    "\001\002\000\030\004\uffb9\025\uffb9\027\uffb9\030\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\041\uffb9\051\uffb9\052\uffb9\102\uffb9" +
    "\001\002\000\030\004\uffba\025\uffba\027\uffba\030\uffba\035" +
    "\uffba\036\uffba\037\uffba\041\uffba\051\uffba\052\uffba\102\uffba" +
    "\001\002\000\016\067\035\070\043\100\025\103\033\104" +
    "\011\107\053\001\002\000\016\067\035\070\043\100\025" +
    "\103\033\104\011\107\053\001\002\000\016\067\035\070" +
    "\043\100\025\103\033\104\011\107\053\001\002\000\016" +
    "\067\035\070\043\100\025\103\033\104\011\107\053\001" +
    "\002\000\016\067\035\070\043\100\025\103\033\104\011" +
    "\107\053\001\002\000\016\067\035\070\043\100\025\103" +
    "\033\104\011\107\053\001\002\000\030\004\uffb0\025\uffb0" +
    "\027\uffb0\030\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0\051" +
    "\uffb0\052\uffb0\102\uffb0\001\002\000\030\004\uffb1\025\uffb1" +
    "\027\uffb1\030\uffb1\035\uffb1\036\uffb1\037\uffb1\041\uffb1\051" +
    "\uffb1\052\uffb1\102\uffb1\001\002\000\030\004\uffb2\025\uffb2" +
    "\027\uffb2\030\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2\051" +
    "\uffb2\052\uffb2\102\uffb2\001\002\000\030\004\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf\051" +
    "\uffaf\052\uffaf\102\uffaf\001\002\000\030\004\uffb3\025\uffb3" +
    "\027\uffb3\030\uffb3\035\uffb3\036\uffb3\037\uffb3\041\uffb3\051" +
    "\uffb3\052\uffb3\102\uffb3\001\002\000\030\004\uffb4\025\uffb4" +
    "\027\uffb4\030\uffb4\035\uffb4\036\uffb4\037\uffb4\041\uffb4\051" +
    "\uffb4\052\uffb4\102\uffb4\001\002\000\046\013\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\102\uffe5\110\uffe5\001\002\000\026\056\uff9e\061" +
    "\uff9e\063\uff9e\067\uff9e\070\uff9e\100\uff9e\103\uff9e\104\uff9e" +
    "\107\uff9e\110\uff9e\001\002\000\026\056\uff9f\061\uff9f\063" +
    "\uff9f\067\uff9f\070\uff9f\100\uff9f\103\uff9f\104\uff9f\107\uff9f" +
    "\110\uff9f\001\002\000\026\056\065\061\032\063\054\067" +
    "\035\070\043\100\025\103\033\104\011\107\053\110\067" +
    "\001\002\000\074\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\056\ufff0\061\ufff0\063" +
    "\ufff0\067\ufff0\070\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0" +
    "\102\ufff0\103\ufff0\104\ufff0\107\ufff0\110\ufff0\001\002\000" +
    "\012\013\uff99\054\uff99\055\uff99\102\uff99\001\002\000\012" +
    "\013\uff9b\054\uff9b\055\uff9b\102\uff9b\001\002\000\042\013" +
    "\uff9a\043\206\044\212\045\211\046\210\047\205\051\075" +
    "\052\070\053\207\054\uff9a\055\uff9a\063\071\064\074\065" +
    "\072\066\073\102\uff9a\001\002\000\026\056\065\061\032" +
    "\063\054\067\035\070\043\100\025\103\033\104\011\107" +
    "\053\110\067\001\002\000\026\056\065\061\032\063\054" +
    "\067\035\070\043\100\025\103\033\104\011\107\053\110" +
    "\067\001\002\000\026\056\065\061\032\063\054\067\035" +
    "\070\043\100\025\103\033\104\011\107\053\110\067\001" +
    "\002\000\026\056\065\061\032\063\054\067\035\070\043" +
    "\100\025\103\033\104\011\107\053\110\067\001\002\000" +
    "\026\056\065\061\032\063\054\067\035\070\043\100\025" +
    "\103\033\104\011\107\053\110\067\001\002\000\026\056" +
    "\065\061\032\063\054\067\035\070\043\100\025\103\033" +
    "\104\011\107\053\110\067\001\002\000\026\013\uff98\051" +
    "\075\052\070\054\uff98\055\uff98\063\071\064\074\065\072" +
    "\066\073\102\uff98\001\002\000\026\013\uff95\051\075\052" +
    "\070\054\uff95\055\uff95\063\071\064\074\065\072\066\073" +
    "\102\uff95\001\002\000\026\013\uff97\051\075\052\070\054" +
    "\uff97\055\uff97\063\071\064\074\065\072\066\073\102\uff97" +
    "\001\002\000\026\013\uff94\051\075\052\070\054\uff94\055" +
    "\uff94\063\071\064\074\065\072\066\073\102\uff94\001\002" +
    "\000\026\013\uff96\051\075\052\070\054\uff96\055\uff96\063" +
    "\071\064\074\065\072\066\073\102\uff96\001\002\000\026" +
    "\013\uff93\051\075\052\070\054\uff93\055\uff93\063\071\064" +
    "\074\065\072\066\073\102\uff93\001\002\000\064\005\030" +
    "\006\007\007\056\010\051\011\004\012\010\016\013\021" +
    "\055\022\060\023\024\024\045\056\021\061\032\063\054" +
    "\067\035\070\043\075\037\076\005\077\223\100\025\102" +
    "\041\103\033\104\011\107\053\110\022\001\002\000\004" +
    "\102\ufffe\001\002\000\004\027\225\001\002\000\074\002" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\056\ufff9\061\ufff9\063\ufff9\067\ufff9\070\ufff9" +
    "\075\ufff9\076\ufff9\077\ufff9\100\ufff9\102\ufff9\103\ufff9\104" +
    "\ufff9\107\ufff9\110\ufff9\001\002\000\004\102\ufffb\001\002" +
    "\000\020\051\075\052\070\063\071\064\074\065\072\066" +
    "\073\102\227\001\002\000\074\002\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\056\ufff1" +
    "\061\ufff1\063\ufff1\067\ufff1\070\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\100\ufff1\102\ufff1\103\ufff1\104\ufff1\107\ufff1\110\ufff1" +
    "\001\002\000\022\025\uffd6\027\uffd6\030\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\041\uffd6\102\uffd6\001\002\000\026\025\uffd5" +
    "\027\uffd5\030\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5\051" +
    "\122\052\121\102\uffd5\001\002\000\024\004\uffc7\025\uffc7" +
    "\027\uffc7\030\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\102" +
    "\uffc7\001\002\000\074\002\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\056\ufff4\061\ufff4" +
    "\063\ufff4\067\ufff4\070\ufff4\075\ufff4\076\ufff4\077\ufff4\100" +
    "\ufff4\102\ufff4\103\ufff4\104\ufff4\107\ufff4\110\ufff4\001\002" +
    "\000\016\006\007\007\056\010\051\011\004\021\055\023" +
    "\024\001\002\000\030\004\uffc6\025\uffc6\027\uffc6\030\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\041\uffc6\051\122\052\121\102" +
    "\uffc6\001\002\000\006\072\uffc4\073\uffc4\001\002\000\006" +
    "\072\241\073\240\001\002\000\014\025\105\027\114\030" +
    "\110\072\uffc2\073\uffc2\001\002\000\024\004\uffc5\025\uffc5" +
    "\027\uffc5\030\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\102" +
    "\uffc5\001\002\000\006\072\uffc3\073\uffc3\001\002\000\004" +
    "\102\ufffc\001\002\000\074\002\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\056\ufff7\061" +
    "\ufff7\063\ufff7\067\ufff7\070\ufff7\075\ufff7\076\ufff7\077\ufff7" +
    "\100\ufff7\102\ufff7\103\ufff7\104\ufff7\107\ufff7\110\ufff7\001" +
    "\002\000\006\102\uffe7\110\uffe7\001\002\000\074\002\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\056\ufff8\061\ufff8\063\ufff8\067\ufff8\070\ufff8\075" +
    "\ufff8\076\ufff8\077\ufff8\100\ufff8\102\ufff8\103\ufff8\104\ufff8" +
    "\107\ufff8\110\ufff8\001\002\000\010\050\064\102\uffe6\110" +
    "\uffe6\001\002\000\020\051\075\052\070\062\251\063\071" +
    "\064\074\065\072\066\073\001\002\000\046\013\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\062\uffdd\063\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\102\uffdd\110\uffdd\001\002\000\064\005\030" +
    "\006\007\007\056\010\051\011\004\012\010\016\013\017" +
    "\254\021\055\022\060\023\024\024\045\056\021\061\032" +
    "\063\054\067\035\070\043\075\037\076\005\100\025\102" +
    "\041\103\033\104\011\107\053\110\022\001\002\000\010" +
    "\012\uff87\016\uff87\102\uff87\001\002\000\006\063\255\064" +
    "\257\001\002\000\012\026\uff89\103\uff89\104\uff89\110\uff89" +
    "\001\002\000\012\026\260\103\263\104\262\110\264\001" +
    "\002\000\012\026\uff8a\103\uff8a\104\uff8a\110\uff8a\001\002" +
    "\000\022\012\uff8c\016\uff8c\020\uff8c\026\uff8c\102\uff8c\103" +
    "\uff8c\104\uff8c\110\uff8c\001\002\000\010\012\uff88\016\uff88" +
    "\102\uff88\001\002\000\022\012\uff8d\016\uff8d\020\uff8d\026" +
    "\uff8d\102\uff8d\103\uff8d\104\uff8d\110\uff8d\001\002\000\022" +
    "\012\uff8e\016\uff8e\020\uff8e\026\uff8e\102\uff8e\103\uff8e\104" +
    "\uff8e\110\uff8e\001\002\000\022\012\uff8f\016\uff8f\020\uff8f" +
    "\026\uff8f\102\uff8f\103\uff8f\104\uff8f\110\uff8f\001\002\000" +
    "\024\004\uffc9\025\uffc9\027\uffc9\030\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\041\uffc9\102\uffc9\001\002\000\030\004\uffc8\025" +
    "\uffc8\027\uffc8\030\uffc8\035\uffc8\036\uffc8\037\uffc8\041\uffc8" +
    "\051\122\052\121\102\uffc8\001\002\000\074\002\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\056\ufff2\061\ufff2\063\ufff2\067\ufff2\070\ufff2\075\ufff2" +
    "\076\ufff2\077\ufff2\100\ufff2\102\ufff2\103\ufff2\104\ufff2\107" +
    "\ufff2\110\ufff2\001\002\000\010\012\uff90\016\uff90\102\uff90" +
    "\001\002\000\004\102\272\001\002\000\062\005\030\006" +
    "\007\007\056\010\051\011\004\012\010\016\013\021\055" +
    "\022\060\023\024\024\045\056\021\061\032\063\054\067" +
    "\035\070\043\075\037\076\005\100\025\102\041\103\033" +
    "\104\011\107\053\110\022\001\002\000\064\005\030\006" +
    "\007\007\056\010\051\011\004\012\010\015\274\016\013" +
    "\021\055\022\060\023\024\024\045\056\021\061\032\063" +
    "\054\067\035\070\043\075\037\076\005\100\025\102\041" +
    "\103\033\104\011\107\053\110\022\001\002\000\010\012" +
    "\uff91\016\uff91\102\uff91\001\002\000\012\013\uff9c\054\uff9c" +
    "\055\uff9c\102\uff9c\001\002\000\074\002\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\056" +
    "\ufff3\061\ufff3\063\ufff3\067\ufff3\070\ufff3\075\ufff3\076\ufff3" +
    "\077\ufff3\100\ufff3\102\ufff3\103\ufff3\104\ufff3\107\ufff3\110" +
    "\ufff3\001\002\000\004\002\001\001\002\000\010\012\uffeb" +
    "\016\uffeb\102\uffeb\001\002\000\010\012\uffec\016\uffec\102" +
    "\uffec\001\002\000\074\002\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\056\ufff6\061\ufff6" +
    "\063\ufff6\067\ufff6\070\ufff6\075\ufff6\076\ufff6\077\ufff6\100" +
    "\ufff6\102\ufff6\103\ufff6\104\ufff6\107\ufff6\110\ufff6\001\002" +
    "\000\012\026\260\103\263\104\262\110\264\001\002\000" +
    "\012\026\260\103\263\104\262\110\264\001\002\000\004" +
    "\020\306\001\002\000\004\102\307\001\002\000\062\005" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\016\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\056\uff8b\061\uff8b\063" +
    "\uff8b\067\uff8b\070\uff8b\075\uff8b\076\uff8b\100\uff8b\102\uff8b" +
    "\103\uff8b\104\uff8b\107\uff8b\110\uff8b\001\002\000\010\013" +
    "\311\054\176\055\177\001\002\000\004\102\312\001\002" +
    "\000\062\005\030\006\007\007\056\010\051\011\004\012" +
    "\010\016\013\021\055\022\060\023\024\024\045\056\021" +
    "\061\032\063\054\067\035\070\043\075\037\076\005\100" +
    "\025\102\041\103\033\104\011\107\053\110\022\001\002" +
    "\000\066\005\030\006\007\007\056\010\051\011\004\012" +
    "\010\014\uff92\015\uff92\016\013\021\055\022\060\023\024" +
    "\024\045\056\021\061\032\063\054\067\035\070\043\075" +
    "\037\076\005\100\025\102\041\103\033\104\011\107\053" +
    "\110\022\001\002\000\030\025\uffca\027\uffca\030\uffca\031" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\072\uffca" +
    "\073\uffca\001\002\000\030\025\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\072\uffcb" +
    "\073\uffcb\001\002\000\004\102\317\001\002\000\062\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\016\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\056\ufffd\061\ufffd\063" +
    "\ufffd\067\ufffd\070\ufffd\075\ufffd\076\ufffd\100\ufffd\102\ufffd" +
    "\103\ufffd\104\ufffd\107\ufffd\110\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\056\003\014\010\037\017\015\020\043\021" +
    "\035\022\026\024\046\025\047\026\016\030\041\033\045" +
    "\034\025\042\056\043\005\045\011\046\030\047\051\050" +
    "\022\051\017\052\033\053\060\054\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\043\022\026\024\046\025\307\026\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\302\001\001\000\012\045\300\046\030\047\277\050\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\010\037\017\015\020\043\021\035\022\026" +
    "\024\046\025\047\026\016\030\041\033\045\034\025\042" +
    "\056\043\005\045\011\046\030\047\051\050\022\052\033" +
    "\053\223\054\013\001\001\000\012\020\043\022\103\024" +
    "\046\037\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\112\012\265\013\116\014\110" +
    "\015\115\016\111\044\264\001\001\000\054\010\037\017" +
    "\015\020\043\021\035\022\026\024\046\025\047\026\016" +
    "\030\041\033\045\034\025\042\056\043\005\045\011\046" +
    "\030\047\051\050\022\051\251\052\033\053\060\054\013" +
    "\001\001\000\010\020\043\022\247\024\046\001\001\000" +
    "\002\001\001\000\004\021\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\112\012" +
    "\234\013\116\014\110\015\115\016\111\044\231\001\001" +
    "\000\002\001\001\000\020\006\112\012\230\013\116\014" +
    "\110\015\115\016\111\044\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\043\022\225\024\046\001" +
    "\001\000\054\010\037\017\015\020\043\021\035\022\026" +
    "\024\046\025\047\026\016\030\041\033\045\034\025\042" +
    "\056\043\005\045\011\046\030\047\051\050\022\051\220" +
    "\052\033\053\060\054\013\001\001\000\002\001\001\000" +
    "\004\041\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\043\022\174\024\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\112" +
    "\012\117\013\116\014\110\015\115\016\111\044\106\001" +
    "\001\000\004\021\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\043\022\065\024" +
    "\046\001\001\000\010\020\043\022\103\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\043\022" +
    "\102\024\046\001\001\000\010\020\043\022\101\024\046" +
    "\001\001\000\010\020\043\022\100\024\046\001\001\000" +
    "\010\020\043\022\077\024\046\001\001\000\010\020\043" +
    "\022\076\024\046\001\001\000\010\020\043\022\075\024" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\112\013\116\014\110\015\115\016\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\143\001\001\000\004\040\142\001" +
    "\001\000\004\040\141\001\001\000\004\040\140\001\001" +
    "\000\004\040\137\001\001\000\004\040\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\157\001\001\000\004\020\156\001\001" +
    "\000\004\020\155\001\001\000\004\020\154\001\001\000" +
    "\004\020\153\001\001\000\004\020\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\173" +
    "\001\001\000\004\020\172\001\001\000\004\020\171\001" +
    "\001\000\004\020\170\001\001\000\004\020\167\001\001" +
    "\000\004\020\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\043\022\203\024\046\026\201" +
    "\037\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\043\022\217" +
    "\024\046\001\001\000\010\020\043\022\216\024\046\001" +
    "\001\000\010\020\043\022\215\024\046\001\001\000\010" +
    "\020\043\022\214\024\046\001\001\000\010\020\043\022" +
    "\213\024\046\001\001\000\010\020\043\022\212\024\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\010\037\017\015\020\043\021\035\022\026\024" +
    "\046\025\047\026\016\030\041\033\045\034\025\035\221" +
    "\042\056\043\005\045\011\046\030\047\051\050\022\052" +
    "\033\053\223\054\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\236\030\235\043\005\001\001\000\004\036\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\010\037\017\015\020\043\021\035\022\026\024\046\025" +
    "\047\026\016\027\252\030\041\033\045\034\025\042\056" +
    "\043\005\045\011\046\030\047\051\050\022\052\033\053" +
    "\223\054\013\001\001\000\002\001\001\000\004\032\255" +
    "\001\001\000\002\001\001\000\004\023\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\010\037\017\015\020" +
    "\043\021\035\022\026\024\046\025\047\026\016\030\041" +
    "\033\045\034\025\042\056\043\005\045\011\046\030\047" +
    "\051\050\022\051\272\052\033\053\060\054\013\001\001" +
    "\000\052\010\037\017\015\020\043\021\035\022\026\024" +
    "\046\025\047\026\016\030\041\033\045\034\025\042\056" +
    "\043\005\045\011\046\030\047\051\050\022\052\033\053" +
    "\223\054\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\303\001\001" +
    "\000\004\023\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\177\001\001\000\002" +
    "\001\001\000\054\010\037\017\015\020\043\021\035\022" +
    "\026\024\046\025\047\026\016\030\041\033\045\034\025" +
    "\042\056\043\005\045\011\046\030\047\051\050\022\051" +
    "\312\052\033\053\060\054\013\001\001\000\052\010\037" +
    "\017\015\020\043\021\035\022\026\024\046\025\047\026" +
    "\016\030\041\033\045\034\025\042\056\043\005\045\011" +
    "\046\030\047\051\050\022\052\033\053\223\054\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
/*
	vm = new VarManager();
	cp = new CommandParameter[7];
	cpm = new CommandParameter[7][];
	com = null;
	comFind = null;

	array_path = new ArrayList<CommandParameter>();
	array_file = new ArrayList<CommandParameter>();
	array_perm = new ArrayList<CommandParameter>();
	array_data = new ArrayList<CommandParameter>();
	array_dim = new ArrayList<CommandParameter>();

	ifcc = null;
	ic = null;

	list_script = new LinkedList<ICommand>();
	todo = new LinkedList<ICommand>();

*/
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/*

	public VarManager vm;
	public CommandParameter[] cp, datap, permp, dimp ;
	public CommandParameter[][] cpm;
	public ICommand com, comFind;
	public int counter_file = 0;
	public int counter_path = 0;
	public int sublevel = 0;

	public ArrayList<CommandParameter> array_path, array_file, array_dim, array_perm, array_data;

	public LinkedList<ICommand> list_script;
	public LinkedList<ICommand> todo;
	public IFlowCommandControl ifcc;
	public ICommand ic;
	public boolean if_control = false;

	private String enviroment = "/home";

	public void add_param(CommandParameter x) throws ParserException
	{
		Utility.mf(x.getValue()+" tipo "+x.getParamType());
		if(x.getParamType()==ParamType.PATH)
			array_path.add(x);
		else
			array_file.add(x);
	}

	public void setEnviroment(String path)
	{
		enviroment = path;
		Utility.mf("CURRENT-PATH now is: " + enviroment);
	}

	public String getEnviroment()
	{
		return enviroment;
	}

	public void print_el(LinkedList<ICommand> ls)
	{
		
		Utility.mf("ITERATORE di una lista da: "+ls.size());
		for(ICommand i: ls){
			Utility.mf("==elemento");
			i.toString();
		}
	}
*/
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_stmt ::= for_head i_stmt for_tail 
            { parser.Tree.reduce(3,"for_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
		x.set_list_command(l);
		parser.list_script.clear();
		x.close_command(y);
		System.out.println("for cycle");
		RESULT = x;
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(35/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_tail ::= Com_For_e i_Op_ps for_arg 
            { parser.Tree.reduce(3,"for_tail",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
				Utility.mf("CICLO FOR CHIUSO");
				Utility.mf("\tSUBLEVEL: "+(--parser.sublevel));
				Utility.mf("step: "+parser.vm.Auto_Neg(y,s));
				RESULT = parser.vm.Auto_Neg(y,s);
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(21/*for_tail*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // i_Op_ps ::= Minus 
            { parser.Tree.reduce(1,"i_Op_ps",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 						*/
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // i_Op_ps ::= Plus 
            { parser.Tree.reduce(1,"i_Op_ps",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 						*/
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_head ::= Com_For for_arg for_arg for_arg Com_For_m EL 
            { parser.Tree.reduce(6,"for_head",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		/*
				System.out.println("FOR HEAD variabili "+x.getValue()+"\t"+y.getValue()+"\t"+z.getValue());
				for_command fc = new for_command(x,y,z,parser.vm);
				Utility.mf("\tSUBLEVEL: "+(++parser.sublevel));
				RESULT = fc;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(36/*for_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_arg ::= ID 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); */
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_arg ::= Vint 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._float, x.floatValue()); 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_arg ::= Int 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new myVar(myVar._int, x.intValue()); 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_arg ::= Var 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.extractVar(x); 
					System.out.println("Var: "+x); */
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_stmt ::= if_head Com_If_e 
            { parser.Tree.reduce(2,"if_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
				x.close_command();
				Utility.mf("IF CHIUSO");
				RESULT = x;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_stmt ::= if_head Com_If_m EL i_stmt Com_If_e 
            { parser.Tree.reduce(5,"if_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
				x.set_list_command_else(l);
				parser.list_script.clear();
				x.close_command(new myVar());
				Utility.mf("IF ELSE CHIUSO");
				RESULT = x;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_head ::= Com_If conf_exp Com_If_2 EL i_stmt 
            { parser.Tree.reduce(5,"if_head",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				if_command ic = new if_command(x);
				ic.set_list_command(l);
				parser.list_script.clear();
				Utility.mf("IF HEAD condizione: ");
				Utility.mf("\tSUBLEVEL: "+parser.sublevel);
				RESULT = ic;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(38/*if_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // logic_stmt ::= arit_stmt Diver arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = parser.vm.makeLogicOper(x,y,s);
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // logic_stmt ::= arit_stmt C_Ugg arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = parser.vm.makeLogicOper(x,y,s);
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // logic_stmt ::= arit_stmt Minug arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = parser.vm.makeLogicOper(x,y,s);
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logic_stmt ::= arit_stmt Min arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = parser.vm.makeLogicOper(x,y,s);
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // logic_stmt ::= arit_stmt Maggug arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = parser.vm.makeLogicOper(x,y,s);
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logic_stmt ::= arit_stmt Magg arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = parser.vm.makeLogicOper(x,y,s);
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conf_exp ::= conf_exp cond_if logic_stmt 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				Utility.mf("IF: CONF_EXP with AND/OR ...");
				RESULT = parser.vm.makeOper(x,y,s);
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conf_exp ::= conf_exp cond_if arit_stmt 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conf_exp ::= conf_exp cond_if conf 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // conf_exp ::= C_Not conf 
            { parser.Tree.reduce(2,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // conf_exp ::= logic_stmt 
            { parser.Tree.reduce(1,"conf_exp",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				Utility.mf("IF LOGIC STMT -> CONF_EXP ");
				RESULT = s;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cond_if ::= C_Andd 
            { parser.Tree.reduce(1,"cond_if",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = s; */
              CUP$parser$result = new java_cup.runtime.Symbol(31/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cond_if ::= C_Orr 
            { parser.Tree.reduce(1,"cond_if",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
				Utility.mf("IF C_Orr: ");
				RESULT = s; */
              CUP$parser$result = new java_cup.runtime.Symbol(31/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // i_arg ::= Bool 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._bool, new Boolean(x)); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // i_arg ::= FUnit 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // i_arg ::= IUnit 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // i_arg ::= Str 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* System.out.println("str: "+x); 
					RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // i_arg ::= Vint 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._float, x.floatValue()); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // i_arg ::= Int 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new myVar(myVar._int, x.intValue()); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // date_arg ::= Data 
            { parser.Tree.reduce(1,"date_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x;	*/
              CUP$parser$result = new java_cup.runtime.Symbol(30/*date_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bool_op ::= C_Or 
            { parser.Tree.reduce(1,"bool_op",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT =x; */
              CUP$parser$result = new java_cup.runtime.Symbol(28/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bool_op ::= C_And 
            { parser.Tree.reduce(1,"bool_op",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT =x; */
              CUP$parser$result = new java_cup.runtime.Symbol(28/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cc_date_cond ::= _where Date_Criteria C_Ug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria UG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.UG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cc_date_cond ::= _where Date_Criteria Diver date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria DIV raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.DIV);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cc_date_cond ::= _where Date_Criteria Maggug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MAGUG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAGUG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cc_date_cond ::= _where Date_Criteria Minug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MINUG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MINUG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cc_date_cond ::= _where Date_Criteria Magg date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MAG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cc_date_cond ::= _where Date_Criteria Min date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MIN raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MIN);					
							*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cc_permission_cond ::= _where Permission_Criteria C_Ug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto permesso = : OK");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.UG);			
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cc_permission_cond ::= _where Permission_Criteria Diver i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.DIV);
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cc_permission_cond ::= _where Permission_Criteria Maggug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MAGUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cc_permission_cond ::= _where Permission_Criteria Minug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MINUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cc_permission_cond ::= _where Permission_Criteria Magg i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MAG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cc_permission_cond ::= _where Permission_Criteria Min i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MIN);
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cc_dimension_cond ::= _where Dimension_Criteria C_Ug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto OK");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.UG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cc_dimension_cond ::= _where Dimension_Criteria Diver i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.DIV);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cc_dimension_cond ::= _where Dimension_Criteria Maggug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MAGUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cc_dimension_cond ::= _where Dimension_Criteria Minug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MINUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cc_dimension_cond ::= _where Dimension_Criteria Magg i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MAG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cc_dimension_cond ::= _where Dimension_Criteria Min i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto valore i_arg ricevuto: "+a.getStringValue());
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MIN);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cc_conds ::= cc_dimension_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_dim.add(parser.cp[6]);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cc_conds ::= cc_date_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_data.add(parser.cp[4]);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cc_conds ::= cc_permission_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_perm.add(parser.cp[5]);
//					parser.cp[5] = null;
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // i_cc_conds ::= i_cc_conds bool_op cc_conds 
            { parser.Tree.reduce(3,"i_cc_conds",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // i_cc_conds ::= cc_conds 
            { parser.Tree.reduce(1,"i_cc_conds",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _where ::= Where 
            { parser.Tree.reduce(1,"_where",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _where ::= 
            { parser.Tree.reduce(0,"_where",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comm_find_stmt_2 ::= comm_find_stmt_2 Name 
            { parser.Tree.reduce(2,"comm_find_stmt_2",0);
              Object RESULT = null;
		/*
					Utility.mf("COMANDO RECURSIVO! rilevato: SENZA PARAM!"); 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comm_find_stmt_2 ::= comm_find_stmt_2 Name param 
            { parser.Tree.reduce(3,"comm_find_stmt_2",0);
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("COMANDO RECURSIVO! rilevato:  CON PARAM"); 
					parser.cp[3]=p; 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comm_find_stmt_2 ::= commands 
            { parser.Tree.reduce(1,"comm_find_stmt_2",0);
              Object RESULT = null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("COMANDO RICORSIVO! rilevato: "+sc);
					parser.cpm[5] = new CommandParameter[]{new CommandParameter(null,sc,null)};
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comm_find_stmt ::= comm_find_stmt Com_Ex comm_find_stmt_2 Pv 
            { parser.Tree.reduce(4,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comm_find_stmt ::= comm_find_stmt i_cc_conds 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comm_find_stmt ::= comm_find_stmt param 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("passo dentro comm_find_stmt");
					parser.add_param(x);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comm_find_stmt ::= Com_Find i_cc_conds 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comm_find_stmt ::= Com_Find param 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("_FIND_!");
					parser.comFind = new FINDCommand(parser.getEnviroment());

//					parser.counter_file = 0; //posso usare una arraylist e poi convertire in array
//					parser.counter_path = 0;

					parser.add_param(x);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LS_stmt ::= LS_stmt Obj 
            { parser.Tree.reduce(2,"LS_stmt",0);
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("LS obj!");
					parser.cp[1]=new CommandParameter(ParamType.BINARIO,o,null);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LS_stmt ::= LS_stmt Order 
            { parser.Tree.reduce(2,"LS_stmt",0);
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("LS Order!");
					parser.cp[0]=new CommandParameter(ParamType.BINARIO,o,null);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LS_stmt ::= Com_Ls 
            { parser.Tree.reduce(1,"LS_stmt",0);
              Object RESULT = null;
		/* 
					Utility.mf("LS!");
					parser.com = new LSCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // commands ::= LS_stmt 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/*RESULT= "ls";*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // commands ::= Com_Cp 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("CP!");
					RESULT= "cp";
					parser.com = new CPCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // commands ::= Com_Rm 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("RM!");
					RESULT= "rm";
					parser.com = new RMCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // commands ::= Com_Mov 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("MV!");
					RESULT= "mv";
					parser.com = new MVCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // commands ::= Com_MKDir 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("MKDIR!");
					RESULT= "mkdir";
					parser.com = new MKDCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // commands ::= Com_Cd 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("CD!");
					RESULT= "cd";
					parser.com = new CDCommand(parser.getEnviroment(),parser);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sh_stmt ::= sh_stmt i_cc_conds 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sh_stmt ::= sh_stmt param 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.cp[3]=p; */
              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sh_stmt ::= commands i_cc_conds 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sh_stmt ::= commands param 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.cp[2]=p; */
              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // param ::= Ext 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.FILE,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param ::= File 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.FILE,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= Path 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.PATH,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arit_arg ::= i_arg 
            { parser.Tree.reduce(1,"arit_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 
							//System.out.println("i_arg a arit_arg: "+x.toString());
							//parser.vm.add_tmp_var(x);
						*/
              CUP$parser$result = new java_cup.runtime.Symbol(18/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arit_arg ::= Var 
            { parser.Tree.reduce(1,"arit_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.extractVar(x); 
							//System.out.println("Var a arit_arg "+x); 
						*/
              CUP$parser$result = new java_cup.runtime.Symbol(18/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arit_stmt ::= C_Not arit_stmt 
            { parser.Tree.reduce(2,"arit_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.makeSOper(x,s); */
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arit_stmt ::= RO arit_stmt RC 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/* RESULT = x; 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arit_stmt ::= arit_arg 
            { parser.Tree.reduce(1,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 
							//System.out.println("da arit_arg a arit_stmt");			
						*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arit_stmt ::= arit_stmt C_Or arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arit_stmt ::= arit_stmt C_And arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arit_stmt ::= arit_stmt Minus arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arit_stmt ::= arit_stmt Plus arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_stmt ::= arit_stmt Div arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_stmt ::= arit_stmt Times arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_stmt ::= Minus arit_stmt 
            { parser.Tree.reduce(2,"arit_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.makeOper(x,new myVar(x.getType(),new Integer(-1)),"*"); */
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // init_stmt ::= init_stmt Var 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(new myVar(x)); Utility.mf("var: "+x.toString());*/
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // init_stmt ::= init_stmt assig_stmt 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(x);Utility.mf("assegnazione: "+x.toString());*/
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_stmt ::= Com_Str Var 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(new myVar(x)); Utility.mf("DICHIARAZIONI\nvar: "+x.toString());*/
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_stmt ::= Com_Str assig_stmt 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(x); Utility.mf("DICHIARAZIONI:\nassegnazione: "+x.toString()); */
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assig_stmt ::= Var C_Ug arit_stmt 
            { parser.Tree.reduce(3,"assig_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*                                              
						myVar vx = new myVar();
						vx.set(y);
						vx.setName(x); 											
						RESULT = vx;
						//Utility.mf("fine da arit_stmt a assig_stmt");
						*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // str_stmt ::= str_stmt if_stmt 
            { parser.Tree.reduce(2,"str_stmt",0);
              Object RESULT = null;
		/* Utility.mf("raccolto IF stmt interno"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_stmt ::= str_stmt for_stmt 
            { parser.Tree.reduce(2,"str_stmt",0);
              Object RESULT = null;
		/* Utility.mf("raccolto FOR stmt interno"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_stmt ::= for_stmt 
            { parser.Tree.reduce(1,"str_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
						//x.print_parameters(); nullpointerexc
						Utility.mf("raccolto FOR stmt"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_stmt ::= if_stmt 
            { parser.Tree.reduce(1,"str_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
						((if_command)x).print_parameters();
						Utility.mf("raccolto IF stmt"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= EL 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= conf_exp EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= Com_P arit_stmt EL 
            { parser.Tree.reduce(3,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= throw_s EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= script EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		/*parser.print_el(parser.list_script);*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= comm_find_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		/*
					System.out.println("raccolto sh stmt = FIND");
					parser.cpm[0] = new CommandParameter[parser.array_file.size()];
					parser.cpm[1] = new CommandParameter[parser.array_path.size()];
					parser.cpm[2] = new CommandParameter[parser.array_perm.size()];
					parser.cpm[3] = new CommandParameter[parser.array_data.size()];
					parser.cpm[4] = new CommandParameter[parser.array_dim.size()];

					System.out.println("dopo onit");
					parser.cpm[0] = parser.array_file.toArray(parser.cpm[0]);
					parser.cpm[1] = parser.array_path.toArray(parser.cpm[1]);
					parser.cpm[2] = parser.array_perm.toArray(parser.cpm[2]);
					parser.cpm[3] = parser.array_data.toArray(parser.cpm[3]);
					parser.cpm[4] = parser.array_dim.toArray(parser.cpm[4]);

					//parser.cpm[6]=new CommandParameter[7];

					System.out.println("dopo init 2'");

					Utility.mf("SETCOMMANDPARAMETER");
					parser.comFind.setCommandParameter(parser.cpm);
					Utility.mf("EXEC");
					parser.comFind.exec();
					parser.array_file.clear();
					parser.array_path.clear();
					parser.array_perm.clear();
					parser.array_data.clear();
					parser.array_dim.clear();
					
					Utility.mf(parser.comFind.getCommandStringResult());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= sh_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					System.out.println("raccolto sh stmt: parameter setting"); 
					parser.cp[0] = parser.array_file.get(0);
					parser.cp[1] = parser.array_path.get(0);
					parser.cp[2] = parser.array_perm.get(0);
					parser.cp[3] = parser.array_data.get(0);
					parser.cp[4] = parser.array_dim.get(0);
					for(int i=0; i<7; i++)
						if(parser.cp[i]==null)
							Utility.mf("*niente*");
						else
							Utility.mf("param["+i+"]: "+parser.cp[i].getValue());
					parser.com.setCommandParameter(parser.cp);
					parser.com.exec();
					Utility.mf(parser.com.getCommandStringResult());
					
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= str_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					parser.list_script.add(s);
					Utility.mf("risolto flow control statement -> INSERITO IN LIST SCRIPT"); 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= assig_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					if(parser.vm.extractVar(x.getName())!=null){
						parser.vm.assig(x);
						Utility.mf(x.toString());
					}
					else Utility.mf("VARIABILE INESISTENTE");
					Utility.mf("ASSIG STMT RACCOLTO");
					RESULT = (ICommand)x; */
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= init_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*  Utility.mf("INIT STMT RACCOLTO");	*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // i_stmt ::= i_stmt stmt 
            { parser.Tree.reduce(2,"i_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_stmt ::= stmt 
            { parser.Tree.reduce(1,"i_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*//RE-Init
					parser.todo.add(s);
                                        
					parser.cp = new CommandParameter[7];
					parser.cpm = new CommandParameter[7][];
					parser.com = null;
					parser.comFind = null;
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(39/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // end_s ::= End_S File 
            { parser.Tree.reduce(2,"end_s",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("FINE SCRIPT");
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(27/*end_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // throw_s ::= Throw_S File 
            { parser.Tree.reduce(2,"throw_s",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*throw_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_s ::= Start_S File EL 
            { parser.Tree.reduce(3,"start_s",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					Utility.mf("INIZIO SCRIPT");
					parser.list_script = new LinkedList<ICommand>();
					//parser.list_script.add(s);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(25/*start_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= start_s i_stmt end_s 
            { parser.Tree.reduce(3,"script",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					Utility.mf("CHIUDO SCRIPT");
					//salvataggio script
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(13/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= i_stmt 
            { parser.Tree.reduce(1,"S",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= 
            { parser.Tree.reduce(0,"S",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

