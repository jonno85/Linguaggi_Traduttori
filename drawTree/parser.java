
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Sep 16 18:17:14 CEST 2011
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Fri Sep 16 18:17:14 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\017\005\000\002\033\005\000\002\034\004" +
    "\000\002\035\004\000\002\051\003\000\002\051\004\000" +
    "\002\053\004\000\002\053\004\000\002\053\004\000\002" +
    "\053\004\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\005\000\002\053\004\000\002\053\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\004\000" +
    "\002\054\004\000\002\021\005\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\022" +
    "\004\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\022\005\000\002\022\004\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\024\003" +
    "\000\002\024\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\043\003\000\002\043\004\000" +
    "\002\043\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\006\000\002\011" +
    "\003\000\002\011\005\000\002\011\004\000\002\006\002" +
    "\000\002\006\003\000\002\012\003\000\002\012\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\013\006\000\002" +
    "\013\006\000\002\013\006\000\002\013\006\000\002\013" +
    "\006\000\002\013\006\000\002\036\003\000\002\036\003" +
    "\000\002\040\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\041\003\000\002\041\003\000\002\037" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\004" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\050\007\000\002\047\007\000\002\047\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\046\010\000\002\032\003\000\002\032\003" +
    "\000\002\027\005\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\064\002\000\005\030\006\007\007\057\010" +
    "\054\011\004\012\011\016\013\021\056\022\061\023\024" +
    "\024\045\056\021\061\032\063\055\067\035\070\043\075" +
    "\037\076\005\100\025\102\042\103\033\104\010\107\052" +
    "\110\022\001\002\000\024\025\uffcc\027\uffcc\030\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\041\uffcc\072\uffcc\073\uffcc\001\002" +
    "\000\004\027\322\001\002\000\030\025\uffc7\027\uffc7\030" +
    "\uffc7\031\321\035\uffc7\036\uffc7\037\uffc7\040\320\041\uffc7" +
    "\072\uffc7\073\uffc7\001\002\000\024\025\uffc9\027\uffc9\030" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\072\uffc9\073\uffc9" +
    "\001\002\000\066\004\uff9e\013\uff9e\025\uff9e\027\uff9e\030" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e" +
    "\102\uff9e\110\uff9e\001\002\000\026\056\021\061\032\063" +
    "\055\067\035\070\043\100\025\103\033\104\010\107\052" +
    "\110\070\001\002\000\010\012\uffed\016\uffed\102\uffed\001" +
    "\002\000\012\026\263\103\266\104\265\110\267\001\002" +
    "\000\010\012\011\016\013\102\306\001\002\000\004\002" +
    "\303\001\002\000\004\102\302\001\002\000\012\013\uff95" +
    "\054\uff95\055\uff95\102\uff95\001\002\000\064\002\uffff\005" +
    "\030\006\007\007\057\010\054\011\004\012\011\016\013" +
    "\021\056\022\061\023\024\024\045\056\021\061\032\063" +
    "\055\067\035\070\043\075\037\076\005\100\025\102\042" +
    "\103\033\104\010\107\052\110\022\001\002\000\026\056" +
    "\066\061\032\063\055\067\035\070\043\100\025\103\033" +
    "\104\010\107\052\110\070\001\002\000\034\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\065\051\uffd5\052\uffd5" +
    "\053\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\001\002\000" +
    "\006\014\274\015\273\001\002\000\024\025\uffca\027\uffca" +
    "\030\uffca\035\uffca\036\uffca\037\uffca\041\uffca\072\uffca\073" +
    "\uffca\001\002\000\066\004\uff9d\013\uff9d\025\uff9d\027\uff9d" +
    "\030\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d\043\uff9d\044" +
    "\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\054\uff9d\055\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066" +
    "\uff9d\102\uff9d\110\uff9d\001\002\000\004\102\272\001\002" +
    "\000\032\043\207\044\213\045\212\046\211\047\206\051" +
    "\076\052\071\053\210\063\072\064\075\065\073\066\074" +
    "\001\002\000\020\025\107\027\113\030\111\035\uffbb\036" +
    "\uffbb\037\uffbb\041\106\001\002\000\062\005\030\006\007" +
    "\007\057\010\054\011\004\012\011\016\013\021\056\022" +
    "\061\023\024\024\045\056\021\061\032\063\055\067\035" +
    "\070\043\075\037\076\005\100\025\102\042\103\033\104" +
    "\010\107\052\110\022\001\002\000\026\056\066\061\032" +
    "\063\055\067\035\070\043\100\025\103\033\104\010\107" +
    "\052\110\070\001\002\000\066\004\uff9f\013\uff9f\025\uff9f" +
    "\027\uff9f\030\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\062\uff9f\063\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\102\uff9f\110\uff9f\001\002\000\006\102\251" +
    "\110\252\001\002\000\066\004\uff9b\013\uff9b\025\uff9b\027" +
    "\uff9b\030\uff9b\035\uff9b\036\uff9b\037\uff9b\041\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b" +
    "\066\uff9b\102\uff9b\110\uff9b\001\002\000\004\102\247\001" +
    "\002\000\004\027\246\001\002\000\024\004\237\025\107" +
    "\027\113\030\111\035\uffbb\036\uffbb\037\uffbb\041\106\102" +
    "\236\001\002\000\020\025\107\027\113\030\111\035\uffbb" +
    "\036\uffbb\037\uffbb\041\106\001\002\000\074\002\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\056\uffef\061\uffef\063\uffef\067\uffef\070\uffef\075\uffef" +
    "\076\uffef\077\uffef\100\uffef\102\uffef\103\uffef\104\uffef\107" +
    "\uffef\110\uffef\001\002\000\066\004\uff9c\013\uff9c\025\uff9c" +
    "\027\uff9c\030\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\054\uff9c\055\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\102\uff9c\110\uff9c\001\002\000\046\013\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\102\uffd4\110\uffd4\001\002\000\026\056" +
    "\066\061\032\063\055\067\035\070\043\100\025\103\033" +
    "\104\010\107\052\110\070\001\002\000\062\005\030\006" +
    "\007\007\057\010\054\011\004\012\011\016\013\021\056" +
    "\022\061\023\024\024\045\056\021\061\032\063\055\067" +
    "\035\070\043\075\037\076\005\100\025\102\042\103\033" +
    "\104\010\107\052\110\022\001\002\000\046\013\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\102\uffde\110\uffde\001\002\000\012\013\uff96" +
    "\054\uff96\055\uff96\102\uff96\001\002\000\010\054\177\055" +
    "\200\102\202\001\002\000\066\004\uff9a\013\uff9a\025\uff9a" +
    "\027\uff9a\030\uff9a\035\uff9a\036\uff9a\037\uff9a\041\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\102\uff9a\110\uff9a\001\002\000\010\012\uffee" +
    "\016\uffee\102\uffee\001\002\000\024\025\uffc8\027\uffc8\030" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\041\uffc8\072\uffc8\073\uffc8" +
    "\001\002\000\026\056\066\061\032\063\055\067\035\070" +
    "\043\100\025\103\033\104\010\107\052\110\070\001\002" +
    "\000\030\025\uffc6\027\uffc6\030\uffc6\031\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\072\uffc6\073\uffc6\001\002" +
    "\000\024\025\uffcb\027\uffcb\030\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\041\uffcb\072\uffcb\073\uffcb\001\002\000\022\025\107" +
    "\027\113\030\111\035\uffbb\036\uffbb\037\uffbb\041\106\102" +
    "\116\001\002\000\004\110\064\001\002\000\074\002\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\056\ufffa\061\ufffa\063\ufffa\067\ufffa\070\ufffa\075" +
    "\ufffa\076\ufffa\077\ufffa\100\ufffa\102\ufffa\103\ufffa\104\ufffa" +
    "\107\ufffa\110\ufffa\001\002\000\006\102\uffe9\110\uffe9\001" +
    "\002\000\010\050\065\102\uffe8\110\uffe8\001\002\000\026" +
    "\056\066\061\032\063\055\067\035\070\043\100\025\103" +
    "\033\104\010\107\052\110\070\001\002\000\026\056\066" +
    "\061\032\063\055\067\035\070\043\100\025\103\033\104" +
    "\010\107\052\110\070\001\002\000\022\051\076\052\071" +
    "\063\072\064\075\065\073\066\074\102\uffea\110\uffea\001" +
    "\002\000\046\013\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\102\uffd5\110\uffd5" +
    "\001\002\000\026\056\066\061\032\063\055\067\035\070" +
    "\043\100\025\103\033\104\010\107\052\110\070\001\002" +
    "\000\026\056\066\061\032\063\055\067\035\070\043\100" +
    "\025\103\033\104\010\107\052\110\070\001\002\000\026" +
    "\056\066\061\032\063\055\067\035\070\043\100\025\103" +
    "\033\104\010\107\052\110\070\001\002\000\026\056\066" +
    "\061\032\063\055\067\035\070\043\100\025\103\033\104" +
    "\010\107\052\110\070\001\002\000\026\056\066\061\032" +
    "\063\055\067\035\070\043\100\025\103\033\104\010\107" +
    "\052\110\070\001\002\000\026\056\066\061\032\063\055" +
    "\067\035\070\043\100\025\103\033\104\010\107\052\110" +
    "\070\001\002\000\046\013\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\102\uffe0" +
    "\110\uffe0\001\002\000\046\013\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\051\076\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\062\uffe2\063\uffe2\064\uffe2\065\073\066\074\102" +
    "\uffe2\110\uffe2\001\002\000\046\013\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\102\uffe3\110\uffe3\001\002\000\046\013\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066" +
    "\uffe4\102\uffe4\110\uffe4\001\002\000\046\013\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\051\076\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\062\uffe1\063\uffe1\064\uffe1\065\073" +
    "\066\074\102\uffe1\110\uffe1\001\002\000\046\013\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\051\076\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\073\066\074\102\uffdf\110\uffdf\001\002\000\046\013\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\102\uffdc\110\uffdc\001\002\000\010\035" +
    "\uffba\036\uffba\037\uffba\001\002\000\030\004\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\072" +
    "\uffd1\073\uffd1\102\uffd1\001\002\000\022\025\uffce\027\uffce" +
    "\030\uffce\035\uffce\036\uffce\037\uffce\041\uffce\102\uffce\001" +
    "\002\000\030\004\uffd3\025\uffd3\027\uffd3\030\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\041\uffd3\072\uffd3\073\uffd3\102\uffd3\001" +
    "\002\000\030\004\uffb7\025\uffb7\027\uffb7\030\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\041\uffb7\051\uffb7\052\uffb7\102\uffb7\001" +
    "\002\000\030\004\uffd2\025\uffd2\027\uffd2\030\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\041\uffd2\072\uffd2\073\uffd2\102\uffd2\001" +
    "\002\000\030\004\uffb9\025\uffb9\027\uffb9\030\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\041\uffb9\051\uffb9\052\uffb9\102\uffb9\001" +
    "\002\000\010\035\130\036\126\037\127\001\002\000\074" +
    "\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\056\ufff5\061\ufff5\063\ufff5\067\ufff5\070" +
    "\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\102\ufff5\103\ufff5" +
    "\104\ufff5\107\ufff5\110\ufff5\001\002\000\030\004\uffb5\025" +
    "\uffb5\027\uffb5\030\uffb5\035\uffb5\036\uffb5\037\uffb5\041\uffb5" +
    "\051\uffb5\052\uffb5\102\uffb5\001\002\000\026\025\uffcd\027" +
    "\uffcd\030\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd\051\123" +
    "\052\122\102\uffcd\001\002\000\030\004\uffb6\025\uffb6\027" +
    "\uffb6\030\uffb6\035\uffb6\036\uffb6\037\uffb6\041\uffb6\051\uffb6" +
    "\052\uffb6\102\uffb6\001\002\000\012\035\uffa1\036\uffa1\037" +
    "\uffa1\041\uffa1\001\002\000\012\035\uffa2\036\uffa2\037\uffa2" +
    "\041\uffa2\001\002\000\012\035\uffbb\036\uffbb\037\uffbb\041" +
    "\106\001\002\000\030\004\uffb8\025\uffb8\027\uffb8\030\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\041\uffb8\051\uffb8\052\uffb8\102" +
    "\uffb8\001\002\000\016\043\162\044\163\045\164\046\166" +
    "\047\167\050\165\001\002\000\016\043\146\044\147\045" +
    "\151\046\152\047\153\050\150\001\002\000\016\043\131" +
    "\044\132\045\133\046\135\047\136\050\134\001\002\000" +
    "\004\032\140\001\002\000\004\032\140\001\002\000\004" +
    "\032\140\001\002\000\004\032\140\001\002\000\004\032" +
    "\140\001\002\000\004\032\140\001\002\000\030\004\uffa4" +
    "\025\uffa4\027\uffa4\030\uffa4\035\uffa4\036\uffa4\037\uffa4\041" +
    "\uffa4\051\uffa4\052\uffa4\102\uffa4\001\002\000\030\004\uffa0" +
    "\025\uffa0\027\uffa0\030\uffa0\035\uffa0\036\uffa0\037\uffa0\041" +
    "\uffa0\051\uffa0\052\uffa0\102\uffa0\001\002\000\030\004\uffa5" +
    "\025\uffa5\027\uffa5\030\uffa5\035\uffa5\036\uffa5\037\uffa5\041" +
    "\uffa5\051\uffa5\052\uffa5\102\uffa5\001\002\000\030\004\uffa3" +
    "\025\uffa3\027\uffa3\030\uffa3\035\uffa3\036\uffa3\037\uffa3\041" +
    "\uffa3\051\uffa3\052\uffa3\102\uffa3\001\002\000\030\004\uffa6" +
    "\025\uffa6\027\uffa6\030\uffa6\035\uffa6\036\uffa6\037\uffa6\041" +
    "\uffa6\051\uffa6\052\uffa6\102\uffa6\001\002\000\030\004\uffa7" +
    "\025\uffa7\027\uffa7\030\uffa7\035\uffa7\036\uffa7\037\uffa7\041" +
    "\uffa7\051\uffa7\052\uffa7\102\uffa7\001\002\000\030\004\uffa8" +
    "\025\uffa8\027\uffa8\030\uffa8\035\uffa8\036\uffa8\037\uffa8\041" +
    "\uffa8\051\uffa8\052\uffa8\102\uffa8\001\002\000\016\067\035" +
    "\070\043\100\025\103\033\104\010\107\052\001\002\000" +
    "\016\067\035\070\043\100\025\103\033\104\010\107\052" +
    "\001\002\000\016\067\035\070\043\100\025\103\033\104" +
    "\010\107\052\001\002\000\016\067\035\070\043\100\025" +
    "\103\033\104\010\107\052\001\002\000\016\067\035\070" +
    "\043\100\025\103\033\104\010\107\052\001\002\000\016" +
    "\067\035\070\043\100\025\103\033\104\010\107\052\001" +
    "\002\000\030\004\uffb0\025\uffb0\027\uffb0\030\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\041\uffb0\051\uffb0\052\uffb0\102\uffb0\001" +
    "\002\000\030\004\uffb1\025\uffb1\027\uffb1\030\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\041\uffb1\051\uffb1\052\uffb1\102\uffb1\001" +
    "\002\000\030\004\uffb2\025\uffb2\027\uffb2\030\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\041\uffb2\051\uffb2\052\uffb2\102\uffb2\001" +
    "\002\000\030\004\uffaf\025\uffaf\027\uffaf\030\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\041\uffaf\051\uffaf\052\uffaf\102\uffaf\001" +
    "\002\000\030\004\uffb3\025\uffb3\027\uffb3\030\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\041\uffb3\051\uffb3\052\uffb3\102\uffb3\001" +
    "\002\000\030\004\uffb4\025\uffb4\027\uffb4\030\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\041\uffb4\051\uffb4\052\uffb4\102\uffb4\001" +
    "\002\000\016\067\035\070\043\100\025\103\033\104\010" +
    "\107\052\001\002\000\016\067\035\070\043\100\025\103" +
    "\033\104\010\107\052\001\002\000\016\067\035\070\043" +
    "\100\025\103\033\104\010\107\052\001\002\000\016\067" +
    "\035\070\043\100\025\103\033\104\010\107\052\001\002" +
    "\000\016\067\035\070\043\100\025\103\033\104\010\107" +
    "\052\001\002\000\016\067\035\070\043\100\025\103\033" +
    "\104\010\107\052\001\002\000\030\004\uffaa\025\uffaa\027" +
    "\uffaa\030\uffaa\035\uffaa\036\uffaa\037\uffaa\041\uffaa\051\uffaa" +
    "\052\uffaa\102\uffaa\001\002\000\030\004\uffab\025\uffab\027" +
    "\uffab\030\uffab\035\uffab\036\uffab\037\uffab\041\uffab\051\uffab" +
    "\052\uffab\102\uffab\001\002\000\030\004\uffa9\025\uffa9\027" +
    "\uffa9\030\uffa9\035\uffa9\036\uffa9\037\uffa9\041\uffa9\051\uffa9" +
    "\052\uffa9\102\uffa9\001\002\000\030\004\uffac\025\uffac\027" +
    "\uffac\030\uffac\035\uffac\036\uffac\037\uffac\041\uffac\051\uffac" +
    "\052\uffac\102\uffac\001\002\000\030\004\uffad\025\uffad\027" +
    "\uffad\030\uffad\035\uffad\036\uffad\037\uffad\041\uffad\051\uffad" +
    "\052\uffad\102\uffad\001\002\000\030\004\uffae\025\uffae\027" +
    "\uffae\030\uffae\035\uffae\036\uffae\037\uffae\041\uffae\051\uffae" +
    "\052\uffae\102\uffae\001\002\000\046\013\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\102\uffe5\110\uffe5\001\002\000\026\056\uff98\061\uff98" +
    "\063\uff98\067\uff98\070\uff98\100\uff98\103\uff98\104\uff98\107" +
    "\uff98\110\uff98\001\002\000\026\056\uff99\061\uff99\063\uff99" +
    "\067\uff99\070\uff99\100\uff99\103\uff99\104\uff99\107\uff99\110" +
    "\uff99\001\002\000\026\056\066\061\032\063\055\067\035" +
    "\070\043\100\025\103\033\104\010\107\052\110\070\001" +
    "\002\000\074\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\056\ufff0\061\ufff0\063\ufff0" +
    "\067\ufff0\070\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\102" +
    "\ufff0\103\ufff0\104\ufff0\107\ufff0\110\ufff0\001\002\000\012" +
    "\013\uff91\054\uff91\055\uff91\102\uff91\001\002\000\012\013" +
    "\uff93\054\uff93\055\uff93\102\uff93\001\002\000\042\013\uff92" +
    "\043\207\044\213\045\212\046\211\047\206\051\076\052" +
    "\071\053\210\054\uff92\055\uff92\063\072\064\075\065\073" +
    "\066\074\102\uff92\001\002\000\026\056\066\061\032\063" +
    "\055\067\035\070\043\100\025\103\033\104\010\107\052" +
    "\110\070\001\002\000\026\056\066\061\032\063\055\067" +
    "\035\070\043\100\025\103\033\104\010\107\052\110\070" +
    "\001\002\000\026\056\066\061\032\063\055\067\035\070" +
    "\043\100\025\103\033\104\010\107\052\110\070\001\002" +
    "\000\026\056\066\061\032\063\055\067\035\070\043\100" +
    "\025\103\033\104\010\107\052\110\070\001\002\000\026" +
    "\056\066\061\032\063\055\067\035\070\043\100\025\103" +
    "\033\104\010\107\052\110\070\001\002\000\026\056\066" +
    "\061\032\063\055\067\035\070\043\100\025\103\033\104" +
    "\010\107\052\110\070\001\002\000\026\056\066\061\032" +
    "\063\055\067\035\070\043\100\025\103\033\104\010\107" +
    "\052\110\070\001\002\000\026\013\uff97\051\076\052\071" +
    "\054\uff97\055\uff97\063\072\064\075\065\073\066\074\102" +
    "\uff97\001\002\000\026\013\uffdb\051\076\052\071\054\uffdb" +
    "\055\uffdb\063\072\064\075\065\073\066\074\102\uffdb\001" +
    "\002\000\026\013\uffd8\051\076\052\071\054\uffd8\055\uffd8" +
    "\063\072\064\075\065\073\066\074\102\uffd8\001\002\000" +
    "\026\013\uffda\051\076\052\071\054\uffda\055\uffda\063\072" +
    "\064\075\065\073\066\074\102\uffda\001\002\000\026\013" +
    "\uffd7\051\076\052\071\054\uffd7\055\uffd7\063\072\064\075" +
    "\065\073\066\074\102\uffd7\001\002\000\026\013\uffd9\051" +
    "\076\052\071\054\uffd9\055\uffd9\063\072\064\075\065\073" +
    "\066\074\102\uffd9\001\002\000\026\013\uffd6\051\076\052" +
    "\071\054\uffd6\055\uffd6\063\072\064\075\065\073\066\074" +
    "\102\uffd6\001\002\000\064\005\030\006\007\007\057\010" +
    "\054\011\004\012\011\016\013\021\056\022\061\023\024" +
    "\024\045\056\021\061\032\063\055\067\035\070\043\075" +
    "\037\076\005\077\226\100\025\102\042\103\033\104\010" +
    "\107\052\110\022\001\002\000\004\102\ufffe\001\002\000" +
    "\004\027\230\001\002\000\074\002\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\056\ufff9" +
    "\061\ufff9\063\ufff9\067\ufff9\070\ufff9\075\ufff9\076\ufff9\077" +
    "\ufff9\100\ufff9\102\ufff9\103\ufff9\104\ufff9\107\ufff9\110\ufff9" +
    "\001\002\000\004\102\ufffb\001\002\000\020\051\076\052" +
    "\071\063\072\064\075\065\073\066\074\102\232\001\002" +
    "\000\074\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\056\ufff1\061\ufff1\063\ufff1\067" +
    "\ufff1\070\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\102\ufff1" +
    "\103\ufff1\104\ufff1\107\ufff1\110\ufff1\001\002\000\022\025" +
    "\uffd0\027\uffd0\030\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0" +
    "\102\uffd0\001\002\000\026\025\uffcf\027\uffcf\030\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\041\uffcf\051\123\052\122\102\uffcf" +
    "\001\002\000\024\004\uffc1\025\uffc1\027\uffc1\030\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\041\uffc1\102\uffc1\001\002\000\074" +
    "\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\056\ufff4\061\ufff4\063\ufff4\067\ufff4\070" +
    "\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\102\ufff4\103\ufff4" +
    "\104\ufff4\107\ufff4\110\ufff4\001\002\000\016\006\007\007" +
    "\057\010\054\011\004\021\056\023\024\001\002\000\030" +
    "\004\uffc0\025\uffc0\027\uffc0\030\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\041\uffc0\051\123\052\122\102\uffc0\001\002\000\006" +
    "\072\uffbe\073\uffbe\001\002\000\006\072\244\073\243\001" +
    "\002\000\014\025\107\027\113\030\111\072\uffbc\073\uffbc" +
    "\001\002\000\024\004\uffbf\025\uffbf\027\uffbf\030\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\041\uffbf\102\uffbf\001\002\000\006" +
    "\072\uffbd\073\uffbd\001\002\000\004\102\ufffc\001\002\000" +
    "\074\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\056\ufff7\061\ufff7\063\ufff7\067\ufff7" +
    "\070\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\102\ufff7\103" +
    "\ufff7\104\ufff7\107\ufff7\110\ufff7\001\002\000\006\102\uffe7" +
    "\110\uffe7\001\002\000\074\002\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\056\ufff8\061" +
    "\ufff8\063\ufff8\067\ufff8\070\ufff8\075\ufff8\076\ufff8\077\ufff8" +
    "\100\ufff8\102\ufff8\103\ufff8\104\ufff8\107\ufff8\110\ufff8\001" +
    "\002\000\010\050\065\102\uffe6\110\uffe6\001\002\000\020" +
    "\051\076\052\071\062\254\063\072\064\075\065\073\066" +
    "\074\001\002\000\046\013\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\102\uffdd" +
    "\110\uffdd\001\002\000\064\005\030\006\007\007\057\010" +
    "\054\011\004\012\011\016\013\017\257\021\056\022\061" +
    "\023\024\024\045\056\021\061\032\063\055\067\035\070" +
    "\043\075\037\076\005\100\025\102\042\103\033\104\010" +
    "\107\052\110\022\001\002\000\010\012\uff85\016\uff85\102" +
    "\uff85\001\002\000\006\063\260\064\262\001\002\000\012" +
    "\026\uff87\103\uff87\104\uff87\110\uff87\001\002\000\012\026" +
    "\263\103\266\104\265\110\267\001\002\000\012\026\uff88" +
    "\103\uff88\104\uff88\110\uff88\001\002\000\022\012\uff8a\016" +
    "\uff8a\020\uff8a\026\uff8a\102\uff8a\103\uff8a\104\uff8a\110\uff8a" +
    "\001\002\000\010\012\uff86\016\uff86\102\uff86\001\002\000" +
    "\022\012\uff8b\016\uff8b\020\uff8b\026\uff8b\102\uff8b\103\uff8b" +
    "\104\uff8b\110\uff8b\001\002\000\022\012\uff8c\016\uff8c\020" +
    "\uff8c\026\uff8c\102\uff8c\103\uff8c\104\uff8c\110\uff8c\001\002" +
    "\000\022\012\uff8d\016\uff8d\020\uff8d\026\uff8d\102\uff8d\103" +
    "\uff8d\104\uff8d\110\uff8d\001\002\000\024\004\uffc3\025\uffc3" +
    "\027\uffc3\030\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\102" +
    "\uffc3\001\002\000\030\004\uffc2\025\uffc2\027\uffc2\030\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\041\uffc2\051\123\052\122\102" +
    "\uffc2\001\002\000\074\002\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\056\ufff2\061\ufff2" +
    "\063\ufff2\067\ufff2\070\ufff2\075\ufff2\076\ufff2\077\ufff2\100" +
    "\ufff2\102\ufff2\103\ufff2\104\ufff2\107\ufff2\110\ufff2\001\002" +
    "\000\010\012\uff8e\016\uff8e\102\uff8e\001\002\000\004\102" +
    "\275\001\002\000\062\005\030\006\007\007\057\010\054" +
    "\011\004\012\011\016\013\021\056\022\061\023\024\024" +
    "\045\056\021\061\032\063\055\067\035\070\043\075\037" +
    "\076\005\100\025\102\042\103\033\104\010\107\052\110" +
    "\022\001\002\000\064\005\030\006\007\007\057\010\054" +
    "\011\004\012\011\015\277\016\013\021\056\022\061\023" +
    "\024\024\045\056\021\061\032\063\055\067\035\070\043" +
    "\075\037\076\005\100\025\102\042\103\033\104\010\107" +
    "\052\110\022\001\002\000\010\012\uff8f\016\uff8f\102\uff8f" +
    "\001\002\000\012\013\uff94\054\uff94\055\uff94\102\uff94\001" +
    "\002\000\032\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\001\002\000\074\002\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\056\ufff3\061\ufff3" +
    "\063\ufff3\067\ufff3\070\ufff3\075\ufff3\076\ufff3\077\ufff3\100" +
    "\ufff3\102\ufff3\103\ufff3\104\ufff3\107\ufff3\110\ufff3\001\002" +
    "\000\004\002\001\001\002\000\010\012\uffeb\016\uffeb\102" +
    "\uffeb\001\002\000\010\012\uffec\016\uffec\102\uffec\001\002" +
    "\000\074\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\056\ufff6\061\ufff6\063\ufff6\067" +
    "\ufff6\070\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\102\ufff6" +
    "\103\ufff6\104\ufff6\107\ufff6\110\ufff6\001\002\000\012\026" +
    "\263\103\266\104\265\110\267\001\002\000\012\026\263" +
    "\103\266\104\265\110\267\001\002\000\004\020\312\001" +
    "\002\000\004\102\313\001\002\000\062\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\012\uff89\016\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\056\uff89\061\uff89\063\uff89\067\uff89" +
    "\070\uff89\075\uff89\076\uff89\100\uff89\102\uff89\103\uff89\104" +
    "\uff89\107\uff89\110\uff89\001\002\000\010\013\315\054\177" +
    "\055\200\001\002\000\004\102\316\001\002\000\062\005" +
    "\030\006\007\007\057\010\054\011\004\012\011\016\013" +
    "\021\056\022\061\023\024\024\045\056\021\061\032\063" +
    "\055\067\035\070\043\075\037\076\005\100\025\102\042" +
    "\103\033\104\010\107\052\110\022\001\002\000\066\005" +
    "\030\006\007\007\057\010\054\011\004\012\011\014\uff90" +
    "\015\uff90\016\013\021\056\022\061\023\024\024\045\056" +
    "\021\061\032\063\055\067\035\070\043\075\037\076\005" +
    "\100\025\102\042\103\033\104\010\107\052\110\022\001" +
    "\002\000\030\025\uffc4\027\uffc4\030\uffc4\031\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\072\uffc4\073\uffc4\001" +
    "\002\000\030\025\uffc5\027\uffc5\030\uffc5\031\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\072\uffc5\073\uffc5\001" +
    "\002\000\004\102\323\001\002\000\062\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\016\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\056\ufffd\061\ufffd\063\ufffd\067\ufffd" +
    "\070\ufffd\075\ufffd\076\ufffd\100\ufffd\102\ufffd\103\ufffd\104" +
    "\ufffd\107\ufffd\110\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\060\003\014\010\037\017\015\020\043\021" +
    "\035\022\026\024\046\025\050\026\016\030\040\033\045" +
    "\034\025\037\047\042\057\043\005\045\011\046\030\047" +
    "\052\050\022\051\017\052\033\053\061\054\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\043\022\026" +
    "\024\046\025\313\026\016\037\047\001\001\000\002\001" +
    "\001\000\004\023\306\001\001\000\012\045\304\046\030" +
    "\047\303\050\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\010\037\017\015\020\043" +
    "\021\035\022\026\024\046\025\050\026\016\030\040\033" +
    "\045\034\025\037\047\042\057\043\005\045\011\046\030" +
    "\047\052\050\022\052\033\053\226\054\013\001\001\000" +
    "\012\020\043\022\300\024\046\037\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\213\001\001\000\020" +
    "\006\114\012\270\013\120\014\111\015\116\016\113\044" +
    "\267\001\001\000\056\010\037\017\015\020\043\021\035" +
    "\022\026\024\046\025\050\026\016\030\040\033\045\034" +
    "\025\037\047\042\057\043\005\045\011\046\030\047\052" +
    "\050\022\051\254\052\033\053\061\054\013\001\001\000" +
    "\010\020\043\022\252\024\046\001\001\000\002\001\001" +
    "\000\004\021\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\114\012\237\013\120" +
    "\014\111\015\116\016\113\044\234\001\001\000\020\006" +
    "\114\012\233\013\120\014\111\015\116\016\113\044\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\043\022\230\024\046\001\001\000\056" +
    "\010\037\017\015\020\043\021\035\022\026\024\046\025" +
    "\050\026\016\030\040\033\045\034\025\037\047\042\057" +
    "\043\005\045\011\046\030\047\052\050\022\051\223\052" +
    "\033\053\061\054\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\043\022\175" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\114\012\117\013\120\014\111\015\116\016\113" +
    "\044\107\001\001\000\004\021\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\043" +
    "\022\066\024\046\001\001\000\010\020\043\022\104\024" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\043\022\103\024\046\001\001\000\010\020\043\022" +
    "\102\024\046\001\001\000\010\020\043\022\101\024\046" +
    "\001\001\000\010\020\043\022\100\024\046\001\001\000" +
    "\010\020\043\022\077\024\046\001\001\000\010\020\043" +
    "\022\076\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\114\013\120\014\111\015\116\016\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\144\001\001\000\004" +
    "\040\143\001\001\000\004\040\142\001\001\000\004\040" +
    "\141\001\001\000\004\040\140\001\001\000\004\040\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\160\001\001\000\004\020" +
    "\157\001\001\000\004\020\156\001\001\000\004\020\155" +
    "\001\001\000\004\020\154\001\001\000\004\020\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\174\001\001\000\004\020\173\001\001\000\004" +
    "\020\172\001\001\000\004\020\171\001\001\000\004\020" +
    "\170\001\001\000\004\020\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\043\022\204\024" +
    "\046\026\202\037\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\213\001\001\000" +
    "\010\020\043\022\222\024\046\001\001\000\010\020\043" +
    "\022\221\024\046\001\001\000\010\020\043\022\220\024" +
    "\046\001\001\000\010\020\043\022\217\024\046\001\001" +
    "\000\010\020\043\022\216\024\046\001\001\000\010\020" +
    "\043\022\215\024\046\001\001\000\010\020\043\022\214" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\010\037\017\015\020" +
    "\043\021\035\022\026\024\046\025\050\026\016\030\040" +
    "\033\045\034\025\035\224\037\047\042\057\043\005\045" +
    "\011\046\030\047\052\050\022\052\033\053\226\054\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\241\030\240\043\005" +
    "\001\001\000\004\036\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\010\037\017\015\020" +
    "\043\021\035\022\026\024\046\025\050\026\016\027\255" +
    "\030\040\033\045\034\025\037\047\042\057\043\005\045" +
    "\011\046\030\047\052\050\022\052\033\053\226\054\013" +
    "\001\001\000\002\001\001\000\004\032\260\001\001\000" +
    "\002\001\001\000\004\023\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\010\037\017\015\020\043\021\035" +
    "\022\026\024\046\025\050\026\016\030\040\033\045\034" +
    "\025\037\047\042\057\043\005\045\011\046\030\047\052" +
    "\050\022\051\275\052\033\053\061\054\013\001\001\000" +
    "\054\010\037\017\015\020\043\021\035\022\026\024\046" +
    "\025\050\026\016\030\040\033\045\034\025\037\047\042" +
    "\057\043\005\045\011\046\030\047\052\050\022\052\033" +
    "\053\226\054\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\307\001\001\000\004\023\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\200\001\001\000\002\001\001\000\056\010\037" +
    "\017\015\020\043\021\035\022\026\024\046\025\050\026" +
    "\016\030\040\033\045\034\025\037\047\042\057\043\005" +
    "\045\011\046\030\047\052\050\022\051\316\052\033\053" +
    "\061\054\013\001\001\000\054\010\037\017\015\020\043" +
    "\021\035\022\026\024\046\025\050\026\016\030\040\033" +
    "\045\034\025\037\047\042\057\043\005\045\011\046\030" +
    "\047\052\050\022\052\033\053\226\054\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
/*
	vm = new VarManager();
	cp = new CommandParameter[7];
	cpm = new CommandParameter[7][];
	com = null;
	comFind = null;

	array_path = new ArrayList<CommandParameter>();
	array_file = new ArrayList<CommandParameter>();
	array_perm = new ArrayList<CommandParameter>();
	array_data = new ArrayList<CommandParameter>();
	array_dim = new ArrayList<CommandParameter>();

	ifcc = null;
	ic = null;

	list_script = new LinkedList<ICommand>();
	todo = new LinkedList<ICommand>();

*/
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/*

	public VarManager vm;
	public CommandParameter[] cp, datap, permp, dimp ;
	public CommandParameter[][] cpm;
	public ICommand com, comFind;
	public int counter_file = 0;
	public int counter_path = 0;
	public int sublevel = 0;

	public ArrayList<CommandParameter> array_path, array_file, array_dim, array_perm, array_data;

	public LinkedList<ICommand> list_script;
	public LinkedList<ICommand> todo;
	public IFlowCommandControl ifcc;
	public ICommand ic;
	public boolean if_control = false;

	private String enviroment = "/home";

	public void add_param(CommandParameter x) throws ParserException
	{
		Utility.mf(x.getValue()+" tipo "+x.getParamType());
		if(x.getParamType()==ParamType.PATH)
			array_path.add(x);
		else
			array_file.add(x);
	}

	public void setEnviroment(String path)
	{
		enviroment = path;
		Utility.mf("CURRENT-PATH now is: " + enviroment);
	}

	public String getEnviroment()
	{
		return enviroment;
	}

	public void print_el(LinkedList<ICommand> ls)
	{
		
		Utility.mf("ITERATORE di una lista da: "+ls.size());
		for(ICommand i: ls){
			Utility.mf("==elemento");
			i.toString();
		}
	}
*/
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_stmt ::= for_head i_stmt for_tail 
            { parser.Tree.reduce(3,"for_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
		x.set_list_command(l);
		parser.list_script.clear();
		x.close_command(y);
		System.out.println("for cycle");
		RESULT = x;
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(35/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for_tail ::= Com_For_e i_Op_ps for_arg 
            { parser.Tree.reduce(3,"for_tail",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
				Utility.mf("CICLO FOR CHIUSO");
				Utility.mf("\tSUBLEVEL: "+(--parser.sublevel));
				Utility.mf("step: "+parser.vm.Auto_Neg(y,s));
				RESULT = parser.vm.Auto_Neg(y,s);
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(21/*for_tail*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // i_Op_ps ::= Minus 
            { parser.Tree.reduce(1,"i_Op_ps",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 						*/
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // i_Op_ps ::= Plus 
            { parser.Tree.reduce(1,"i_Op_ps",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 						*/
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // for_head ::= Com_For for_arg for_arg for_arg Com_For_m EL 
            { parser.Tree.reduce(6,"for_head",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		/*
				System.out.println("FOR HEAD variabili "+x.getValue()+"\t"+y.getValue()+"\t"+z.getValue());
				for_command fc = new for_command(x,y,z,parser.vm);
				Utility.mf("\tSUBLEVEL: "+(++parser.sublevel));
				RESULT = fc;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(36/*for_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_arg ::= ID 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); */
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_arg ::= Vint 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._float, x.floatValue()); 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_arg ::= Int 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new myVar(myVar._int, x.intValue()); 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_arg ::= Var 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.extractVar(x); 
					System.out.println("Var: "+x); */
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_stmt ::= if_head Com_If_e 
            { parser.Tree.reduce(2,"if_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
				x.close_command();
				Utility.mf("IF CHIUSO");
				RESULT = x;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if_stmt ::= if_head Com_If_m EL i_stmt Com_If_e 
            { parser.Tree.reduce(5,"if_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
				x.set_list_command_else(l);
				parser.list_script.clear();
				x.close_command(new myVar());
				Utility.mf("IF ELSE CHIUSO");
				RESULT = x;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_head ::= Com_If conf_exp Com_If_2 EL i_stmt 
            { parser.Tree.reduce(5,"if_head",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				if_command ic = new if_command(x);
				ic.set_list_command(l);
				parser.list_script.clear();
				Utility.mf("IF HEAD condizione: ");
				Utility.mf("\tSUBLEVEL: "+parser.sublevel);
				RESULT = ic;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(38/*if_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // conf_exp ::= conf_exp cond_if logic_stmt 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				Utility.mf("IF: CONF_EXP with AND/OR ...");
				RESULT = parser.vm.makeOper(x,y,s);
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // conf_exp ::= conf_exp cond_if arit_stmt 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // conf_exp ::= conf_exp cond_if conf 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // conf_exp ::= C_Not conf 
            { parser.Tree.reduce(2,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // conf_exp ::= logic_stmt 
            { parser.Tree.reduce(1,"conf_exp",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				Utility.mf("IF LOGIC STMT -> CONF_EXP ");
				RESULT = s;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // conf_exp ::= conf 
            { parser.Tree.reduce(1,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conf ::= arit_stmt cond arit_stmt 
            { parser.Tree.reduce(3,"conf",0);
              Object RESULT = null;
		/*
				
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(29/*conf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cond_if ::= C_Andd 
            { parser.Tree.reduce(1,"cond_if",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = s; */
              CUP$parser$result = new java_cup.runtime.Symbol(31/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cond_if ::= C_Orr 
            { parser.Tree.reduce(1,"cond_if",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
				Utility.mf("IF C_Orr: ");
				RESULT = s; */
              CUP$parser$result = new java_cup.runtime.Symbol(31/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // i_arg ::= Bool 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._bool, new Boolean(x)); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // i_arg ::= FUnit 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // i_arg ::= IUnit 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // i_arg ::= Str 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* System.out.println("str: "+x); 
					RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // i_arg ::= Vint 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._float, x.floatValue()); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // i_arg ::= Int 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new myVar(myVar._int, x.intValue()); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // date_arg ::= Data 
            { parser.Tree.reduce(1,"date_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x;	*/
              CUP$parser$result = new java_cup.runtime.Symbol(30/*date_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bool_op ::= C_Or 
            { parser.Tree.reduce(1,"bool_op",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT =x; */
              CUP$parser$result = new java_cup.runtime.Symbol(28/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bool_op ::= C_And 
            { parser.Tree.reduce(1,"bool_op",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT =x; */
              CUP$parser$result = new java_cup.runtime.Symbol(28/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cc_date_cond ::= _where Date_Criteria C_Ug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria UG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.UG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cc_date_cond ::= _where Date_Criteria Diver date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria DIV raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.DIV);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cc_date_cond ::= _where Date_Criteria Maggug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MAGUG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAGUG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cc_date_cond ::= _where Date_Criteria Minug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MINUG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MINUG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cc_date_cond ::= _where Date_Criteria Magg date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MAG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cc_date_cond ::= _where Date_Criteria Min date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MIN raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MIN);					
							*/
              CUP$parser$result = new java_cup.runtime.Symbol(9/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cc_permission_cond ::= _where Permission_Criteria C_Ug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto permesso = : OK");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.UG);			
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cc_permission_cond ::= _where Permission_Criteria Diver i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.DIV);
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cc_permission_cond ::= _where Permission_Criteria Maggug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MAGUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cc_permission_cond ::= _where Permission_Criteria Minug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MINUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cc_permission_cond ::= _where Permission_Criteria Magg i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MAG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cc_permission_cond ::= _where Permission_Criteria Min i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MIN);
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cc_dimension_cond ::= _where Dimension_Criteria C_Ug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto OK");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.UG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cc_dimension_cond ::= _where Dimension_Criteria Diver i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.DIV);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cc_dimension_cond ::= _where Dimension_Criteria Maggug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MAGUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cc_dimension_cond ::= _where Dimension_Criteria Minug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MINUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cc_dimension_cond ::= _where Dimension_Criteria Magg i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MAG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cc_dimension_cond ::= _where Dimension_Criteria Min i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto valore i_arg ricevuto: "+a.getStringValue());
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MIN);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cc_conds ::= cc_dimension_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_dim.add(parser.cp[6]);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cc_conds ::= cc_date_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_data.add(parser.cp[4]);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cc_conds ::= cc_permission_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_perm.add(parser.cp[5]);
//					parser.cp[5] = null;
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // i_cc_conds ::= i_cc_conds bool_op cc_conds 
            { parser.Tree.reduce(3,"i_cc_conds",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // i_cc_conds ::= cc_conds 
            { parser.Tree.reduce(1,"i_cc_conds",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _where ::= Where 
            { parser.Tree.reduce(1,"_where",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _where ::= 
            { parser.Tree.reduce(0,"_where",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comm_find_stmt_2 ::= comm_find_stmt_2 Name 
            { parser.Tree.reduce(2,"comm_find_stmt_2",0);
              Object RESULT = null;
		/*
					Utility.mf("COMANDO RECURSIVO! rilevato: SENZA PARAM!"); 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comm_find_stmt_2 ::= comm_find_stmt_2 Name param 
            { parser.Tree.reduce(3,"comm_find_stmt_2",0);
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("COMANDO RECURSIVO! rilevato:  CON PARAM"); 
					parser.cp[3]=p; 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comm_find_stmt_2 ::= commands 
            { parser.Tree.reduce(1,"comm_find_stmt_2",0);
              Object RESULT = null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("COMANDO RICORSIVO! rilevato: "+sc);
					parser.cpm[5] = new CommandParameter[]{new CommandParameter(null,sc,null)};
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comm_find_stmt ::= comm_find_stmt Com_Ex comm_find_stmt_2 Pv 
            { parser.Tree.reduce(4,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comm_find_stmt ::= comm_find_stmt i_cc_conds 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comm_find_stmt ::= comm_find_stmt param 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("passo dentro comm_find_stmt");
					parser.add_param(x);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comm_find_stmt ::= Com_Find i_cc_conds 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comm_find_stmt ::= Com_Find param 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("_FIND_!");
					parser.comFind = new FINDCommand(parser.getEnviroment());

//					parser.counter_file = 0; //posso usare una arraylist e poi convertire in array
//					parser.counter_path = 0;

					parser.add_param(x);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(6/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LS_stmt ::= LS_stmt Obj 
            { parser.Tree.reduce(2,"LS_stmt",0);
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("LS obj!");
					parser.cp[1]=new CommandParameter(ParamType.BINARIO,o,null);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LS_stmt ::= LS_stmt Order 
            { parser.Tree.reduce(2,"LS_stmt",0);
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("LS Order!");
					parser.cp[0]=new CommandParameter(ParamType.BINARIO,o,null);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LS_stmt ::= Com_Ls 
            { parser.Tree.reduce(1,"LS_stmt",0);
              Object RESULT = null;
		/* 
					Utility.mf("LS!");
					parser.com = new LSCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // commands ::= LS_stmt 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/*RESULT= "ls";*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // commands ::= Com_Cp 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("CP!");
					RESULT= "cp";
					parser.com = new CPCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // commands ::= Com_Rm 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("RM!");
					RESULT= "rm";
					parser.com = new RMCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // commands ::= Com_Mov 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("MV!");
					RESULT= "mv";
					parser.com = new MVCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // commands ::= Com_MKDir 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("MKDIR!");
					RESULT= "mkdir";
					parser.com = new MKDCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // commands ::= Com_Cd 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("CD!");
					RESULT= "cd";
					parser.com = new CDCommand(parser.getEnviroment(),parser);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sh_stmt ::= sh_stmt i_cc_conds 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sh_stmt ::= sh_stmt param 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.cp[3]=p; */
              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sh_stmt ::= commands i_cc_conds 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sh_stmt ::= commands param 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.cp[2]=p; */
              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param ::= Ext 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.FILE,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param ::= File 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.FILE,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param ::= Path 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.PATH,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arit_arg ::= i_arg 
            { parser.Tree.reduce(1,"arit_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 
							//System.out.println("i_arg a arit_arg: "+x.toString());
							//parser.vm.add_tmp_var(x);
						*/
              CUP$parser$result = new java_cup.runtime.Symbol(18/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arit_arg ::= Var 
            { parser.Tree.reduce(1,"arit_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.extractVar(x); 
							//System.out.println("Var a arit_arg "+x); 
						*/
              CUP$parser$result = new java_cup.runtime.Symbol(18/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logic_stmt ::= arit_stmt Diver arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLODiv(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logic_stmt ::= arit_stmt C_Ugg arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOUg(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logic_stmt ::= arit_stmt Minug arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMiU(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logic_stmt ::= arit_stmt Min arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMin(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logic_stmt ::= arit_stmt Maggug arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMaU(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logic_stmt ::= arit_stmt Magg arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMag(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arit_stmt ::= C_Not arit_stmt 
            { parser.Tree.reduce(2,"arit_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.makeSOper(x,s); */
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arit_stmt ::= RO arit_stmt RC 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/* RESULT = x; 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arit_stmt ::= arit_arg 
            { parser.Tree.reduce(1,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 
							//System.out.println("da arit_arg a arit_stmt");			
						*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arit_stmt ::= arit_stmt C_Or arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arit_stmt ::= arit_stmt C_And arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arit_stmt ::= arit_stmt Minus arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arit_stmt ::= arit_stmt Plus arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_stmt ::= arit_stmt Div arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_stmt ::= arit_stmt Times arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	//System.out.println(s);
			//x.toString(); 
			//System.out.println("segno operazione: "+s); //y.toString(); 
			myVar temp = parser.vm.makeOper(((myVar)x),((myVar)y),s);
			RESULT = temp; 							*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_stmt ::= Minus arit_stmt 
            { parser.Tree.reduce(2,"arit_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.makeOper(x,new myVar(x.getType(),new Integer(-1)),"*"); */
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // init_stmt ::= init_stmt Var 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(new myVar(x)); Utility.mf("var: "+x.toString());*/
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // init_stmt ::= init_stmt assig_stmt 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(x);Utility.mf("assegnazione: "+x.toString());*/
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_stmt ::= Com_Str Var 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(new myVar(x)); Utility.mf("DICHIARAZIONI\nvar: "+x.toString());*/
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_stmt ::= Com_Str assig_stmt 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(x); Utility.mf("DICHIARAZIONI:\nassegnazione: "+x.toString()); */
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assig_stmt ::= Var C_Ug arit_stmt 
            { parser.Tree.reduce(3,"assig_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*                                              
						myVar vx = new myVar();
						vx.set(y);
						vx.setName(x); 											
						RESULT = vx;
						//Utility.mf("fine da arit_stmt a assig_stmt");
						*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // str_stmt ::= str_stmt if_stmt 
            { parser.Tree.reduce(2,"str_stmt",0);
              Object RESULT = null;
		/* Utility.mf("raccolto IF stmt interno"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_stmt ::= str_stmt for_stmt 
            { parser.Tree.reduce(2,"str_stmt",0);
              Object RESULT = null;
		/* Utility.mf("raccolto FOR stmt interno"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_stmt ::= for_stmt 
            { parser.Tree.reduce(1,"str_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
						//x.print_parameters(); nullpointerexc
						Utility.mf("raccolto FOR stmt"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_stmt ::= if_stmt 
            { parser.Tree.reduce(1,"str_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
						((if_command)x).print_parameters();
						Utility.mf("raccolto IF stmt"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= EL 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= conf_exp EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= Com_P arit_stmt EL 
            { parser.Tree.reduce(3,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= throw_s EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= script EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		/*parser.print_el(parser.list_script);*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= comm_find_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		/*
					System.out.println("raccolto sh stmt = FIND");
					parser.cpm[0] = new CommandParameter[parser.array_file.size()];
					parser.cpm[1] = new CommandParameter[parser.array_path.size()];
					parser.cpm[2] = new CommandParameter[parser.array_perm.size()];
					parser.cpm[3] = new CommandParameter[parser.array_data.size()];
					parser.cpm[4] = new CommandParameter[parser.array_dim.size()];

					System.out.println("dopo onit");
					parser.cpm[0] = parser.array_file.toArray(parser.cpm[0]);
					parser.cpm[1] = parser.array_path.toArray(parser.cpm[1]);
					parser.cpm[2] = parser.array_perm.toArray(parser.cpm[2]);
					parser.cpm[3] = parser.array_data.toArray(parser.cpm[3]);
					parser.cpm[4] = parser.array_dim.toArray(parser.cpm[4]);

					//parser.cpm[6]=new CommandParameter[7];

					System.out.println("dopo init 2'");

					Utility.mf("SETCOMMANDPARAMETER");
					parser.comFind.setCommandParameter(parser.cpm);
					Utility.mf("EXEC");
					parser.comFind.exec();
					parser.array_file.clear();
					parser.array_path.clear();
					parser.array_perm.clear();
					parser.array_data.clear();
					parser.array_dim.clear();
					
					Utility.mf(parser.comFind.getCommandStringResult());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= sh_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					System.out.println("raccolto sh stmt: parameter setting"); 
					parser.cp[0] = parser.array_file.get(0);
					parser.cp[1] = parser.array_path.get(0);
					parser.cp[2] = parser.array_perm.get(0);
					parser.cp[3] = parser.array_data.get(0);
					parser.cp[4] = parser.array_dim.get(0);
					for(int i=0; i<7; i++)
						if(parser.cp[i]==null)
							Utility.mf("*niente*");
						else
							Utility.mf("param["+i+"]: "+parser.cp[i].getValue());
					parser.com.setCommandParameter(parser.cp);
					parser.com.exec();
					Utility.mf(parser.com.getCommandStringResult());
					
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= str_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					parser.list_script.add(s);
					Utility.mf("risolto flow control statement -> INSERITO IN LIST SCRIPT"); 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= assig_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					if(parser.vm.extractVar(x.getName())!=null){
						parser.vm.assig(x);
						Utility.mf(x.toString());
					}
					else Utility.mf("VARIABILE INESISTENTE");
					Utility.mf("ASSIG STMT RACCOLTO");
					RESULT = (ICommand)x; */
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= init_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*  Utility.mf("INIT STMT RACCOLTO");	*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // i_stmt ::= i_stmt stmt 
            { parser.Tree.reduce(2,"i_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_stmt ::= stmt 
            { parser.Tree.reduce(1,"i_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*//RE-Init
					parser.todo.add(s);
                                        
					parser.cp = new CommandParameter[7];
					parser.cpm = new CommandParameter[7][];
					parser.com = null;
					parser.comFind = null;
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(39/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // end_s ::= End_S File 
            { parser.Tree.reduce(2,"end_s",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("FINE SCRIPT");
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(27/*end_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // throw_s ::= Throw_S File 
            { parser.Tree.reduce(2,"throw_s",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*throw_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_s ::= Start_S File EL 
            { parser.Tree.reduce(3,"start_s",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					Utility.mf("INIZIO SCRIPT");
					parser.list_script = new LinkedList<ICommand>();
					//parser.list_script.add(s);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(25/*start_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= start_s i_stmt end_s 
            { parser.Tree.reduce(3,"script",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					Utility.mf("CHIUDO SCRIPT");
					//salvataggio script
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(13/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= i_stmt 
            { parser.Tree.reduce(1,"S",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= 
            { parser.Tree.reduce(0,"S",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

