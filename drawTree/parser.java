
//----------------------------------------------------
// The following code was generated by CUP v0.10k
<<<<<<< HEAD
// Wed Sep 14 17:52:41 CEST 2011
=======
// Wed Sep 14 19:42:28 CEST 2011
>>>>>>> 09c27d493026754743e3937dcb2b1a33114dc0e4
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
<<<<<<< HEAD
  * @version Wed Sep 14 17:52:41 CEST 2011
=======
  * @version Wed Sep 14 19:42:28 CEST 2011
>>>>>>> 09c27d493026754743e3937dcb2b1a33114dc0e4
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\020\005\000\002\033\005\000\002\034\004" +
    "\000\002\035\004\000\002\051\003\000\002\051\004\000" +
    "\002\053\004\000\002\053\004\000\002\053\004\000\002" +
    "\053\004\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\005\000\002\053\004\000\002\053\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\004\000" +
    "\002\054\004\000\002\004\005\000\002\004\003\000\002" +
    "\052\004\000\002\052\004\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\004\000\002\022\003\000" +
    "\002\022\005\000\002\022\004\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\024\003\000\002\024\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\043\003\000\002\043\004\000\002\043\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\006\000\002\012\003\000\002\012" +
    "\005\000\002\012\004\000\002\007\002\000\002\007\003" +
    "\000\002\013\003\000\002\013\005\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\016\006\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\014\006\000\002\014\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\036\003\000\002\036\003\000\002\040\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\041\003\000\002\041\003\000\002\037\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\050\007\000" +
    "\002\047\007\000\002\047\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\046" +
    "\010\000\002\032\003\000\002\032\003\000\002\027\005" +
    "\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\064\002\000\005\030\006\007\007\057\010" +
    "\054\011\004\012\010\016\013\021\056\022\061\023\024" +
    "\024\045\057\021\060\022\063\032\065\055\071\035\072" +
    "\043\077\037\100\005\102\025\104\041\105\033\106\011" +
    "\111\052\001\002\000\024\026\uffcd\030\uffcd\031\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\042\uffcd\074\uffcd\075\uffcd\001\002" +
    "\000\004\030\321\001\002\000\030\026\uffc8\030\uffc8\031" +
    "\uffc8\032\320\036\uffc8\037\uffc8\040\uffc8\041\317\042\uffc8" +
    "\074\uffc8\075\uffc8\001\002\000\024\026\uffca\030\uffca\031" +
    "\uffca\036\uffca\037\uffca\040\uffca\042\uffca\074\uffca\075\uffca" +
    "\001\002\000\026\057\021\060\070\063\032\065\055\071" +
    "\035\072\043\102\025\105\033\106\011\111\052\001\002" +
    "\000\066\004\uff9f\013\uff9f\026\uff9f\030\uff9f\031\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\042\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\060\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\104\uff9f\001\002\000\010\012\uffed\016\uffed\104\uffed\001" +
    "\002\000\012\027\262\060\266\105\265\106\264\001\002" +
    "\000\010\012\010\016\013\104\305\001\002\000\004\002" +
    "\302\001\002\000\004\104\301\001\002\000\012\013\uff96" +
    "\055\uff96\056\uff96\104\uff96\001\002\000\064\002\uffff\005" +
    "\030\006\007\007\057\010\054\011\004\012\010\016\013" +
    "\021\056\022\061\023\024\024\045\057\021\060\022\063" +
    "\032\065\055\071\035\072\043\077\037\100\005\102\025" +
    "\104\041\105\033\106\011\111\052\001\002\000\026\057" +
    "\066\060\070\063\032\065\055\071\035\072\043\102\025" +
    "\105\033\106\011\111\052\001\002\000\036\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\065\052\uffd6\053\uffd6" +
    "\054\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\104\uffe9\001" +
    "\002\000\006\014\273\015\272\001\002\000\024\026\uffcb" +
    "\030\uffcb\031\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\074" +
    "\uffcb\075\uffcb\001\002\000\066\004\uff9e\013\uff9e\026\uff9e" +
    "\030\uff9e\031\uff9e\036\uff9e\037\uff9e\040\uff9e\042\uff9e\044" +
    "\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e" +
    "\054\uff9e\055\uff9e\056\uff9e\060\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\104\uff9e\001\002\000\004\104\271" +
    "\001\002\000\032\044\207\045\214\046\212\047\211\050" +
    "\206\052\076\053\072\054\210\065\071\066\075\067\073" +
    "\070\074\001\002\000\020\026\106\030\115\031\111\036" +
    "\uffbc\037\uffbc\040\uffbc\042\107\001\002\000\062\005\030" +
    "\006\007\007\057\010\054\011\004\012\010\016\013\021" +
    "\056\022\061\023\024\024\045\057\021\060\022\063\032" +
    "\065\055\071\035\072\043\077\037\100\005\102\025\104" +
    "\041\105\033\106\011\111\052\001\002\000\026\057\066" +
    "\060\070\063\032\065\055\071\035\072\043\102\025\105" +
    "\033\106\011\111\052\001\002\000\066\004\uffa0\013\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\036\uffa0\037\uffa0\040\uffa0\042" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\060\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\104\uffa0\001\002\000\006" +
    "\060\064\104\251\001\002\000\066\004\uff9c\013\uff9c\026" +
    "\uff9c\030\uff9c\031\uff9c\036\uff9c\037\uff9c\040\uff9c\042\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\104\uff9c\001\002\000\004\104" +
    "\247\001\002\000\004\030\246\001\002\000\024\004\237" +
    "\026\106\030\115\031\111\036\uffbc\037\uffbc\040\uffbc\042" +
    "\107\104\236\001\002\000\074\002\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\021\uffef\022\uffef\023\uffef\024\uffef\057\uffef" +
    "\060\uffef\063\uffef\065\uffef\071\uffef\072\uffef\077\uffef\100" +
    "\uffef\101\uffef\102\uffef\104\uffef\105\uffef\106\uffef\111\uffef" +
    "\001\002\000\020\026\106\030\115\031\111\036\uffbc\037" +
    "\uffbc\040\uffbc\042\107\001\002\000\066\004\uff9d\013\uff9d" +
    "\026\uff9d\030\uff9d\031\uff9d\036\uff9d\037\uff9d\040\uff9d\042" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\060\uff9d\064\uff9d\065" +
    "\uff9d\066\uff9d\067\uff9d\070\uff9d\104\uff9d\001\002\000\046" +
    "\013\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\070\uffd5\104\uffd5\001\002\000" +
    "\026\057\066\060\070\063\032\065\055\071\035\072\043" +
    "\102\025\105\033\106\011\111\052\001\002\000\062\005" +
    "\030\006\007\007\057\010\054\011\004\012\010\016\013" +
    "\021\056\022\061\023\024\024\045\057\021\060\022\063" +
    "\032\065\055\071\035\072\043\077\037\100\005\102\025" +
    "\104\041\105\033\106\011\111\052\001\002\000\046\013" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\070\uffdf\104\uffdf\001\002\000\012" +
    "\013\uff97\055\uff97\056\uff97\104\uff97\001\002\000\010\055" +
    "\177\056\200\104\202\001\002\000\066\004\uff9b\013\uff9b" +
    "\026\uff9b\030\uff9b\031\uff9b\036\uff9b\037\uff9b\040\uff9b\042" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\060\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\104\uff9b\001\002\000\010" +
    "\012\uffee\016\uffee\104\uffee\001\002\000\024\026\uffc9\030" +
    "\uffc9\031\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9\074\uffc9" +
    "\075\uffc9\001\002\000\026\057\066\060\070\063\032\065" +
    "\055\071\035\072\043\102\025\105\033\106\011\111\052" +
    "\001\002\000\030\026\uffc7\030\uffc7\031\uffc7\032\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\074\uffc7\075\uffc7" +
    "\001\002\000\024\026\uffcc\030\uffcc\031\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\042\uffcc\074\uffcc\075\uffcc\001\002\000\022" +
    "\026\106\030\115\031\111\036\uffbc\037\uffbc\040\uffbc\042" +
    "\107\104\116\001\002\000\004\060\064\001\002\000\074" +
    "\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\057\ufffa\060\ufffa\063\ufffa\065\ufffa\071" +
    "\ufffa\072\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\104\ufffa" +
    "\105\ufffa\106\ufffa\111\ufffa\001\002\000\006\060\uffe8\104" +
    "\uffe8\001\002\000\010\051\065\060\uffe9\104\uffe9\001\002" +
    "\000\026\057\066\060\070\063\032\065\055\071\035\072" +
    "\043\102\025\105\033\106\011\111\052\001\002\000\026" +
    "\057\066\060\070\063\032\065\055\071\035\072\043\102" +
    "\025\105\033\106\011\111\052\001\002\000\022\052\076" +
    "\053\072\060\uffea\065\071\066\075\067\073\070\074\104" +
    "\uffea\001\002\000\046\013\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\060\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6" +
    "\104\uffd6\001\002\000\026\057\066\060\070\063\032\065" +
    "\055\071\035\072\043\102\025\105\033\106\011\111\052" +
    "\001\002\000\026\057\066\060\070\063\032\065\055\071" +
    "\035\072\043\102\025\105\033\106\011\111\052\001\002" +
    "\000\026\057\066\060\070\063\032\065\055\071\035\072" +
    "\043\102\025\105\033\106\011\111\052\001\002\000\026" +
    "\057\066\060\070\063\032\065\055\071\035\072\043\102" +
    "\025\105\033\106\011\111\052\001\002\000\026\057\066" +
    "\060\070\063\032\065\055\071\035\072\043\102\025\105" +
    "\033\106\011\111\052\001\002\000\026\057\066\060\070" +
    "\063\032\065\055\071\035\072\043\102\025\105\033\106" +
    "\011\111\052\001\002\000\046\013\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\052\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\060\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\070\uffe2\104\uffe2\001\002\000\046\013\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\052\076\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\060\uffe4\064\uffe4\065\uffe4\066\uffe4\067" +
    "\073\070\074\104\uffe4\001\002\000\046\013\uffe5\044\uffe5" +
    "\045\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\060\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\104\uffe5\001\002\000\046\013\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\060\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\104\uffe6\001\002\000\046\013\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\076\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\060\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\073\070\074\104\uffe1\001\002\000\046\013" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\076" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\060\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\067\073\070\074\104\uffe3\001\002\000\046" +
    "\013\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\070\uffdd\104\uffdd\001\002\000" +
    "\030\004\uffd2\026\uffd2\030\uffd2\031\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\042\uffd2\074\uffd2\075\uffd2\104\uffd2\001\002\000" +
    "\010\036\uffbb\037\uffbb\040\uffbb\001\002\000\022\026\uffcf" +
    "\030\uffcf\031\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\104" +
    "\uffcf\001\002\000\030\004\uffd4\026\uffd4\030\uffd4\031\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\042\uffd4\074\uffd4\075\uffd4\104" +
    "\uffd4\001\002\000\030\004\uffb8\026\uffb8\030\uffb8\031\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\042\uffb8\052\uffb8\053\uffb8\104" +
    "\uffb8\001\002\000\030\004\uffba\026\uffba\030\uffba\031\uffba" +
    "\036\uffba\037\uffba\040\uffba\042\uffba\052\uffba\053\uffba\104" +
    "\uffba\001\002\000\010\036\130\037\126\040\127\001\002" +
    "\000\030\004\uffd3\026\uffd3\030\uffd3\031\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\042\uffd3\074\uffd3\075\uffd3\104\uffd3\001\002" +
    "\000\074\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\057\ufff5\060\ufff5\063\ufff5\065" +
    "\ufff5\071\ufff5\072\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5" +
    "\104\ufff5\105\ufff5\106\ufff5\111\ufff5\001\002\000\030\004" +
    "\uffb6\026\uffb6\030\uffb6\031\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\042\uffb6\052\uffb6\053\uffb6\104\uffb6\001\002\000\030\004" +
    "\uffb7\026\uffb7\030\uffb7\031\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\042\uffb7\052\uffb7\053\uffb7\104\uffb7\001\002\000\026\026" +
    "\uffce\030\uffce\031\uffce\036\uffce\037\uffce\040\uffce\042\uffce" +
    "\052\123\053\122\104\uffce\001\002\000\012\036\uffa2\037" +
    "\uffa2\040\uffa2\042\uffa2\001\002\000\012\036\uffa3\037\uffa3" +
    "\040\uffa3\042\uffa3\001\002\000\012\036\uffbc\037\uffbc\040" +
    "\uffbc\042\107\001\002\000\030\004\uffb9\026\uffb9\030\uffb9" +
    "\031\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\052\uffb9\053" +
    "\uffb9\104\uffb9\001\002\000\016\044\162\045\163\046\164" +
    "\047\166\050\167\051\165\001\002\000\016\044\147\045" +
    "\146\046\150\047\152\050\153\051\151\001\002\000\016" +
    "\044\131\045\132\046\134\047\135\050\136\051\133\001" +
    "\002\000\004\033\140\001\002\000\004\033\140\001\002" +
    "\000\004\033\140\001\002\000\004\033\140\001\002\000" +
    "\004\033\140\001\002\000\004\033\140\001\002\000\030" +
    "\004\uffa5\026\uffa5\030\uffa5\031\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\042\uffa5\052\uffa5\053\uffa5\104\uffa5\001\002\000\030" +
    "\004\uffa1\026\uffa1\030\uffa1\031\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\042\uffa1\052\uffa1\053\uffa1\104\uffa1\001\002\000\030" +
    "\004\uffa6\026\uffa6\030\uffa6\031\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\042\uffa6\052\uffa6\053\uffa6\104\uffa6\001\002\000\030" +
    "\004\uffa7\026\uffa7\030\uffa7\031\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\042\uffa7\052\uffa7\053\uffa7\104\uffa7\001\002\000\030" +
    "\004\uffa4\026\uffa4\030\uffa4\031\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\042\uffa4\052\uffa4\053\uffa4\104\uffa4\001\002\000\030" +
    "\004\uffa8\026\uffa8\030\uffa8\031\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\042\uffa8\052\uffa8\053\uffa8\104\uffa8\001\002\000\030" +
    "\004\uffa9\026\uffa9\030\uffa9\031\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\042\uffa9\052\uffa9\053\uffa9\104\uffa9\001\002\000\016" +
    "\071\035\072\043\102\025\105\033\106\011\111\052\001" +
    "\002\000\016\071\035\072\043\102\025\105\033\106\011" +
    "\111\052\001\002\000\016\071\035\072\043\102\025\105" +
    "\033\106\011\111\052\001\002\000\016\071\035\072\043" +
    "\102\025\105\033\106\011\111\052\001\002\000\016\071" +
    "\035\072\043\102\025\105\033\106\011\111\052\001\002" +
    "\000\016\071\035\072\043\102\025\105\033\106\011\111" +
    "\052\001\002\000\030\004\uffb1\026\uffb1\030\uffb1\031\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\042\uffb1\052\uffb1\053\uffb1\104" +
    "\uffb1\001\002\000\030\004\uffb2\026\uffb2\030\uffb2\031\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\042\uffb2\052\uffb2\053\uffb2\104" +
    "\uffb2\001\002\000\030\004\uffb0\026\uffb0\030\uffb0\031\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\042\uffb0\052\uffb0\053\uffb0\104" +
    "\uffb0\001\002\000\030\004\uffb3\026\uffb3\030\uffb3\031\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\042\uffb3\052\uffb3\053\uffb3\104" +
    "\uffb3\001\002\000\030\004\uffb5\026\uffb5\030\uffb5\031\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\042\uffb5\052\uffb5\053\uffb5\104" +
    "\uffb5\001\002\000\030\004\uffb4\026\uffb4\030\uffb4\031\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\042\uffb4\052\uffb4\053\uffb4\104" +
    "\uffb4\001\002\000\016\071\035\072\043\102\025\105\033" +
    "\106\011\111\052\001\002\000\016\071\035\072\043\102" +
    "\025\105\033\106\011\111\052\001\002\000\016\071\035" +
    "\072\043\102\025\105\033\106\011\111\052\001\002\000" +
    "\016\071\035\072\043\102\025\105\033\106\011\111\052" +
    "\001\002\000\016\071\035\072\043\102\025\105\033\106" +
    "\011\111\052\001\002\000\016\071\035\072\043\102\025" +
    "\105\033\106\011\111\052\001\002\000\030\004\uffab\026" +
    "\uffab\030\uffab\031\uffab\036\uffab\037\uffab\040\uffab\042\uffab" +
    "\052\uffab\053\uffab\104\uffab\001\002\000\030\004\uffac\026" +
    "\uffac\030\uffac\031\uffac\036\uffac\037\uffac\040\uffac\042\uffac" +
    "\052\uffac\053\uffac\104\uffac\001\002\000\030\004\uffaa\026" +
    "\uffaa\030\uffaa\031\uffaa\036\uffaa\037\uffaa\040\uffaa\042\uffaa" +
    "\052\uffaa\053\uffaa\104\uffaa\001\002\000\030\004\uffad\026" +
    "\uffad\030\uffad\031\uffad\036\uffad\037\uffad\040\uffad\042\uffad" +
    "\052\uffad\053\uffad\104\uffad\001\002\000\030\004\uffae\026" +
    "\uffae\030\uffae\031\uffae\036\uffae\037\uffae\040\uffae\042\uffae" +
    "\052\uffae\053\uffae\104\uffae\001\002\000\030\004\uffaf\026" +
    "\uffaf\030\uffaf\031\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf" +
    "\052\uffaf\053\uffaf\104\uffaf\001\002\000\046\013\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\052\076\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\060\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\073\070\074\104\uffe0\001\002\000\026\057\uff99" +
    "\060\uff99\063\uff99\065\uff99\071\uff99\072\uff99\102\uff99\105" +
    "\uff99\106\uff99\111\uff99\001\002\000\026\057\uff9a\060\uff9a" +
    "\063\uff9a\065\uff9a\071\uff9a\072\uff9a\102\uff9a\105\uff9a\106" +
    "\uff9a\111\uff9a\001\002\000\026\057\066\060\070\063\032" +
    "\065\055\071\035\072\043\102\025\105\033\106\011\111" +
    "\052\001\002\000\074\002\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\057\ufff0\060\ufff0" +
    "\063\ufff0\065\ufff0\071\ufff0\072\ufff0\077\ufff0\100\ufff0\101" +
    "\ufff0\102\ufff0\104\ufff0\105\ufff0\106\ufff0\111\ufff0\001\002" +
    "\000\012\013\uff92\055\uff92\056\uff92\104\uff92\001\002\000" +
    "\012\013\uff94\055\uff94\056\uff94\104\uff94\001\002\000\042" +
    "\013\uff93\044\207\045\214\046\212\047\211\050\206\052" +
    "\076\053\072\054\210\055\uff93\056\uff93\065\071\066\075" +
    "\067\073\070\074\104\uff93\001\002\000\026\057\066\060" +
    "\070\063\032\065\055\071\035\072\043\102\025\105\033" +
    "\106\011\111\052\001\002\000\026\057\066\060\070\063" +
    "\032\065\055\071\035\072\043\102\025\105\033\106\011" +
    "\111\052\001\002\000\026\057\066\060\070\063\032\065" +
    "\055\071\035\072\043\102\025\105\033\106\011\111\052" +
    "\001\002\000\026\057\066\060\070\063\032\065\055\071" +
    "\035\072\043\102\025\105\033\106\011\111\052\001\002" +
    "\000\026\057\066\060\070\063\032\065\055\071\035\072" +
    "\043\102\025\105\033\106\011\111\052\001\002\000\026" +
    "\057\066\060\070\063\032\065\055\071\035\072\043\102" +
    "\025\105\033\106\011\111\052\001\002\000\026\057\066" +
    "\060\070\063\032\065\055\071\035\072\043\102\025\105" +
    "\033\106\011\111\052\001\002\000\026\013\uffdc\052\076" +
    "\053\072\055\uffdc\056\uffdc\065\071\066\075\067\073\070" +
    "\074\104\uffdc\001\002\000\026\013\uff98\052\076\053\072" +
    "\055\uff98\056\uff98\065\071\066\075\067\073\070\074\104" +
    "\uff98\001\002\000\026\013\uffd9\052\076\053\072\055\uffd9" +
    "\056\uffd9\065\071\066\075\067\073\070\074\104\uffd9\001" +
    "\002\000\026\013\uffdb\052\076\053\072\055\uffdb\056\uffdb" +
    "\065\071\066\075\067\073\070\074\104\uffdb\001\002\000" +
    "\026\013\uffd8\052\076\053\072\055\uffd8\056\uffd8\065\071" +
    "\066\075\067\073\070\074\104\uffd8\001\002\000\026\013" +
    "\uffda\052\076\053\072\055\uffda\056\uffda\065\071\066\075" +
    "\067\073\070\074\104\uffda\001\002\000\026\013\uffd7\052" +
    "\076\053\072\055\uffd7\056\uffd7\065\071\066\075\067\073" +
    "\070\074\104\uffd7\001\002\000\064\005\030\006\007\007" +
    "\057\010\054\011\004\012\010\016\013\021\056\022\061" +
    "\023\024\024\045\057\021\060\022\063\032\065\055\071" +
    "\035\072\043\077\037\100\005\101\226\102\025\104\041" +
    "\105\033\106\011\111\052\001\002\000\004\104\ufffe\001" +
    "\002\000\004\030\230\001\002\000\074\002\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\057\ufff9\060\ufff9\063\ufff9\065\ufff9\071\ufff9\072\ufff9\077" +
    "\ufff9\100\ufff9\101\ufff9\102\ufff9\104\ufff9\105\ufff9\106\ufff9" +
    "\111\ufff9\001\002\000\004\104\ufffb\001\002\000\020\052" +
    "\076\053\072\065\071\066\075\067\073\070\074\104\232" +
    "\001\002\000\074\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\057\ufff1\060\ufff1\063" +
    "\ufff1\065\ufff1\071\ufff1\072\ufff1\077\ufff1\100\ufff1\101\ufff1" +
    "\102\ufff1\104\ufff1\105\ufff1\106\ufff1\111\ufff1\001\002\000" +
    "\022\026\uffd1\030\uffd1\031\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\042\uffd1\104\uffd1\001\002\000\026\026\uffd0\030\uffd0\031" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\052\123\053\122" +
    "\104\uffd0\001\002\000\024\004\uffc2\026\uffc2\030\uffc2\031" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\104\uffc2\001\002" +
    "\000\074\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\057\ufff4\060\ufff4\063\ufff4\065" +
    "\ufff4\071\ufff4\072\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4" +
    "\104\ufff4\105\ufff4\106\ufff4\111\ufff4\001\002\000\016\006" +
    "\007\007\057\010\054\011\004\021\056\023\024\001\002" +
    "\000\030\004\uffc1\026\uffc1\030\uffc1\031\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\042\uffc1\052\123\053\122\104\uffc1\001\002" +
    "\000\006\074\uffbf\075\uffbf\001\002\000\006\074\244\075" +
    "\243\001\002\000\014\026\106\030\115\031\111\074\uffbd" +
    "\075\uffbd\001\002\000\024\004\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0\104\uffc0\001\002" +
    "\000\006\074\uffbe\075\uffbe\001\002\000\004\104\ufffc\001" +
    "\002\000\074\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\057\ufff7\060\ufff7\063\ufff7" +
    "\065\ufff7\071\ufff7\072\ufff7\077\ufff7\100\ufff7\101\ufff7\102" +
    "\ufff7\104\ufff7\105\ufff7\106\ufff7\111\ufff7\001\002\000\006" +
    "\060\uffe7\104\uffe7\001\002\000\074\002\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\057" +
    "\ufff8\060\ufff8\063\ufff8\065\ufff8\071\ufff8\072\ufff8\077\ufff8" +
    "\100\ufff8\101\ufff8\102\ufff8\104\ufff8\105\ufff8\106\ufff8\111" +
    "\ufff8\001\002\000\020\052\076\053\072\064\253\065\071" +
    "\066\075\067\073\070\074\001\002\000\046\013\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\060\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\070\uffde\104\uffde\001\002\000\064\005\030" +
    "\006\007\007\057\010\054\011\004\012\010\016\013\017" +
    "\256\021\056\022\061\023\024\024\045\057\021\060\022" +
    "\063\032\065\055\071\035\072\043\077\037\100\005\102" +
    "\025\104\041\105\033\106\011\111\052\001\002\000\010" +
    "\012\uff86\016\uff86\104\uff86\001\002\000\006\065\257\066" +
    "\261\001\002\000\012\027\uff88\060\uff88\105\uff88\106\uff88" +
    "\001\002\000\012\027\262\060\266\105\265\106\264\001" +
    "\002\000\012\027\uff89\060\uff89\105\uff89\106\uff89\001\002" +
    "\000\022\012\uff8b\016\uff8b\020\uff8b\027\uff8b\060\uff8b\104" +
    "\uff8b\105\uff8b\106\uff8b\001\002\000\010\012\uff87\016\uff87" +
    "\104\uff87\001\002\000\022\012\uff8c\016\uff8c\020\uff8c\027" +
    "\uff8c\060\uff8c\104\uff8c\105\uff8c\106\uff8c\001\002\000\022" +
    "\012\uff8d\016\uff8d\020\uff8d\027\uff8d\060\uff8d\104\uff8d\105" +
    "\uff8d\106\uff8d\001\002\000\022\012\uff8e\016\uff8e\020\uff8e" +
    "\027\uff8e\060\uff8e\104\uff8e\105\uff8e\106\uff8e\001\002\000" +
    "\024\004\uffc4\026\uffc4\030\uffc4\031\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\042\uffc4\104\uffc4\001\002\000\030\004\uffc3\026" +
    "\uffc3\030\uffc3\031\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3" +
    "\052\123\053\122\104\uffc3\001\002\000\074\002\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\057\ufff2\060\ufff2\063\ufff2\065\ufff2\071\ufff2\072\ufff2" +
    "\077\ufff2\100\ufff2\101\ufff2\102\ufff2\104\ufff2\105\ufff2\106" +
    "\ufff2\111\ufff2\001\002\000\010\012\uff8f\016\uff8f\104\uff8f" +
    "\001\002\000\004\104\274\001\002\000\062\005\030\006" +
    "\007\007\057\010\054\011\004\012\010\016\013\021\056" +
    "\022\061\023\024\024\045\057\021\060\022\063\032\065" +
    "\055\071\035\072\043\077\037\100\005\102\025\104\041" +
    "\105\033\106\011\111\052\001\002\000\064\005\030\006" +
    "\007\007\057\010\054\011\004\012\010\015\276\016\013" +
    "\021\056\022\061\023\024\024\045\057\021\060\022\063" +
    "\032\065\055\071\035\072\043\077\037\100\005\102\025" +
    "\104\041\105\033\106\011\111\052\001\002\000\010\012" +
    "\uff90\016\uff90\104\uff90\001\002\000\012\013\uff95\055\uff95" +
    "\056\uff95\104\uff95\001\002\000\032\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd\054\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\070\uffdd\001\002\000\074\002\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\057\ufff3\060\ufff3\063\ufff3\065\ufff3\071\ufff3\072\ufff3" +
    "\077\ufff3\100\ufff3\101\ufff3\102\ufff3\104\ufff3\105\ufff3\106" +
    "\ufff3\111\ufff3\001\002\000\004\002\001\001\002\000\010" +
    "\012\uffeb\016\uffeb\104\uffeb\001\002\000\010\012\uffec\016" +
    "\uffec\104\uffec\001\002\000\074\002\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\057\ufff6" +
    "\060\ufff6\063\ufff6\065\ufff6\071\ufff6\072\ufff6\077\ufff6\100" +
    "\ufff6\101\ufff6\102\ufff6\104\ufff6\105\ufff6\106\ufff6\111\ufff6" +
    "\001\002\000\012\027\262\060\266\105\265\106\264\001" +
    "\002\000\012\027\262\060\266\105\265\106\264\001\002" +
    "\000\004\020\311\001\002\000\004\104\312\001\002\000" +
    "\062\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a" +
    "\016\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\057\uff8a\060" +
    "\uff8a\063\uff8a\065\uff8a\071\uff8a\072\uff8a\077\uff8a\100\uff8a" +
    "\102\uff8a\104\uff8a\105\uff8a\106\uff8a\111\uff8a\001\002\000" +
    "\010\013\314\055\177\056\200\001\002\000\004\104\315" +
    "\001\002\000\062\005\030\006\007\007\057\010\054\011" +
    "\004\012\010\016\013\021\056\022\061\023\024\024\045" +
    "\057\021\060\022\063\032\065\055\071\035\072\043\077" +
    "\037\100\005\102\025\104\041\105\033\106\011\111\052" +
    "\001\002\000\066\005\030\006\007\007\057\010\054\011" +
    "\004\012\010\014\uff91\015\uff91\016\013\021\056\022\061" +
    "\023\024\024\045\057\021\060\022\063\032\065\055\071" +
    "\035\072\043\077\037\100\005\102\025\104\041\105\033" +
    "\106\011\111\052\001\002\000\030\026\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\074\uffc5\075\uffc5\001\002\000\030\026\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\074\uffc6\075\uffc6\001\002\000\004\104\322\001\002\000" +
    "\062\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\016\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\057\ufffd\060" +
    "\ufffd\063\ufffd\065\ufffd\071\ufffd\072\ufffd\077\ufffd\100\ufffd" +
    "\102\ufffd\104\ufffd\105\ufffd\106\ufffd\111\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\060\003\014\004\035\011\037\020\015\021" +
    "\043\022\026\024\046\025\050\026\016\030\041\033\045" +
    "\034\025\037\047\042\057\043\005\045\011\046\030\047" +
    "\052\050\022\051\017\052\033\053\061\054\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\043\022\026\024\046\025\312" +
    "\026\016\037\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\305\001\001\000\012\045\303\046\030" +
    "\047\302\050\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\035\011\037\020\015" +
    "\021\043\022\026\024\046\025\050\026\016\030\041\033" +
    "\045\034\025\037\047\042\057\043\005\045\011\046\030" +
    "\047\052\050\022\052\033\053\226\054\013\001\001\000" +
    "\012\021\043\022\277\024\046\037\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\212\001\001\000\020" +
    "\007\113\013\267\014\117\015\111\016\116\017\112\044" +
    "\266\001\001\000\056\004\035\011\037\020\015\021\043" +
    "\022\026\024\046\025\050\026\016\030\041\033\045\034" +
    "\025\037\047\042\057\043\005\045\011\046\030\047\052" +
    "\050\022\051\253\052\033\053\061\054\013\001\001\000" +
    "\010\021\043\022\251\024\046\001\001\000\002\001\001" +
    "\000\004\004\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\113\013\237\014\117" +
    "\015\111\016\116\017\112\044\234\001\001\000\002\001" +
    "\001\000\020\007\113\013\233\014\117\015\111\016\116" +
    "\017\112\044\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\043\022\230\024\046\001\001\000\056" +
    "\004\035\011\037\020\015\021\043\022\026\024\046\025" +
    "\050\026\016\030\041\033\045\034\025\037\047\042\057" +
    "\043\005\045\011\046\030\047\052\050\022\051\223\052" +
    "\033\053\061\054\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\043\022\175" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\113\013\120\014\117\015\111\016\116\017\112" +
    "\044\107\001\001\000\004\004\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\043" +
    "\022\066\024\046\001\001\000\010\021\043\022\104\024" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\043\022\103\024\046\001\001\000\010\021\043\022" +
    "\102\024\046\001\001\000\010\021\043\022\101\024\046" +
    "\001\001\000\010\021\043\022\100\024\046\001\001\000" +
    "\010\021\043\022\077\024\046\001\001\000\010\021\043" +
    "\022\076\024\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\113\014\117\015\111\016\116\017\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\144\001\001\000\004" +
    "\040\143\001\001\000\004\040\142\001\001\000\004\040" +
    "\141\001\001\000\004\040\140\001\001\000\004\040\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\160\001\001\000\004\021" +
    "\157\001\001\000\004\021\156\001\001\000\004\021\155" +
    "\001\001\000\004\021\154\001\001\000\004\021\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\174\001\001\000\004\021\173\001\001\000\004" +
    "\021\172\001\001\000\004\021\171\001\001\000\004\021" +
    "\170\001\001\000\004\021\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\043\022\204\024" +
    "\046\026\202\037\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\212\001\001\000" +
    "\010\021\043\022\222\024\046\001\001\000\010\021\043" +
    "\022\221\024\046\001\001\000\010\021\043\022\220\024" +
    "\046\001\001\000\010\021\043\022\217\024\046\001\001" +
    "\000\010\021\043\022\216\024\046\001\001\000\010\021" +
    "\043\022\215\024\046\001\001\000\010\021\043\022\214" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\004\035\011\037\020" +
    "\015\021\043\022\026\024\046\025\050\026\016\030\041" +
    "\033\045\034\025\035\224\037\047\042\057\043\005\045" +
    "\011\046\030\047\052\050\022\052\033\053\226\054\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\241\030\240\043\005" +
    "\001\001\000\004\036\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\004\035\011\037\020\015\021\043\022" +
    "\026\024\046\025\050\026\016\027\254\030\041\033\045" +
    "\034\025\037\047\042\057\043\005\045\011\046\030\047" +
    "\052\050\022\052\033\053\226\054\013\001\001\000\002" +
    "\001\001\000\004\032\257\001\001\000\002\001\001\000" +
    "\004\023\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\004\035\011\037\020\015\021\043\022\026\024\046" +
    "\025\050\026\016\030\041\033\045\034\025\037\047\042" +
    "\057\043\005\045\011\046\030\047\052\050\022\051\274" +
    "\052\033\053\061\054\013\001\001\000\054\004\035\011" +
    "\037\020\015\021\043\022\026\024\046\025\050\026\016" +
    "\030\041\033\045\034\025\037\047\042\057\043\005\045" +
    "\011\046\030\047\052\050\022\052\033\053\226\054\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\306\001\001\000\004\023\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\200\001" +
    "\001\000\002\001\001\000\056\004\035\011\037\020\015" +
    "\021\043\022\026\024\046\025\050\026\016\030\041\033" +
    "\045\034\025\037\047\042\057\043\005\045\011\046\030" +
    "\047\052\050\022\051\315\052\033\053\061\054\013\001" +
    "\001\000\054\004\035\011\037\020\015\021\043\022\026" +
    "\024\046\025\050\026\016\030\041\033\045\034\025\037" +
    "\047\042\057\043\005\045\011\046\030\047\052\050\022" +
    "\052\033\053\226\054\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
/*
	vm = new VarManager();
	cp = new CommandParameter[7];
	cpm = new CommandParameter[7][];
	com = null;
	comFind = null;

	array_path = new ArrayList<CommandParameter>();
	array_file = new ArrayList<CommandParameter>();
	array_perm = new ArrayList<CommandParameter>();
	array_data = new ArrayList<CommandParameter>();
	array_dim = new ArrayList<CommandParameter>();

	ifcc = null;
	ic = null;

	list_script = new LinkedList<ICommand>();
	todo = new LinkedList<ICommand>();

*/
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/*

	public VarManager vm;
	public CommandParameter[] cp, datap, permp, dimp ;
	public CommandParameter[][] cpm;
	public ICommand com, comFind;
	public int counter_file = 0;
	public int counter_path = 0;
	public int sublevel = 0;

	public ArrayList<CommandParameter> array_path, array_file, array_dim, array_perm, array_data;

	public LinkedList<ICommand> list_script;
	public LinkedList<ICommand> todo;
	public IFlowCommandControl ifcc;
	public ICommand ic;
	public boolean if_control = false;

	private String enviroment = "/home";

	public void add_param(CommandParameter x) throws ParserException
	{
		Utility.mf(x.getValue()+" tipo "+x.getParamType());
		if(x.getParamType()==ParamType.PATH)
			array_path.add(x);
		else
			array_file.add(x);
	}

	public void setEnviroment(String path)
	{
		enviroment = path;
		Utility.mf("CURRENT-PATH now is: " + enviroment);
	}

	public String getEnviroment()
	{
		return enviroment;
	}

	public void print_el(LinkedList ls)
	{
		LinkedList ll = ls;
		Utility.mf("ITERATORE ");
		Iterator s = ll.iterator();
		while(s.hasNext())
			((IFlowCommandControl)s.next()).print_parameters();
	}
*/
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for_stmt ::= for_head i_stmt for_tail 
            { parser.Tree.reduce(3,"for_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
		x.set_list_command(l);
		parser.list_script.clear();
		x.close_command(y);
		System.out.println("for cycle");
		RESULT = x;
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(35/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_tail ::= Com_For_e i_Op_ps for_arg 
            { parser.Tree.reduce(3,"for_tail",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
				Utility.mf("CICLO FOR CHIUSO");
				Utility.mf("\tSUBLEVEL: "+(--parser.sublevel));
				Utility.mf("step: "+parser.vm.Auto_Neg(y,s));
				RESULT = parser.vm.Auto_Neg(y,s);
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(21/*for_tail*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // i_Op_ps ::= Minus 
            { parser.Tree.reduce(1,"i_Op_ps",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 						*/
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // i_Op_ps ::= Plus 
            { parser.Tree.reduce(1,"i_Op_ps",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x; 						*/
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_head ::= Com_For for_arg for_arg for_arg Com_For_m EL 
            { parser.Tree.reduce(6,"for_head",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		/*
				System.out.println("FOR HEAD variabili "+x.getValue()+"\t"+y.getValue()+"\t"+z.getValue());
				for_command fc = new for_command(x,y,z,parser.vm);
				Utility.mf("\tSUBLEVEL: "+(++parser.sublevel));
				RESULT = fc;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(36/*for_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_arg ::= ID 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); */
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_arg ::= Vint 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._float, x.floatValue()); 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_arg ::= Int 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new myVar(myVar._int, x.intValue()); 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_arg ::= Var 
            { parser.Tree.reduce(1,"for_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.extractVar(x); 
					System.out.println("Var: "+x); */
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if_stmt ::= if_head Com_If_e 
            { parser.Tree.reduce(2,"if_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
				x.close_command();
				Utility.mf("IF CHIUSO");
				RESULT = x;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_stmt ::= if_head Com_If_m EL i_stmt Com_If_e 
            { parser.Tree.reduce(5,"if_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
				x.set_list_command_else(l);
				parser.list_script.clear();
				x.close_command(new myVar());
				Utility.mf("IF ELSE CHIUSO");
				RESULT = x;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_head ::= Com_If conf_exp Com_If_2 EL i_stmt 
            { parser.Tree.reduce(5,"if_head",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				if_command ic = new if_command(x);
				ic.set_list_command(l);
				parser.list_script.clear();
				Utility.mf("IF HEAD condizione: ");
				Utility.mf("\tSUBLEVEL: "+parser.sublevel);
				RESULT = ic;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(38/*if_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // conf_exp ::= conf_exp cond_if logic_stmt 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				Utility.mf("IF: CONF_EXP with AND/OR ...");
				RESULT = parser.vm.makeOper(x,y,s);
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // conf_exp ::= conf_exp cond_if arit_stmt 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // conf_exp ::= conf_exp cond_if conf 
            { parser.Tree.reduce(3,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // conf_exp ::= C_Not conf 
            { parser.Tree.reduce(2,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // conf_exp ::= logic_stmt 
            { parser.Tree.reduce(1,"conf_exp",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
				Utility.mf("IF LOGIC STMT -> CONF_EXP ");
				RESULT = s;
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conf_exp ::= conf 
            { parser.Tree.reduce(1,"conf_exp",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conf ::= arit_stmt cond arit_stmt 
            { parser.Tree.reduce(3,"conf",0);
              Object RESULT = null;
		/*
				
				*/
              CUP$parser$result = new java_cup.runtime.Symbol(29/*conf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cond_if ::= C_Andd 
            { parser.Tree.reduce(1,"cond_if",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = s; */
              CUP$parser$result = new java_cup.runtime.Symbol(31/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond_if ::= C_Orr 
            { parser.Tree.reduce(1,"cond_if",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
				Utility.mf("IF C_Orr: ");
				RESULT = s; */
              CUP$parser$result = new java_cup.runtime.Symbol(31/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // i_arg ::= Bool 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._bool, new Boolean(x)); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // i_arg ::= FUnit 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // i_arg ::= IUnit 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // i_arg ::= Str 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* System.out.println("str: "+x); 
					RESULT= new myVar(myVar._string, x); 			*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // i_arg ::= Vint 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT= new myVar(myVar._float, x.floatValue()); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // i_arg ::= Int 
            { parser.Tree.reduce(1,"i_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new myVar(myVar._int, x.intValue()); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // date_arg ::= Data 
            { parser.Tree.reduce(1,"date_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = x;	*/
              CUP$parser$result = new java_cup.runtime.Symbol(30/*date_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bool_op ::= C_Or 
            { parser.Tree.reduce(1,"bool_op",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT =x; */
              CUP$parser$result = new java_cup.runtime.Symbol(28/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bool_op ::= C_And 
            { parser.Tree.reduce(1,"bool_op",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT =x; */
              CUP$parser$result = new java_cup.runtime.Symbol(28/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cc_date_cond ::= _where Date_Criteria C_Ug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria UG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.UG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cc_date_cond ::= _where Date_Criteria Diver date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria DIV raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.DIV);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cc_date_cond ::= _where Date_Criteria Maggug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MAGUG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAGUG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cc_date_cond ::= _where Date_Criteria Minug date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MINUG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MINUG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cc_date_cond ::= _where Date_Criteria Magg date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MAG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAG);					
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cc_date_cond ::= _where Date_Criteria Min date_arg 
            { parser.Tree.reduce(4,"cc_date_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Date Criteria MIN raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MIN);					
							*/
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cc_permission_cond ::= _where Permission_Criteria C_Ug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto permesso = : OK");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.UG);			
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cc_permission_cond ::= _where Permission_Criteria Diver i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.DIV);
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cc_permission_cond ::= _where Permission_Criteria Maggug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MAGUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cc_permission_cond ::= _where Permission_Criteria Minug i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MINUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cc_permission_cond ::= _where Permission_Criteria Magg i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MAG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cc_permission_cond ::= _where Permission_Criteria Min i_arg 
            { parser.Tree.reduce(4,"cc_permission_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MIN);
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cc_dimension_cond ::= _where Dimension_Criteria C_Ug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto OK");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.UG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cc_dimension_cond ::= _where Dimension_Criteria Diver i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.DIV);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cc_dimension_cond ::= _where Dimension_Criteria Maggug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MAGUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cc_dimension_cond ::= _where Dimension_Criteria Minug i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MINUG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cc_dimension_cond ::= _where Dimension_Criteria Magg i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MAG);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cc_dimension_cond ::= _where Dimension_Criteria Min i_arg 
            { parser.Tree.reduce(4,"cc_dimension_cond",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
								Utility.mf("Dimension Criteria raccolto valore i_arg ricevuto: "+a.getStringValue());
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MIN);		
								*/
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cc_conds ::= cc_dimension_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_dim.add(parser.cp[6]);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(13/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cc_conds ::= cc_date_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_data.add(parser.cp[4]);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(13/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cc_conds ::= cc_permission_cond 
            { parser.Tree.reduce(1,"cc_conds",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					parser.array_perm.add(parser.cp[5]);
//					parser.cp[5] = null;
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(13/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // i_cc_conds ::= i_cc_conds bool_op cc_conds 
            { parser.Tree.reduce(3,"i_cc_conds",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // i_cc_conds ::= cc_conds 
            { parser.Tree.reduce(1,"i_cc_conds",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _where ::= Where 
            { parser.Tree.reduce(1,"_where",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _where ::= 
            { parser.Tree.reduce(0,"_where",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comm_find_stmt_2 ::= comm_find_stmt_2 Name 
            { parser.Tree.reduce(2,"comm_find_stmt_2",0);
              Object RESULT = null;
		/*
					Utility.mf("COMANDO RECURSIVO! rilevato: SENZA PARAM!"); 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(8/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comm_find_stmt_2 ::= comm_find_stmt_2 Name param 
            { parser.Tree.reduce(3,"comm_find_stmt_2",0);
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("COMANDO RECURSIVO! rilevato:  CON PARAM"); 
					parser.cp[3]=p; 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(8/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comm_find_stmt_2 ::= commands 
            { parser.Tree.reduce(1,"comm_find_stmt_2",0);
              Object RESULT = null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("COMANDO RICORSIVO! rilevato: "+sc);
					parser.cpm[5] = new CommandParameter[]{new CommandParameter(null,sc,null)};
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(8/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comm_find_stmt ::= comm_find_stmt Com_Ex comm_find_stmt_2 Pv 
            { parser.Tree.reduce(4,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comm_find_stmt ::= comm_find_stmt i_cc_conds 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comm_find_stmt ::= comm_find_stmt param 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("passo dentro comm_find_stmt");
					parser.add_param(x);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comm_find_stmt ::= Com_Find i_cc_conds 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comm_find_stmt ::= Com_Find param 
            { parser.Tree.reduce(2,"comm_find_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("_FIND_!");
					parser.comFind = new FINDCommand(parser.getEnviroment());

//					parser.counter_file = 0; //posso usare una arraylist e poi convertire in array
//					parser.counter_path = 0;

					parser.add_param(x);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LS_stmt ::= LS_stmt Obj 
            { parser.Tree.reduce(2,"LS_stmt",0);
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("LS obj!");
					parser.cp[1]=new CommandParameter(ParamType.BINARIO,o,null);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LS_stmt ::= LS_stmt Order 
            { parser.Tree.reduce(2,"LS_stmt",0);
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
					Utility.mf("LS Order!");
					parser.cp[0]=new CommandParameter(ParamType.BINARIO,o,null);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LS_stmt ::= Com_Ls 
            { parser.Tree.reduce(1,"LS_stmt",0);
              Object RESULT = null;
		/* 
					Utility.mf("LS!");
					parser.com = new LSCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(33/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // commands ::= LS_stmt 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/*RESULT= "ls";*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // commands ::= Com_Cp 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("CP!");
					RESULT= "cp";
					parser.com = new CPCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // commands ::= Com_Rm 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("RM!");
					RESULT= "rm";
					parser.com = new RMCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // commands ::= Com_Mov 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("MV!");
					RESULT= "mv";
					parser.com = new MVCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // commands ::= Com_MKDir 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("MKDIR!");
					RESULT= "mkdir";
					parser.com = new MKDCommand(parser.getEnviroment());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // commands ::= Com_Cd 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;
		/* 
					Utility.mf("CD!");
					RESULT= "cd";
					parser.com = new CDCommand(parser.getEnviroment(),parser);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sh_stmt ::= sh_stmt i_cc_conds 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sh_stmt ::= sh_stmt param 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.cp[3]=p; */
              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sh_stmt ::= commands i_cc_conds 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sh_stmt ::= commands param 
            { parser.Tree.reduce(2,"sh_stmt",0);
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.cp[2]=p; */
              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param ::= Ext 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.FILE,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param ::= File 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.FILE,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // param ::= Path 
            { parser.Tree.reduce(1,"param",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new CommandParameter(ParamType.PATH,x,null); */
              CUP$parser$result = new java_cup.runtime.Symbol(34/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arit_arg ::= i_arg 
            { parser.Tree.reduce(1,"arit_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = ((myVar)x); System.out.println("i_arg"); */
              CUP$parser$result = new java_cup.runtime.Symbol(18/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arit_arg ::= Var 
            { parser.Tree.reduce(1,"arit_arg",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.extractVar(x); 
							System.out.println("Var: "+x); */
              CUP$parser$result = new java_cup.runtime.Symbol(18/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logic_stmt ::= arit_stmt Diver arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLODiv(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logic_stmt ::= arit_stmt C_Ugg arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOUg(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logic_stmt ::= arit_stmt Minug arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMiU(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logic_stmt ::= arit_stmt Min arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMin(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logic_stmt ::= arit_stmt Maggug arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMaU(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logic_stmt ::= arit_stmt Magg arit_stmt 
            { parser.Tree.reduce(3,"logic_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMag(x,y));
		*/
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arit_stmt ::= C_Not arit_stmt 
            { parser.Tree.reduce(2,"arit_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.makeSOper(((myVar)x),s); */
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arit_stmt ::= RO arit_stmt RC 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/* RESULT = ((myVar)x); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arit_stmt ::= arit_arg 
            { parser.Tree.reduce(1,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = ((myVar)x); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arit_stmt ::= Minus arit_stmt 
            { parser.Tree.reduce(2,"arit_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = parser.vm.makeSOper(((myVar)x),s); */
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arit_stmt ::= arit_stmt C_Or arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arit_stmt ::= arit_stmt C_And arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_stmt ::= arit_stmt Minus arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_stmt ::= arit_stmt Plus arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_stmt ::= arit_stmt Div arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arit_stmt ::= arit_stmt Times arit_stmt 
            { parser.Tree.reduce(3,"arit_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*	System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // init_stmt ::= init_stmt assig_stmt 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(((myVar)x)); 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_stmt ::= Com_Str assig_stmt 
            { parser.Tree.reduce(2,"init_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* parser.vm.add_var(((myVar)x)); 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(40/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assig_stmt ::= Var 
            { parser.Tree.reduce(1,"assig_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* RESULT = new myVar(x); 		*/
              CUP$parser$result = new java_cup.runtime.Symbol(2/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assig_stmt ::= Var C_Ug arit_stmt 
            { parser.Tree.reduce(3,"assig_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* ((myVar)y).setName(x);
						RESULT = y; 	*/
              CUP$parser$result = new java_cup.runtime.Symbol(2/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // str_stmt ::= str_stmt if_stmt 
            { parser.Tree.reduce(2,"str_stmt",0);
              Object RESULT = null;
		/* Utility.mf("raccolto IF stmt interno"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_stmt ::= str_stmt for_stmt 
            { parser.Tree.reduce(2,"str_stmt",0);
              Object RESULT = null;
		/* Utility.mf("raccolto FOR stmt interno"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_stmt ::= for_stmt 
            { parser.Tree.reduce(1,"str_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
						//x.print_parameters(); nullpointerexc
						Utility.mf("raccolto FOR stmt"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_stmt ::= if_stmt 
            { parser.Tree.reduce(1,"str_stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/* 
						((if_command)x).print_parameters();
						Utility.mf("raccolto IF stmt"); */
              CUP$parser$result = new java_cup.runtime.Symbol(42/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= EL 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= conf_exp EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= Com_P arit_stmt EL 
            { parser.Tree.reduce(3,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= throw_s EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= script EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= comm_find_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		/*
					System.out.println("raccolto sh stmt = FIND");
					parser.cpm[0] = new CommandParameter[parser.array_file.size()];
					parser.cpm[1] = new CommandParameter[parser.array_path.size()];
					parser.cpm[2] = new CommandParameter[parser.array_perm.size()];
					parser.cpm[3] = new CommandParameter[parser.array_data.size()];
					parser.cpm[4] = new CommandParameter[parser.array_dim.size()];

					System.out.println("dopo onit");
					parser.cpm[0] = parser.array_file.toArray(parser.cpm[0]);
					parser.cpm[1] = parser.array_path.toArray(parser.cpm[1]);
					parser.cpm[2] = parser.array_perm.toArray(parser.cpm[2]);
					parser.cpm[3] = parser.array_data.toArray(parser.cpm[3]);
					parser.cpm[4] = parser.array_dim.toArray(parser.cpm[4]);

					//parser.cpm[6]=new CommandParameter[7];

					System.out.println("dopo init 2'");

					Utility.mf("SETCOMMANDPARAMETER");
					parser.comFind.setCommandParameter(parser.cpm);
					Utility.mf("EXEC");
					parser.comFind.exec();
					parser.array_file.clear();
					parser.array_path.clear();
					parser.array_perm.clear();
					parser.array_data.clear();
					parser.array_dim.clear();
					
					Utility.mf(parser.comFind.getCommandStringResult());
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= sh_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					System.out.println("raccolto sh stmt: parameter setting"); 
					parser.cp[0] = parser.array_file.get(0);
					parser.cp[1] = parser.array_path.get(0);
					parser.cp[2] = parser.array_perm.get(0);
					parser.cp[3] = parser.array_data.get(0);
					parser.cp[4] = parser.array_dim.get(0);
					for(int i=0; i<7; i++)
						if(parser.cp[i]==null)
							Utility.mf("*niente*");
						else
							Utility.mf("param["+i+"]: "+parser.cp[i].getValue());
					parser.com.setCommandParameter(parser.cp);
					parser.com.exec();
					Utility.mf(parser.com.getCommandStringResult());
					
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= str_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					parser.list_script.add(s);
					Utility.mf("risolto flow control statement -> INSERITO IN LIST SCRIPT"); 
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= assig_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/* parser.vm.assig(((myVar)x)); Utility.mf("ASSIST STMT");*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= init_stmt EL 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT = null;
		/* parser.vm.getListVar(); Utility.mf("INIT STMT");	*/
              CUP$parser$result = new java_cup.runtime.Symbol(41/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // i_stmt ::= i_stmt stmt 
            { parser.Tree.reduce(2,"i_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_stmt ::= stmt 
            { parser.Tree.reduce(1,"i_stmt",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*//RE-Init
					parser.todo.add(s);
					parser.cp = new CommandParameter[7];
					parser.cpm = new CommandParameter[7][];
					parser.com = null;
					parser.comFind = null;
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(39/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // end_s ::= End_S File 
            { parser.Tree.reduce(2,"end_s",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		/*
					Utility.mf("FINE SCRIPT");
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(27/*end_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // throw_s ::= Throw_S File 
            { parser.Tree.reduce(2,"throw_s",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*throw_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_s ::= Start_S File EL 
            { parser.Tree.reduce(3,"start_s",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					Utility.mf("INIZIO SCRIPT");
					parser.list_script = new LinkedList<ICommand>();
					//parser.list_script.add(s);
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(25/*start_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= start_s i_stmt end_s 
            { parser.Tree.reduce(3,"script",0);
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*
					Utility.mf("CHIUDO SCRIPT");
					//salvataggio script
					*/
              CUP$parser$result = new java_cup.runtime.Symbol(14/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= i_stmt 
            { parser.Tree.reduce(1,"S",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= 
            { parser.Tree.reduce(0,"S",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

