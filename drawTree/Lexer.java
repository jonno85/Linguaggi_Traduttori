/* The following code was generated by JFlex 1.4.3 on 9/21/11 6:43 PM */

//package it.polito.lt.skype.generated.parser;

import java_cup.runtime.*;
//import it.polito.lt.skype.generated.parser.sym;
//import java.util.*;
//import java.text.*;
//import it.polito.lt.skype.manager.*;
//import it.polito.lt.skype.command.*;
//import it.polito.lt.skype.bot.*;


 	/* NB: dato che JFlex genera la classe e i costruttori omettendo "public" 
	* e dato che l'ant-clean deve pulire anche i generati, 
	* ricordarsi ad ogni generazione dello scanner di aggiungere public 
	* al nome della classe Lexer ai costruttori!
	* NB2: risolto con ant task da jonni
	* */





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/21/11 6:43 PM from the specification file
 * <tt>scanner_clean.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int script = 6;
  public static final int YYINITIAL = 0;
  public static final int exclude_script_code = 4;
  public static final int comment = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\0\1\2\22\0\1\1\1\61\2\65\1\67"+
    "\1\65\1\63\1\66\1\31\1\32\1\30\1\35\1\3\1\36\1\64"+
    "\1\27\1\42\1\46\1\44\1\45\6\43\1\65\1\37\1\57\1\55"+
    "\1\60\1\56\1\0\1\16\1\20\1\11\1\21\1\7\1\41\1\26"+
    "\1\4\1\23\1\40\1\52\1\22\1\6\1\24\1\5\1\17\1\54"+
    "\1\14\1\13\1\10\1\12\1\15\1\51\1\47\1\25\1\50\1\33"+
    "\1\65\1\34\3\0\1\16\1\20\1\11\1\21\1\7\1\41\1\26"+
    "\1\4\1\23\1\40\1\52\1\22\1\6\1\24\1\5\1\17\1\54"+
    "\1\14\1\13\1\10\1\12\1\15\1\51\1\47\1\25\1\50\1\65"+
    "\1\62\1\65\133\0\1\53\37\0\1\53\uff06\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\2\1\3\21\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\4\15\1\1\1\16\1\1\1\17\1\20\1\21\1\22"+
    "\1\23\1\1\3\24\1\25\1\1\1\22\3\1\1\26"+
    "\7\1\1\27\7\1\1\30\1\31\2\1\1\32\1\1"+
    "\1\33\7\1\1\34\3\1\1\35\3\1\1\32\2\1"+
    "\1\25\1\36\4\1\4\0\1\15\2\0\1\1\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\1\1\0"+
    "\1\46\3\47\2\1\1\50\11\1\1\51\21\1\1\52"+
    "\2\1\1\23\7\1\1\50\1\1\1\53\7\1\1\27"+
    "\3\1\1\0\1\54\4\0\1\55\1\1\2\47\1\44"+
    "\5\1\1\56\2\1\1\57\1\1\1\60\2\1\1\61"+
    "\2\1\1\62\3\1\1\63\10\1\1\64\5\1\1\16"+
    "\1\1\1\65\2\1\1\53\23\0\2\47\2\1\1\66"+
    "\2\1\1\67\1\70\11\1\1\71\6\1\1\72\7\1"+
    "\1\0\1\54\14\0\1\73\2\0\1\47\1\74\2\1"+
    "\1\62\1\1\1\33\1\1\1\63\3\1\1\45\6\1"+
    "\4\0\1\47\10\1\1\75\2\0\1\73\1\2\2\1"+
    "\1\76\3\1\1\0\2\1\1\77\1\1\1\0\1\76"+
    "\1\77\1\1\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\70\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u04d0\0\u0690"+
    "\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\70\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\160\0\u09a0"+
    "\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\160\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\160\0\160"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\160\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\160\0\u0ff8\0\u1030\0\u1068\0\160\0\u10a0\0\u10d8\0\u1110"+
    "\0\70\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\u13e8\0\u07e0\0\70\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\160\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8"+
    "\0\160\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u1298\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178"+
    "\0\u21b0\0\u21e8\0\u2220\0\160\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\160\0\u2370\0\u23a8\0\160\0\u23e0\0\160\0\u2418"+
    "\0\u2450\0\160\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0"+
    "\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\160\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\160"+
    "\0\u28e8\0\160\0\u2920\0\u2958\0\160\0\u2990\0\u29c8\0\u2a00"+
    "\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0"+
    "\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\160\0\u2e98\0\u2ed0\0\160"+
    "\0\160\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058"+
    "\0\u3090\0\u30c8\0\160\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0"+
    "\0\u3218\0\160\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368"+
    "\0\u33a0\0\u33d8\0\70\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0"+
    "\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u2d10"+
    "\0\u36b0\0\u36e8\0\u3720\0\u1420\0\u3758\0\u3790\0\160\0\u37c8"+
    "\0\u3800\0\u3838\0\160\0\u3870\0\u38a8\0\u38e0\0\160\0\u3918"+
    "\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8"+
    "\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98"+
    "\0\u3cd0\0\u3d08\0\160\0\u3d40\0\u3d78\0\70\0\u1420\0\u3db0"+
    "\0\u3de8\0\160\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38"+
    "\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\160\0\u4050\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\3\1\22\1\23\1\24\1\25\1\3\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\3\1\40\1\41\1\42\1\43\1\44\1\43\2\3"+
    "\1\45\3\3\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\70\0\1\3\3\0"+
    "\23\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\5\0\1\5\65\0"+
    "\1\3\3\0\1\3\1\62\21\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\10\3\1\63\12\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\1\3\1\64"+
    "\1\3\1\65\2\3\1\66\2\3\1\67\11\3\1\61"+
    "\1\47\5\0\1\3\1\0\12\3\1\70\2\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\7\3\1\71\6\3\1\72\1\3\1\73\2\3\1\61"+
    "\1\47\5\0\1\3\1\0\7\3\1\74\4\3\1\75"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\1\76\1\77\6\3\1\100\6\3\1\101\3\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\1\102"+
    "\1\103\1\3\1\104\4\3\1\105\1\3\1\106\1\107"+
    "\1\3\1\110\5\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\22\3\1\111\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\1\112\2\3\1\113\1\114\16\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\2\3"+
    "\1\115\20\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\12\3\1\116\10\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\7\3\1\117\6\3\1\120\1\3"+
    "\1\121\2\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\3\3\1\122\4\3\1\123\6\3\1\124\3\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\1\3"+
    "\1\125\1\3\1\126\6\3\1\127\4\3\1\130\3\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\7\3"+
    "\1\131\2\3\1\132\4\3\1\133\3\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\20\3\1\134\2\3"+
    "\1\61\1\47\5\0\1\3\1\0\1\3\1\135\13\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\3\3\1\136\17\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\1\3\1\110\15\3\1\137\3\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\140\3\0\23\140"+
    "\1\0\1\141\7\0\2\140\5\0\6\140\4\0\1\140"+
    "\6\0\1\142\3\0\23\142\1\0\1\47\7\0\2\142"+
    "\5\0\6\142\1\0\1\47\2\0\1\142\2\0\1\55"+
    "\3\0\1\3\3\0\1\3\1\143\10\3\1\144\4\3"+
    "\1\145\3\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\4\0\1\146"+
    "\4\0\1\147\11\0\1\150\5\0\1\151\13\0\1\42"+
    "\4\152\3\0\1\153\11\0\1\154\4\0\1\146\4\0"+
    "\1\147\11\0\1\150\5\0\1\151\13\0\5\42\3\0"+
    "\1\153\11\0\1\154\4\0\1\146\4\0\1\147\11\0"+
    "\1\150\5\0\1\151\13\0\5\152\3\0\1\153\11\0"+
    "\1\154\4\0\1\146\4\0\1\147\11\0\1\150\5\0"+
    "\1\151\13\0\1\152\3\42\1\152\3\0\1\153\11\0"+
    "\1\154\3\0\1\3\3\0\1\155\22\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\60\0\1\156\67\0\1\157\1\0\1\160"+
    "\1\161\64\0\1\162\12\0\1\3\3\0\23\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\161\1\47\2\0"+
    "\1\3\2\0\1\55\65\0\1\163\70\0\1\164\4\0"+
    "\1\165\3\0\23\165\1\0\1\55\7\0\2\165\5\0"+
    "\6\165\1\0\1\55\2\0\1\165\2\0\1\55\3\0"+
    "\2\166\1\0\63\166\1\167\1\166\1\170\3\0\10\170"+
    "\1\171\7\170\1\172\2\170\11\0\2\170\5\0\6\170"+
    "\4\0\1\170\6\0\1\140\3\0\23\140\11\0\2\140"+
    "\5\0\6\140\4\0\1\140\6\0\1\3\3\0\6\3"+
    "\1\173\14\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\1\3\1\174\1\3\1\175\6\3\1\175\10\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\7\3"+
    "\1\176\1\3\1\177\3\3\1\200\5\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\20\3\1\201\2\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\1\3"+
    "\1\202\21\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\15\3\1\203\5\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\3\3\1\204\17\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\7\3\1\205\7\3"+
    "\1\206\3\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\15\3\1\207\5\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\3\3\1\210\17\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\6\3\1\211\14\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\3\3"+
    "\1\212\4\3\1\213\12\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\1\3\1\214\4\3\1\215\14\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\13\3"+
    "\1\216\7\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\12\3\1\217\10\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\13\3\1\220\7\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\10\3\1\221\12\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\3\3"+
    "\1\222\17\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\10\3\1\223\7\3\1\224\2\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\6\3\1\225\14\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\1\3"+
    "\1\226\21\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\3\3\1\227\17\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\12\3\1\230\10\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\17\3\1\110\3\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\5\3"+
    "\1\231\15\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\4\3\1\232\11\3\1\233\4\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\15\3\1\234\5\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\10\3"+
    "\1\235\12\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\1\3\1\236\15\3\1\237\3\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\6\3\1\77\14\3"+
    "\1\61\1\47\5\0\1\3\1\0\13\3\1\77\1\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\11\3\1\240\11\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\5\3\1\241\1\3\1\117\6\3"+
    "\1\242\4\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\4\3\1\243\14\3\1\244\1\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\2\3\1\245\5\3"+
    "\1\246\12\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\6\3\1\247\11\3\1\250\2\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\7\3\1\251\13\3"+
    "\1\61\1\47\5\0\1\3\1\0\12\3\1\252\2\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\17\3\1\253\3\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\23\3\1\61\1\47\5\0\1\3"+
    "\1\0\7\3\1\254\5\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\1\3\1\255\21\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\140\3\0\23\140"+
    "\1\61\6\0\1\140\1\0\15\140\4\0\1\140\6\0"+
    "\1\142\3\0\23\142\1\0\1\47\5\0\1\142\1\0"+
    "\15\142\1\0\1\47\2\0\1\142\2\0\1\55\3\0"+
    "\1\3\3\0\10\3\1\256\12\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\16\3\1\257\4\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\16\3\1\260"+
    "\1\3\1\261\2\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\11\0"+
    "\1\147\11\0\1\150\5\0\1\151\23\0\1\153\24\0"+
    "\1\262\10\0\1\263\74\0\1\264\62\0\1\263\2\0"+
    "\1\262\45\0\1\265\4\0\1\147\11\0\1\150\5\0"+
    "\1\151\1\266\6\0\1\266\3\0\5\42\3\0\1\153"+
    "\11\0\1\154\23\0\1\263\2\0\1\267\106\0\5\270"+
    "\21\0\1\3\3\0\3\3\1\271\17\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\165\3\0\23\165\7\0\1\165"+
    "\1\0\15\165\4\0\1\165\2\0\1\55\3\0\1\170"+
    "\3\0\23\170\7\0\1\170\1\0\15\170\4\0\1\170"+
    "\6\0\1\170\3\0\3\170\1\272\17\170\7\0\1\170"+
    "\1\0\15\170\4\0\1\170\6\0\1\170\3\0\12\170"+
    "\1\273\10\170\7\0\1\170\1\0\15\170\4\0\1\170"+
    "\6\0\1\3\3\0\10\3\1\244\12\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\10\3\1\274\12\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\4\3"+
    "\1\275\16\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\3\3\1\67\17\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\17\3\1\276\3\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\1\3\1\77\21\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\11\3"+
    "\1\277\11\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\17\3\1\300\3\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\22\3\1\301\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\302\17\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\2\3\1\303"+
    "\20\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\17\3\1\304\3\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\5\3\1\305\15\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\12\3\1\306\10\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\20\3\1\307"+
    "\2\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\1\3\1\310\21\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\11\3\1\311\11\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\312\17\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\1\3\1\175"+
    "\15\3\1\175\3\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\20\3\1\313\2\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\17\3\1\314\1\3\1\107"+
    "\1\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\5\3\1\311\15\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\7\3\1\231\2\3\1\315\10\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\4\3\1\316"+
    "\16\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\5\3\1\317\15\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\12\3\1\320\10\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\23\3\1\61\1\47\5\0"+
    "\1\3\1\0\11\3\1\131\3\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\23\3\1\61"+
    "\1\47\5\0\1\3\1\0\12\3\1\321\2\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\2\3\1\322\5\3\1\323\12\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\10\3\1\324\12\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\1\3\1\325"+
    "\21\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\12\3\1\326\10\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\2\3\1\327\20\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\7\3\1\330\13\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\20\3\1\331"+
    "\2\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\3\3\1\332\17\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\10\3\1\231\12\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\333\17\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\3\3\1\244"+
    "\6\3\1\175\10\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\7\3\1\175\13\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\334\17\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\3\3\1\335"+
    "\17\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\20\3\1\336\2\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\5\3\1\337\15\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\4\3\1\131\16\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\3\3\1\340"+
    "\17\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\23\3\1\61\1\47\5\0\1\3\1\0\10\3\1\341"+
    "\4\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\4\3\1\342\16\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\10\3\1\343\12\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\3\3\1\344"+
    "\17\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\7\3\1\215\13\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\3\3\1\345\17\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\207\11\3\1\321"+
    "\5\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\31\0\1\346\51\0"+
    "\1\347\64\0\1\350\1\351\4\0\1\352\2\0\1\353"+
    "\1\0\1\150\1\354\2\0\1\355\1\0\1\151\11\0"+
    "\1\356\1\357\1\360\3\0\1\361\3\0\1\153\22\0"+
    "\1\350\1\362\4\0\1\352\2\0\1\353\2\0\1\354"+
    "\2\0\1\355\13\0\1\356\1\357\1\360\3\0\1\361"+
    "\43\0\1\363\46\0\1\364\4\0\1\365\11\0\1\366"+
    "\5\0\1\367\13\0\5\270\3\0\1\370\15\0\1\3"+
    "\3\0\10\3\1\240\12\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\170\3\0\7\170\1\371\13\170\7\0\1\170"+
    "\1\0\15\170\4\0\1\170\6\0\1\170\3\0\2\170"+
    "\1\372\20\170\7\0\1\170\1\0\15\170\4\0\1\170"+
    "\6\0\1\3\3\0\10\3\1\373\12\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\23\3\1\61\1\47"+
    "\5\0\1\3\1\0\1\3\1\374\13\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\17\3"+
    "\1\67\3\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\10\3\1\375\12\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\6\3\1\376\14\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\17\3\1\377\3\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\23\3"+
    "\1\61\1\47\5\0\1\3\1\0\1\3\1\u0100\13\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\16\3\1\340\4\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\23\3\1\61\1\47\5\0\1\3"+
    "\1\0\11\3\1\u0101\3\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\12\3\1\321\10\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\22\3"+
    "\1\u0102\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\12\3\1\107\10\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\4\3\1\u0103\16\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\u0104\17\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\3\3\1\u0105"+
    "\17\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\16\3\1\252\4\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\2\3\1\u0106\1\3\1\u0107\6\3\1\u0108"+
    "\7\3\1\61\1\47\5\0\1\3\1\0\1\3\1\u0109"+
    "\13\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\13\3\1\u010a\7\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\4\3\1\u010b\16\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\17\3\1\u010c"+
    "\3\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\10\3\1\u010d\12\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\20\3\1\u010e\2\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\u010f\13\3\1\u0110"+
    "\3\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\7\3\1\u0111\13\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\4\3\1\u0112\16\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\4\3\1\u0113\16\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\20\3\1\u0114"+
    "\2\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\5\3\1\u0115\15\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\5\3\1\u0116\15\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\17\3\1\u0117\3\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\17\3\1\u0118"+
    "\3\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\20\3\1\216\2\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\12\3\1\u0119\10\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\21\0\1\u011a\60\0\1\u011b\71\0\1\u011c\65\0"+
    "\1\262\6\0\1\u011d\1\0\1\263\56\0\1\u011e\72\0"+
    "\1\u011f\4\0\1\u0120\57\0\1\u0121\65\0\1\u0122\74\0"+
    "\1\u0123\3\0\1\u0124\60\0\1\u0125\123\0\4\u0126\63\0"+
    "\1\u0126\1\0\1\u0126\1\0\1\u0126\37\0\1\u011d\56\0"+
    "\1\u011a\70\0\1\365\11\0\1\366\5\0\1\367\23\0"+
    "\1\370\24\0\1\u0127\10\0\1\u0128\74\0\1\u0129\62\0"+
    "\1\u0128\2\0\1\u0127\64\0\1\u0128\2\0\1\u012a\44\0"+
    "\1\170\3\0\6\170\1\u012b\14\170\7\0\1\170\1\0"+
    "\15\170\4\0\1\170\6\0\1\170\3\0\3\170\1\u012c"+
    "\17\170\7\0\1\170\1\0\15\170\4\0\1\170\6\0"+
    "\1\3\3\0\12\3\1\131\10\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\17\3\1\u012d\1\3\1\175"+
    "\1\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\17\3\1\305\3\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\20\3\1\u012e\2\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\110\17\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\3\3\1\u012f"+
    "\17\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\16\3\1\u0130\4\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\16\3\1\u0131\4\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\u0132\17\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\1\3\1\u0133"+
    "\21\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\17\3\1\u0134\3\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\1\3\1\u0135\21\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\12\3\1\u0112\10\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\2\3\1\u0136"+
    "\20\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\12\3\1\307\10\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\15\3\1\u0137\5\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\7\3\1\u0138\13\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\7\3\1\u0139"+
    "\13\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\17\3\1\u013a\3\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\3\3\1\115\17\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\7\3\1\u013b\13\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\4\3\1\u013c"+
    "\16\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\1\u0101\22\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\12\3\1\u0101\10\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\1\3\1\u010b\21\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\5\3\1\u013d\15\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\23\0\1\150\57\0\1\u0126"+
    "\73\0\1\u0126\10\0\1\u0126\61\0\1\u0126\76\0\1\u0126"+
    "\55\0\1\u0126\64\0\1\u0126\73\0\1\u0126\74\0\1\u0126"+
    "\1\0\1\u0126\67\0\1\u0126\63\0\1\u0126\50\0\1\u013e"+
    "\25\0\1\u013e\6\0\1\u013e\57\0\1\u013f\51\0\1\u0140"+
    "\101\0\1\u0141\45\0\1\170\3\0\16\170\1\u0142\4\170"+
    "\7\0\1\170\1\0\15\170\4\0\1\170\6\0\1\3"+
    "\3\0\5\3\1\u0143\15\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\12\3\1\115\10\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\16\3\1\u0144\4\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\16\3"+
    "\1\u012e\4\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\20\3\1\u0107\2\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\6\3\1\u0133\14\3\1\61\1\47"+
    "\5\0\1\3\1\0\13\3\1\u0133\1\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\10\3"+
    "\1\u0133\12\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\3\3\1\u0145\17\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\7\3\1\u0146\13\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\7\3\1\u0147\13\3"+
    "\1\61\1\47\5\0\1\3\1\0\15\3\1\0\1\47"+
    "\2\0\1\3\2\0\1\55\3\0\1\3\3\0\2\3"+
    "\1\u0148\20\3\1\61\1\47\5\0\1\3\1\0\15\3"+
    "\1\0\1\47\2\0\1\3\2\0\1\55\3\0\1\3"+
    "\3\0\17\3\1\u0149\3\3\1\61\1\47\5\0\1\3"+
    "\1\0\15\3\1\0\1\47\2\0\1\3\2\0\1\55"+
    "\3\0\1\3\3\0\1\3\1\u014a\21\3\1\61\1\47"+
    "\5\0\1\3\1\0\15\3\1\0\1\47\2\0\1\3"+
    "\2\0\1\55\3\0\1\3\3\0\1\u014b\22\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\45\0\5\u014c\37\0\1\u014d\60\0"+
    "\1\u014e\65\0\1\u014d\62\0\1\170\3\0\4\170\1\u014f"+
    "\16\170\7\0\1\170\1\0\15\170\4\0\1\170\6\0"+
    "\1\3\3\0\12\3\1\u0150\10\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\345\6\3\1\345"+
    "\10\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\20\3\1\u0151\2\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\1\3\1\u0152\15\3\1\u0152\3\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\17\3\1\u0153"+
    "\3\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\1\3\1\342\21\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\1\3\1\u0154\21\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\10\3\1\u0155\12\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\45\0\5\u0156\41\0\1\366\47\0"+
    "\1\3\3\0\4\3\1\216\16\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\4\3\1\u0157\16\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\3\0\1\3\3\0\1\3\1\u0158"+
    "\21\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\20\3\1\u0159\2\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\17\3\1\u015a\1\3\1\345\1\3\1\61"+
    "\1\47\5\0\1\3\1\0\15\3\1\0\1\47\2\0"+
    "\1\3\2\0\1\55\45\0\5\u015b\21\0\1\3\3\0"+
    "\17\3\1\302\3\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\20\3\1\u015c\2\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\3\0\1\3\3\0\3\3\1\u015d\3\3\1\u015d"+
    "\7\3\1\u015d\3\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0"+
    "\1\3\3\0\3\3\1\u015e\17\3\1\61\1\47\5\0"+
    "\1\3\1\0\15\3\1\0\1\47\2\0\1\3\2\0"+
    "\1\55\45\0\5\u015f\21\0\1\3\3\0\7\3\1\u0152"+
    "\13\3\1\61\1\47\5\0\1\3\1\0\15\3\1\0"+
    "\1\47\2\0\1\3\2\0\1\55\3\0\1\3\3\0"+
    "\7\3\1\345\13\3\1\61\1\47\5\0\1\3\1\0"+
    "\15\3\1\0\1\47\2\0\1\3\2\0\1\55\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\10\1\1\1\11\24\1\7\11\16\1\1\11"+
    "\62\1\1\11\4\1\4\0\1\1\2\0\1\1\7\11"+
    "\1\1\1\0\1\11\72\1\1\0\1\1\4\0\56\1"+
    "\23\0\41\1\1\0\1\11\14\0\1\1\2\0\23\1"+
    "\4\0\12\1\2\0\1\11\7\1\1\0\4\1\1\0"+
    "\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	/* Per disattivare il debugging, quindi la stampa dei simboli riconosciuti
	da parte dello scanner impostare la costante _DEBUG a false */
	private static final boolean _DEBUG = false;
	private Symbol symbol(int type) {
		if (_DEBUG) System.out.print("# "+type+" "+yytext()+"\n");	
		return new Symbol(type, yyline, yycolumn);
  	}
	private Symbol symbol(int type, Object value) {
	    	if (_DEBUG) System.out.print("# "+type+" > " +value+"\n");
		return new Symbol(type, yyline, yycolumn, value);
	}
	private int lines=0;	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return symbol(sym.Com_Find);
          }
        case 65: break;
        case 48: 
          { return symbol(sym.Com_If_2);
          }
        case 66: break;
        case 9: 
          { return symbol(sym.SC);
          }
        case 67: break;
        case 23: 
          { return symbol(sym.Prep_supp);
          }
        case 68: break;
        case 63: 
          { return symbol(sym.Dimension_Criteria);
          }
        case 69: break;
        case 61: 
          { return symbol(sym.Com_For);
          }
        case 70: break;
        case 11: 
          { return symbol(sym.Minus,new String(yytext()));
          }
        case 71: break;
        case 14: 
          { return symbol(sym.C_Ug,new String(yytext()));
          }
        case 72: break;
        case 36: 
          { return symbol(sym.C_Orr,new String("|"));
          }
        case 73: break;
        case 16: 
          { return symbol(sym.Magg,new String(yytext()));
          }
        case 74: break;
        case 4: 
          { return symbol(sym.Div,new String(yytext()));
          }
        case 75: break;
        case 55: 
          { return symbol(sym.Com_If_e);
          }
        case 76: break;
        case 21: 
          { return symbol(sym.Path,new String(yytext()));
          }
        case 77: break;
        case 10: 
          { return symbol(sym.Plus,new String(yytext()));
          }
        case 78: break;
        case 45: 
          { return symbol(sym.Vint, new Float(yytext()));
          }
        case 79: break;
        case 46: 
          { return symbol(sym.Com_If_m);
          }
        case 80: break;
        case 32: 
          { return symbol(sym.Minug,new String(yytext()));
          }
        case 81: break;
        case 6: 
          { return symbol(sym.RO);
          }
        case 82: break;
        case 34: 
          { return symbol(sym.Diver,new String("!="));
          }
        case 83: break;
        case 47: 
          { return symbol(sym.Com_Ex);
          }
        case 84: break;
        case 18: 
          { return symbol(sym.C_Or,new String("|"));
          }
        case 85: break;
        case 19: 
          { return symbol(sym.C_And,new String("&"));
          }
        case 86: break;
        case 52: 
          { return symbol(sym.Where);
          }
        case 87: break;
        case 58: 
          { return symbol(sym.Com_P);
          }
        case 88: break;
        case 39: 
          { //System.out.println("invio una myVar");
					return symbol(sym.Var,new String(yytext()));
          }
        case 89: break;
        case 60: 
          { return symbol(sym.Name);
          }
        case 90: break;
        case 24: 
          { return symbol(sym.Com_Cp);
          }
        case 91: break;
        case 2: 
          { ;
          }
        case 92: break;
        case 54: 
          { return symbol(sym.Com_MKDir);
          }
        case 93: break;
        case 62: 
          { return symbol(sym.Permission_Criteria);
          }
        case 94: break;
        case 57: 
          { System.out.println("dentro script");
					return symbol(sym.Start_S);
          }
        case 95: break;
        case 31: 
          { return symbol(sym.C_Ugg,new String(yytext()));
          }
        case 96: break;
        case 1: 
          { System.out.println("file: "+yytext());
					return symbol(sym.File,new String(yytext()));
          }
        case 97: break;
        case 50: 
          { return symbol(sym.Com_Str);
          }
        case 98: break;
        case 42: 
          { return symbol(sym.Order,new String(yytext()));
          }
        case 99: break;
        case 59: 
          { return symbol(sym.FUnit);
          }
        case 100: break;
        case 44: 
          { return symbol(sym.IUnit);
          }
        case 101: break;
        case 15: 
          { return symbol(sym.Min,new String(yytext()));
          }
        case 102: break;
        case 7: 
          { return symbol(sym.RC);
          }
        case 103: break;
        case 33: 
          { return symbol(sym.Minor);
          }
        case 104: break;
        case 8: 
          { return symbol(sym.SO);
          }
        case 105: break;
        case 56: 
          { return symbol(sym.Throw_S);
          }
        case 106: break;
        case 40: 
          { return symbol(sym.Date_Criteria);
          }
        case 107: break;
        case 38: 
          { System.out.println("str: "+yytext());
					String s = new String(yytext());
					return symbol(sym.Str,s.substring(1, s.length()-1));
          }
        case 108: break;
        case 22: 
          { return symbol(sym.Com_Mov);
          }
        case 109: break;
        case 29: 
          { return symbol(sym.Com_Ls);
          }
        case 110: break;
        case 3: 
          { lines++;System.out.println("\t\tlinea:"+lines);return symbol(sym.EL);
          }
        case 111: break;
        case 41: 
          { System.out.println("dentro script");
					return symbol(sym.End_S);
          }
        case 112: break;
        case 25: 
          { return symbol(sym.Com_Cd);
          }
        case 113: break;
        case 43: 
          { return symbol(sym.Obj,new String(yytext()));
          }
        case 114: break;
        case 35: 
          { return symbol(sym.Maggug,new String(yytext()));
          }
        case 115: break;
        case 20: 
          { System.out.println("errore: "+yytext());
          }
        case 116: break;
        case 53: 
          { return symbol(sym.Com_For_e);
          }
        case 117: break;
        case 37: 
          { return symbol(sym.C_Andd,new String("&"));
          }
        case 118: break;
        case 28: 
          { return symbol(sym.Com_For_m);
          }
        case 119: break;
        case 30: 
          { yybegin(comment);
          }
        case 120: break;
        case 27: 
          { return symbol(sym.Com_Rm);
          }
        case 121: break;
        case 12: 
          { return symbol(sym.Pv);
          }
        case 122: break;
        case 49: 
          { return symbol(sym.Bool,new Boolean(yytext()));
          }
        case 123: break;
        case 13: 
          { return symbol(sym.Int, new Integer(yytext()));
          }
        case 124: break;
        case 17: 
          { return symbol(sym.C_Not,new String("!"));
          }
        case 125: break;
        case 5: 
          { return symbol(sym.Times,new String(yytext()));
          }
        case 126: break;
        case 64: 
          { System.out.println("Data raccolta: " +yytext());
						String tdata = yytext().substring(0,2)+yytext().substring(3,5)+yytext().substring(6,10);
						System.out.println("Data trimmed: " +tdata);
						return symbol(sym.Data, new String(tdata));
          }
        case 127: break;
        case 26: 
          { return symbol(sym.Com_If);
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
