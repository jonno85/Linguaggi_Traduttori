/* The following code was generated by JFlex 1.4.1 on 06/09/11 17.48 */

package it.polito.lt.skype.generated.parser;

import java_cup.runtime.*;
import it.polito.lt.skype.generated.parser.sym;
import java.util.*;
import java.text.*;
import it.polito.lt.skype.manager.*;
import it.polito.lt.skype.command.*;
import it.polito.lt.skype.bot.*;


 	/* NB: dato che JFlex genera la classe e i costruttori omettendo "public" 
	* e dato che l'ant-clean deve pulire anche i generati, 
	* ricordarsi ad ogni generazione dello scanner di aggiungere public 
	* al nome della classe Lexer ai costruttori!
	* NB2: risolto con ant task da jonni
	* */





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 06/09/11 17.48 from the specification file
 * <tt>/home/robizz/gitRepo/Linguaggi_Traduttori fork da jo/parser/scanner.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int script = 2;
  public static final int YYINITIAL = 0;
  public static final int comment = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\2\0\1\3\22\0\1\1\1\62\2\57\1\67"+
    "\1\57\1\64\1\66\1\32\1\33\1\31\1\36\1\4\1\37\1\65"+
    "\1\30\1\43\1\47\1\45\1\46\6\44\1\57\1\40\1\60\1\56"+
    "\1\61\1\57\1\0\1\17\1\21\1\12\1\22\1\10\1\42\1\27"+
    "\1\5\1\24\1\41\1\52\1\23\1\7\1\25\1\6\1\20\1\55"+
    "\1\15\1\14\1\11\1\13\1\16\1\53\1\50\1\26\1\51\1\34"+
    "\1\57\1\35\3\0\1\17\1\21\1\12\1\22\1\10\1\42\1\27"+
    "\1\5\1\24\1\41\1\52\1\23\1\7\1\25\1\6\1\20\1\55"+
    "\1\15\1\14\1\11\1\13\1\16\1\53\1\50\1\26\1\51\1\57"+
    "\1\63\1\57\133\0\1\54\37\0\1\54\uff06\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\4\1\1\4\14\1"+
    "\1\5\1\1\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\1\4\15\2\1\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\17\1\1\1\2\1\1\1\0"+
    "\2\1\1\23\3\1\1\25\7\1\1\26\11\1\1\27"+
    "\1\30\1\1\1\4\1\31\1\1\1\4\1\32\12\1"+
    "\1\33\3\1\1\34\3\1\1\31\3\1\1\35\1\0"+
    "\3\1\4\0\1\15\2\0\1\1\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\4\1\0\1\4\11\0\1\44"+
    "\3\45\1\46\1\47\1\0\1\47\7\0\1\47\1\0"+
    "\1\1\1\4\1\1\1\50\11\1\1\51\20\1\1\52"+
    "\2\1\1\24\7\1\1\50\1\1\1\53\6\1\1\26"+
    "\3\1\1\0\1\54\4\0\1\55\1\1\5\0\1\4"+
    "\4\0\2\45\11\0\1\42\5\1\1\56\2\1\1\57"+
    "\1\1\1\60\1\1\1\61\2\1\1\27\1\62\3\1"+
    "\1\63\10\1\1\64\5\1\1\16\1\1\1\65\2\1"+
    "\1\53\23\0\1\4\2\45\1\47\2\1\1\66\2\1"+
    "\1\67\11\1\1\70\6\1\1\71\7\1\1\0\1\54"+
    "\14\0\1\72\2\0\1\45\1\73\2\1\1\62\1\1"+
    "\1\32\1\1\1\63\3\1\1\43\5\1\1\74\1\1"+
    "\4\0\1\45\10\1\1\75\2\0\1\72\1\76\2\1"+
    "\1\77\3\1\1\0\2\1\1\100\1\1\1\0\1\77"+
    "\1\100\1\1\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\160\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\160\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\160\0\160\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\250\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\250\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\250\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\250\0\250\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u0e38\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\250\0\u1228\0\u1260\0\u1298\0\250"+
    "\0\u12d0\0\u1308\0\u1340\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0"+
    "\0\160\0\160\0\160\0\160\0\160\0\160\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810"+
    "\0\u1848\0\u0850\0\160\0\u1880\0\u18b8\0\u18f0\0\160\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8"+
    "\0\u1b20\0\160\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\250\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8"+
    "\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178"+
    "\0\u21b0\0\250\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0"+
    "\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680"+
    "\0\u26b8\0\u26f0\0\u14c8\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808"+
    "\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\160\0\u2990"+
    "\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50"+
    "\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\250\0\u2cd8"+
    "\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\250\0\u2df0\0\u2e28\0\250"+
    "\0\u2e60\0\250\0\u2e98\0\250\0\u2ed0\0\u2f08\0\250\0\u2f40"+
    "\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100"+
    "\0\u3138\0\u3170\0\u31a8\0\u31e0\0\250\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\250\0\u3330\0\250\0\u3368\0\u33a0\0\250"+
    "\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560"+
    "\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0\0\u36e8\0\u3720"+
    "\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0"+
    "\0\u3918\0\250\0\u3950\0\u3988\0\250\0\u39c0\0\u39f8\0\u3a30"+
    "\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\250\0\u3bb8"+
    "\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\250\0\u3d08\0\u3d40"+
    "\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\160\0\u3ec8"+
    "\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088"+
    "\0\u40c0\0\u40f8\0\u4130\0\u3758\0\u4168\0\u41a0\0\u41d8\0\u1880"+
    "\0\u4210\0\u4248\0\250\0\u4280\0\u42b8\0\u42f0\0\250\0\u4328"+
    "\0\u4360\0\u4398\0\250\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0"+
    "\0\250\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638"+
    "\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\250"+
    "\0\u47f8\0\u4830\0\160\0\u1880\0\u4868\0\u48a0\0\250\0\u48d8"+
    "\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u4a60\0\u4a98"+
    "\0\u4ad0\0\250\0\u4b08\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\4\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\4\1\42\1\43\1\44\1\45\1\46\1\45\1\4"+
    "\1\47\1\4\1\50\2\4\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\2\5\1\0"+
    "\26\5\1\63\36\5\70\0\1\4\4\0\23\4\1\64"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\65\1\0\1\4\2\0\2\6\64\0\1\4\4\0"+
    "\1\4\1\66\2\4\1\67\16\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\10\4\1\70\12\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\1\4\1\71\1\4\1\72\2\4\1\73"+
    "\2\4\1\74\11\4\1\64\1\4\5\0\1\4\1\0"+
    "\11\4\1\75\3\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\7\4\1\76\6\4\1\77\1\4\1\100"+
    "\2\4\1\64\1\4\5\0\1\4\1\0\7\4\1\101"+
    "\4\4\1\102\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\103\1\104\6\4\1\105\1\4\1\106\4\4"+
    "\1\107\3\4\1\64\1\4\5\0\1\4\1\0\7\4"+
    "\1\110\5\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\111\1\112\1\4\1\113\4\4\1\114\1\4"+
    "\1\115\1\116\1\4\1\117\5\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\22\4\1\120\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\121\2\4\1\122\1\123\2\4\1\124\13\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\2\4\1\125\7\4"+
    "\1\106\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\12\4"+
    "\1\126\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\7\4"+
    "\1\127\6\4\1\130\1\4\1\131\2\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\1\132\2\4\1\133\4\4\1\134"+
    "\4\4\1\135\1\4\1\136\1\4\1\124\1\4\1\64"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\65\1\0\2\4\4\0\23\4\1\64\1\4\5\0"+
    "\1\4\1\0\10\4\1\137\4\4\4\0\1\4\2\0"+
    "\1\65\1\0\2\4\4\0\1\4\1\140\1\4\1\141"+
    "\6\4\1\142\4\4\1\143\3\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\7\4\1\144\2\4\1\145\4\4\1\146"+
    "\3\4\1\64\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\65\1\0\2\4\4\0\20\4\1\147"+
    "\2\4\1\64\1\4\5\0\1\4\1\0\1\4\1\150"+
    "\13\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\3\4\1\151\17\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\1\4\1\117\15\4\1\152\3\4\1\64\1\4\5\0"+
    "\1\4\1\0\10\4\1\47\4\4\4\0\1\4\2\0"+
    "\1\65\1\0\1\4\1\153\4\0\23\153\1\0\1\154"+
    "\7\0\2\153\5\0\6\153\4\0\1\153\4\0\1\153"+
    "\1\4\4\0\23\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\155\1\0\2\4\4\0"+
    "\1\4\1\156\10\4\1\157\4\4\1\160\3\4\1\64"+
    "\1\4\5\0\1\4\1\0\15\4\4\0\1\4\2\0"+
    "\1\65\1\0\1\4\1\0\1\161\5\0\1\162\11\0"+
    "\1\163\5\0\1\164\13\0\1\44\4\165\2\0\1\166"+
    "\12\0\1\167\3\0\1\161\5\0\1\162\11\0\1\163"+
    "\5\0\1\164\13\0\5\44\2\0\1\166\12\0\1\167"+
    "\3\0\1\161\5\0\1\162\11\0\1\163\5\0\1\164"+
    "\13\0\5\165\2\0\1\166\12\0\1\167\3\0\1\161"+
    "\5\0\1\162\11\0\1\163\5\0\1\164\13\0\1\165"+
    "\3\44\1\165\2\0\1\166\12\0\1\167\2\0\1\4"+
    "\4\0\17\4\1\132\3\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\170\22\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\1\4\56\0"+
    "\1\171\1\0\1\172\1\173\64\0\1\174\11\0\1\4"+
    "\4\0\23\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\1\173\3\0\1\4\2\0\1\65\1\0\1\4\63\0"+
    "\1\175\70\0\1\176\10\0\1\177\3\0\1\200\1\201"+
    "\1\0\1\202\1\203\2\0\1\204\1\205\1\206\1\207"+
    "\3\0\1\210\21\0\1\211\16\0\2\212\2\0\62\212"+
    "\1\213\1\212\1\214\4\0\10\214\1\215\7\214\1\216"+
    "\2\214\1\64\1\214\5\0\1\4\1\0\2\214\5\4"+
    "\6\214\4\0\1\214\2\0\1\65\1\0\1\214\30\0"+
    "\1\217\37\0\1\153\4\0\23\153\1\0\1\153\7\0"+
    "\2\153\5\0\6\153\4\0\1\153\4\0\1\153\5\0"+
    "\1\220\3\0\1\221\1\222\1\0\1\223\1\224\2\0"+
    "\1\225\1\226\1\227\1\230\3\0\1\231\1\0\1\232"+
    "\17\0\1\233\16\0\1\4\4\0\6\4\1\234\14\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\2\4\1\235\20\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\1\4\1\236\1\4"+
    "\1\237\6\4\1\237\10\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\7\4\1\240\1\4\1\241\3\4\1\242\5\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\20\4\1\243\2\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\1\4\1\244\21\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\15\4\1\245\5\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\3\4\1\246\17\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\7\4\1\247\7\4"+
    "\1\250\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\15\4"+
    "\1\251\5\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\252\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\6\4"+
    "\1\253\14\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\254\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\1\4"+
    "\1\255\4\4\1\256\14\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\10\4\1\124\12\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\13\4\1\257\7\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\4\4\1\124\16\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\12\4\1\260\10\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\13\4\1\261\4\4\1\135\2\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\10\4\1\262\12\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\263\17\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\10\4\1\264\7\4\1\265\2\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\13\4\1\124\7\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\6\4\1\266\14\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\1\4\1\267\21\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\3\4\1\270\17\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\12\4\1\271\10\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\17\4\1\117\3\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\5\4\1\272\15\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\4\4\1\273\11\4"+
    "\1\274\4\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\15\4"+
    "\1\275\5\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\10\4"+
    "\1\276\12\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\1\4"+
    "\1\277\15\4\1\300\3\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\23\4\1\64\1\4\5\0\1\4\1\0\1\4"+
    "\1\124\13\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\6\4\1\104\14\4\1\64\1\4\5\0\1\4"+
    "\1\0\13\4\1\104\1\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\23\4\1\64\1\4\5\0\1\4"+
    "\1\0\4\4\1\124\10\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\5\4\1\124\3\4\1\301\11\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\5\4\1\302\1\4"+
    "\1\127\6\4\1\303\4\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\4\4\1\304\14\4\1\305\1\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\2\4\1\306\5\4\1\307\12\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\6\4\1\310\11\4"+
    "\1\311\2\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\7\4"+
    "\1\110\13\4\1\64\1\4\5\0\1\4\1\0\11\4"+
    "\1\312\3\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\17\4\1\313\3\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\23\4\1\64\1\4\5\0\1\4\1\0\7\4"+
    "\1\314\5\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\4\1\315\21\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\1\4"+
    "\1\153\4\0\23\153\1\64\1\153\5\0\1\153\1\0"+
    "\15\153\4\0\1\153\4\0\1\153\5\0\1\177\3\0"+
    "\1\200\1\201\1\0\1\202\1\203\2\0\1\204\1\205"+
    "\1\206\1\207\3\0\1\210\1\0\1\232\17\0\1\211"+
    "\16\0\1\4\4\0\10\4\1\316\12\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\16\4\1\317\4\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\16\4\1\320\1\4\1\321\2\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\1\4\7\0\1\162\11\0\1\163"+
    "\5\0\1\164\22\0\1\166\25\0\1\322\10\0\1\323"+
    "\74\0\1\324\62\0\1\323\2\0\1\322\44\0\1\325"+
    "\5\0\1\162\11\0\1\163\5\0\1\164\1\326\6\0"+
    "\1\326\3\0\5\44\2\0\1\166\12\0\1\167\23\0"+
    "\1\323\2\0\1\327\106\0\5\330\20\0\1\4\4\0"+
    "\3\4\1\331\17\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\1\4\11\0"+
    "\1\332\75\0\1\333\30\0\1\334\25\0\1\335\11\0"+
    "\1\336\54\0\1\337\6\0\1\337\72\0\1\333\55\0"+
    "\1\336\14\0\1\340\3\0\1\337\112\0\1\341\24\0"+
    "\1\342\105\0\1\343\114\0\1\211\42\0\1\336\43\0"+
    "\1\214\4\0\23\214\1\64\1\214\5\0\1\214\1\0"+
    "\15\214\4\0\1\214\2\0\1\65\1\0\2\214\4\0"+
    "\3\214\1\344\17\214\1\64\1\214\5\0\1\214\1\0"+
    "\15\214\4\0\1\214\2\0\1\65\1\0\2\214\4\0"+
    "\12\214\1\345\10\214\1\64\1\214\5\0\1\214\1\0"+
    "\15\214\4\0\1\214\2\0\1\65\1\0\1\214\11\0"+
    "\1\346\75\0\1\347\30\0\1\350\25\0\1\351\11\0"+
    "\1\352\54\0\1\232\6\0\1\232\72\0\1\347\55\0"+
    "\1\352\14\0\1\353\3\0\1\232\112\0\1\354\24\0"+
    "\1\355\105\0\1\356\114\0\1\233\42\0\1\352\43\0"+
    "\1\4\4\0\10\4\1\305\12\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\16\4\1\124\4\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\10\4\1\357\12\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\4\4\1\360\16\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\3\4\1\74\17\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\17\4\1\361\3\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\1\4\1\104\21\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\11\4\1\362\11\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\17\4\1\363\3\4\1\64\1\4\5\0"+
    "\1\4\1\0\15\4\4\0\1\4\2\0\1\65\1\0"+
    "\2\4\4\0\22\4\1\364\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\3\4\1\365\17\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\2\4\1\366\20\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\17\4\1\367\3\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\5\4\1\370\15\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\12\4\1\371\10\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\20\4\1\372\2\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\11\4\1\373\11\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\3\4\1\374\17\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\4\1\237\15\4\1\237\3\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\20\4\1\375\2\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\17\4\1\376\1\4\1\377\1\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\5\4\1\373\15\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\7\4\1\272\2\4"+
    "\1\u0100\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\4\4"+
    "\1\u0101\16\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\5\4"+
    "\1\u0102\15\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\12\4"+
    "\1\u0103\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\23\4"+
    "\1\64\1\4\5\0\1\4\1\0\12\4\1\144\2\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\23\4"+
    "\1\64\1\4\5\0\1\4\1\0\11\4\1\u0104\3\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\2\4"+
    "\1\u0105\5\4\1\u0106\12\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\10\4\1\u0107\12\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\4\1\u0108\21\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\12\4\1\u0109\10\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\2\4\1\u010a\20\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\7\4\1\u010b\13\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\20\4\1\u010c\2\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\3\4\1\u010d\17\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\10\4\1\272\12\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\3\4\1\u010e\17\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\3\4\1\305\6\4\1\237\10\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\7\4\1\237\13\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\u010f\17\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\u0110\17\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\20\4\1\u0111\2\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\5\4\1\u0112\15\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\u0113\17\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\23\4\1\64\1\4\5\0\1\4"+
    "\1\0\10\4\1\u0114\4\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\4\4\1\u0115\16\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\10\4\1\u0116\12\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\u0117\17\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\7\4\1\256\13\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\u0118\17\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\251\11\4\1\u0104\5\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\1\4\27\0\1\u0119\51\0\1\u011a"+
    "\64\0\1\u011b\1\u011c\4\0\1\u011d\2\0\1\u011e\1\0"+
    "\1\163\1\u011f\2\0\1\u0120\1\0\1\164\11\0\1\u0121"+
    "\1\u0122\1\u0123\3\0\1\u0124\2\0\1\166\23\0\1\u011b"+
    "\1\u0125\4\0\1\u011d\2\0\1\u011e\2\0\1\u011f\2\0"+
    "\1\u0120\13\0\1\u0121\1\u0122\1\u0123\3\0\1\u0124\43\0"+
    "\1\u0126\45\0\1\u0127\5\0\1\u0128\11\0\1\u0129\5\0"+
    "\1\u012a\13\0\5\330\2\0\1\u012b\15\0\1\4\4\0"+
    "\10\4\1\301\12\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\1\4\7\0"+
    "\1\u012c\75\0\1\337\63\0\1\337\103\0\1\340\62\0"+
    "\1\337\111\0\1\337\72\0\1\337\34\0\1\337\71\0"+
    "\1\334\53\0\1\214\4\0\7\214\1\u012d\13\214\1\64"+
    "\1\214\5\0\1\214\1\0\15\214\4\0\1\214\2\0"+
    "\1\65\1\0\2\214\4\0\2\214\1\u012e\20\214\1\64"+
    "\1\214\5\0\1\214\1\0\15\214\4\0\1\214\2\0"+
    "\1\65\1\0\1\214\7\0\1\u012f\75\0\1\232\63\0"+
    "\1\232\103\0\1\353\62\0\1\232\111\0\1\232\72\0"+
    "\1\232\34\0\1\232\71\0\1\350\53\0\1\4\4\0"+
    "\10\4\1\u0130\12\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\23\4\1\64\1\4\5\0\1\4\1\0\1\4\1\u0131"+
    "\13\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\17\4\1\74\3\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\10\4\1\u0132\12\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\6\4\1\u0133\14\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\17\4\1\u0134\3\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\23\4\1\64\1\4\5\0\1\4\1\0\1\4\1\u0135"+
    "\13\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\16\4\1\u0113\4\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\12\4\1\u0104\10\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\2\4\4\0"+
    "\22\4\1\u0136\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\12\4"+
    "\1\377\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\4\4"+
    "\1\u0137\16\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\u0138\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\u0139\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\16\4"+
    "\1\312\4\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\2\4"+
    "\1\u013a\1\4\1\u013b\6\4\1\u013c\7\4\1\64\1\4"+
    "\5\0\1\4\1\0\1\4\1\u013d\13\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\13\4\1\u013e\7\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\4\4\1\u013f\16\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\17\4\1\u0140\3\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\10\4\1\u0141\12\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\20\4\1\u0142\2\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\3\4\1\u0143\13\4"+
    "\1\u0144\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\7\4"+
    "\1\u0145\13\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\4\4"+
    "\1\u0146\16\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\4\4"+
    "\1\u0147\16\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\20\4"+
    "\1\u0148\2\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\5\4"+
    "\1\u0149\15\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\5\4"+
    "\1\u014a\15\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\17\4"+
    "\1\u014b\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\17\4"+
    "\1\u014c\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\20\4"+
    "\1\257\2\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\12\4"+
    "\1\u014d\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\1\4\17\0\1\u014e"+
    "\60\0\1\u014f\71\0\1\u0150\65\0\1\322\6\0\1\u0151"+
    "\1\0\1\323\56\0\1\u0152\72\0\1\u0153\4\0\1\u0154"+
    "\57\0\1\u0155\65\0\1\u0156\74\0\1\u0157\3\0\1\u0158"+
    "\60\0\1\u0159\123\0\4\u015a\63\0\1\u015a\1\0\1\u015a"+
    "\1\0\1\u015a\37\0\1\u0151\56\0\1\u014e\70\0\1\u0128"+
    "\11\0\1\u0129\5\0\1\u012a\22\0\1\u012b\25\0\1\u015b"+
    "\10\0\1\u015c\74\0\1\u015d\62\0\1\u015c\2\0\1\u015b"+
    "\64\0\1\u015c\2\0\1\u015e\66\0\1\337\44\0\1\214"+
    "\4\0\6\214\1\u015f\14\214\1\64\1\214\5\0\1\214"+
    "\1\0\15\214\4\0\1\214\2\0\1\65\1\0\2\214"+
    "\4\0\3\214\1\u0160\17\214\1\64\1\214\5\0\1\214"+
    "\1\0\15\214\4\0\1\214\2\0\1\65\1\0\1\214"+
    "\23\0\1\232\44\0\1\4\4\0\12\4\1\144\10\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\17\4\1\u0161\1\4"+
    "\1\237\1\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\17\4"+
    "\1\370\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\20\4"+
    "\1\u0162\2\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\117\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\u0163\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\16\4"+
    "\1\u0164\4\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\16\4"+
    "\1\u0165\4\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\u0166\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\1\4"+
    "\1\u0167\21\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\17\4"+
    "\1\u0168\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\1\4"+
    "\1\u0169\21\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\12\4"+
    "\1\u0146\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\2\4"+
    "\1\u016a\20\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\12\4"+
    "\1\372\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\15\4"+
    "\1\u016b\5\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\7\4"+
    "\1\u016c\13\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\7\4"+
    "\1\u016d\13\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\17\4"+
    "\1\u016e\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\125\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\7\4"+
    "\1\u016f\13\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\4\4"+
    "\1\u0170\16\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\1\u0171"+
    "\22\4\1\64\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\65\1\0\2\4\4\0\12\4\1\u0171"+
    "\10\4\1\64\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\65\1\0\2\4\4\0\1\4\1\u013f"+
    "\21\4\1\64\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\65\1\0\2\4\4\0\5\4\1\u0172"+
    "\15\4\1\64\1\4\5\0\1\4\1\0\15\4\4\0"+
    "\1\4\2\0\1\65\1\0\1\4\21\0\1\163\57\0"+
    "\1\u015a\73\0\1\u015a\10\0\1\u015a\61\0\1\u015a\76\0"+
    "\1\u015a\55\0\1\u015a\64\0\1\u015a\73\0\1\u015a\74\0"+
    "\1\u015a\1\0\1\u015a\67\0\1\u015a\63\0\1\u015a\47\0"+
    "\1\u0173\26\0\1\u0173\6\0\1\u0173\57\0\1\u0174\51\0"+
    "\1\u0175\101\0\1\u0176\44\0\1\214\4\0\16\214\1\u0177"+
    "\4\214\1\64\1\214\5\0\1\214\1\0\15\214\4\0"+
    "\1\214\2\0\1\65\1\0\1\214\1\4\4\0\5\4"+
    "\1\u0178\15\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\12\4"+
    "\1\125\10\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\16\4"+
    "\1\u0179\4\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\16\4"+
    "\1\u0162\4\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\20\4"+
    "\1\u013b\2\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\6\4"+
    "\1\u0167\14\4\1\64\1\4\5\0\1\4\1\0\13\4"+
    "\1\u0167\1\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\10\4\1\u0167\12\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\3\4\1\u017a\17\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\7\4\1\u017b\13\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\7\4\1\u017c\13\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\2\4\1\u017d\20\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\17\4\1\u017e\3\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\4\1\u017f\21\4\1\64\1\4\5\0\1\4"+
    "\1\0\15\4\4\0\1\4\2\0\1\65\1\0\2\4"+
    "\4\0\1\u0180\22\4\1\64\1\4\5\0\1\4\1\0"+
    "\15\4\4\0\1\4\2\0\1\65\1\0\1\4\43\0"+
    "\5\u0181\37\0\1\u0182\60\0\1\u0183\65\0\1\u0182\61\0"+
    "\1\214\4\0\4\214\1\u0184\16\214\1\64\1\214\5\0"+
    "\1\214\1\0\15\214\4\0\1\214\2\0\1\65\1\0"+
    "\1\214\1\4\4\0\12\4\1\u0185\10\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\u0118\6\4\1\u0118\10\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\20\4\1\u0186\2\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\1\4\1\u0187\15\4"+
    "\1\u0187\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\17\4"+
    "\1\u0188\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\1\4"+
    "\1\u0115\21\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\1\4"+
    "\1\u0189\21\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\10\4"+
    "\1\u018a\12\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\1\4\43\0\5\u018b"+
    "\41\0\1\u0129\46\0\1\4\4\0\4\4\1\257\16\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\4\4\1\u018c\16\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\1\4\1\u018d\21\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\20\4\1\u018e\2\4"+
    "\1\64\1\4\5\0\1\4\1\0\15\4\4\0\1\4"+
    "\2\0\1\65\1\0\2\4\4\0\17\4\1\u018f\1\4"+
    "\1\u0118\1\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\1\4\43\0\5\u0190"+
    "\20\0\1\4\4\0\17\4\1\365\3\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\20\4\1\u0191\2\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\3\4\1\u0192\3\4\1\u0192\7\4"+
    "\1\u0192\3\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\2\4\4\0\3\4"+
    "\1\u0193\17\4\1\64\1\4\5\0\1\4\1\0\15\4"+
    "\4\0\1\4\2\0\1\65\1\0\1\4\43\0\5\u0194"+
    "\20\0\1\4\4\0\7\4\1\u0187\13\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\2\4\4\0\7\4\1\u0118\13\4\1\64\1\4"+
    "\5\0\1\4\1\0\15\4\4\0\1\4\2\0\1\65"+
    "\1\0\1\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19264];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\1\1\11\25\1\7\11\7\1\2\11"+
    "\12\1\1\0\67\1\1\0\3\1\4\0\1\1\2\0"+
    "\1\1\6\11\1\1\1\0\1\1\11\0\1\11\3\1"+
    "\1\11\1\1\1\0\1\1\7\0\1\11\1\0\66\1"+
    "\1\0\1\1\4\0\2\1\5\0\1\11\4\0\2\1"+
    "\11\0\52\1\23\0\42\1\1\0\1\11\14\0\1\1"+
    "\2\0\24\1\4\0\12\1\2\0\1\11\7\1\1\0"+
    "\4\1\1\0\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	/* Per disattivare il debugging, quindi la stampa dei simboli riconosciuti
	da parte dello scanner impostare la costante _DEBUG a false */
	private static final boolean _DEBUG = false;
	private Symbol symbol(int type) {
		if (_DEBUG) System.out.print("# "+type+" "+yytext()+"\n");	
		return new Symbol(type, yyline, yycolumn);
  	}
	private Symbol symbol(int type, Object value) {
	    	if (_DEBUG) System.out.print("# "+type+" > " +value+"\n");
		return new Symbol(type, yyline, yycolumn, value);
	}
	private int lines=0;	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return symbol(sym.Com_Find);
          }
        case 66: break;
        case 48: 
          { return symbol(sym.Com_If_2);
          }
        case 67: break;
        case 9: 
          { return symbol(sym.SC);
          }
        case 68: break;
        case 22: 
          { return symbol(sym.Prep_supp);
          }
        case 69: break;
        case 64: 
          { return symbol(sym.Dimension_Criteria);
          }
        case 70: break;
        case 61: 
          { return symbol(sym.Com_For);
          }
        case 71: break;
        case 11: 
          { return symbol(sym.Minus,new String(yytext()));
          }
        case 72: break;
        case 5: 
          { return symbol(sym.Div,new String(yytext()));
          }
        case 73: break;
        case 55: 
          { return symbol(sym.Com_If_e);
          }
        case 74: break;
        case 1: 
          { return symbol(sym.Path,new String(yytext()));
          }
        case 75: break;
        case 10: 
          { return symbol(sym.Plus,new String(yytext()));
          }
        case 76: break;
        case 14: 
          { return symbol(sym.C_Ug);
          }
        case 77: break;
        case 17: 
          { return symbol(sym.Magg);
          }
        case 78: break;
        case 65: 
          { Utility.mf("Data raccolta: " +yytext());
						/*SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
						Date date = sdf.parse(yytext());
						GregorianCalendar calendar = new GregorianCalendar();
						calendar.setTime(date);
						Utility.mf("Date: "+calendar.toString());
						return symbol(sym.GMA,calendar);*/
						String tdata = yytext().substring(0,2)+yytext().substring(3,5)+yytext().substring(6,10);
						Utility.mf("Data trimmed: " +tdata);
						return symbol(sym.Data, new String(tdata));
          }
        case 79: break;
        case 45: 
          { return symbol(sym.Vint, new Float(yytext()));
          }
        case 80: break;
        case 46: 
          { return symbol(sym.Com_If_m);
          }
        case 81: break;
        case 16: 
          { return symbol(sym.Min);
          }
        case 82: break;
        case 6: 
          { return symbol(sym.RO);
          }
        case 83: break;
        case 37: 
          { return symbol(sym.Var,new String(yytext()));
          }
        case 84: break;
        case 47: 
          { return symbol(sym.Com_Ex);
          }
        case 85: break;
        case 19: 
          { return symbol(sym.C_Or,new String("|"));
          }
        case 86: break;
        case 39: 
          { return symbol(sym.File,new String(yytext()));
          }
        case 87: break;
        case 34: 
          { return symbol(sym.C_Orr,new String("||"));
          }
        case 88: break;
        case 20: 
          { return symbol(sym.C_And,new String("&"));
          }
        case 89: break;
        case 32: 
          { return symbol(sym.Diver);
          }
        case 90: break;
        case 52: 
          { return symbol(sym.Where);
          }
        case 91: break;
        case 57: 
          { return symbol(sym.Com_P);
          }
        case 92: break;
        case 59: 
          { return symbol(sym.Name);
          }
        case 93: break;
        case 38: 
          { yybegin(YYINITIAL);
          }
        case 94: break;
        case 30: 
          { return symbol(sym.Minug);
          }
        case 95: break;
        case 23: 
          { return symbol(sym.Com_Cp);
          }
        case 96: break;
        case 2: 
          { ;
          }
        case 97: break;
        case 33: 
          { return symbol(sym.Maggug);
          }
        case 98: break;
        case 54: 
          { return symbol(sym.Com_MKDir);
          }
        case 99: break;
        case 63: 
          { return symbol(sym.Permission_Criteria);
          }
        case 100: break;
        case 4: 
          { return symbol(sym.Ext,new String(yytext()));
          }
        case 101: break;
        case 41: 
          { /*yybegin(YYINITIAL);*/ return symbol(sym.End_S);
          }
        case 102: break;
        case 50: 
          { return symbol(sym.Com_Str);
          }
        case 103: break;
        case 42: 
          { return symbol(sym.Order,new String(yytext()));
          }
        case 104: break;
        case 58: 
          { return symbol(sym.FUnit);
          }
        case 105: break;
        case 44: 
          { return symbol(sym.IUnit);
          }
        case 106: break;
        case 7: 
          { return symbol(sym.RC);
          }
        case 107: break;
        case 31: 
          { return symbol(sym.Minor);
          }
        case 108: break;
        case 8: 
          { return symbol(sym.SO);
          }
        case 109: break;
        case 60: 
          { return symbol(sym.Throw_S);
          }
        case 110: break;
        case 40: 
          { return symbol(sym.Date_Criteria);
          }
        case 111: break;
        case 21: 
          { return symbol(sym.Com_Mov);
          }
        case 112: break;
        case 28: 
          { return symbol(sym.Com_Ls);
          }
        case 113: break;
        case 35: 
          { return symbol(sym.C_Andd,new String("&&"));
          }
        case 114: break;
        case 3: 
          { lines++;System.out.println("\t\tlinea:"+lines);return symbol(sym.EL);
          }
        case 115: break;
        case 56: 
          { /*yybegin(script);*/ return symbol(sym.Start_S);
          }
        case 116: break;
        case 24: 
          { return symbol(sym.Com_Cd);
          }
        case 117: break;
        case 43: 
          { return symbol(sym.Obj,new String(yytext()));
          }
        case 118: break;
        case 15: 
          { System.out.println("errore: "+yytext());
          }
        case 119: break;
        case 53: 
          { return symbol(sym.Com_For_e);
          }
        case 120: break;
        case 27: 
          { return symbol(sym.Com_For_m);
          }
        case 121: break;
        case 29: 
          { yybegin(comment);
          }
        case 122: break;
        case 26: 
          { return symbol(sym.Com_Rm);
          }
        case 123: break;
        case 36: 
          { String s = new String(yytext());
					return symbol(sym.Str,s.substring(1, s.length()-1));
          }
        case 124: break;
        case 12: 
          { return symbol(sym.Pv);
          }
        case 125: break;
        case 49: 
          { return symbol(sym.Bool,new Boolean(yytext()));
          }
        case 126: break;
        case 13: 
          { return symbol(sym.Int, new Integer(yytext()));
          }
        case 127: break;
        case 62: 
          { return symbol(sym.Result);
          }
        case 128: break;
        case 18: 
          { return symbol(sym.C_Not,new String("!"));
          }
        case 129: break;
        case 25: 
          { return symbol(sym.Com_If);
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
