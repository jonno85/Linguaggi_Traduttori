/* The following code was generated by JFlex 1.4.1 on 9/13/11 12:15 PM */

package it.polito.lt.skype.generated.parser;

import java_cup.runtime.*;
import it.polito.lt.skype.generated.parser.sym;
import java.util.*;
import java.text.*;
import it.polito.lt.skype.manager.*;
import it.polito.lt.skype.command.*;
import it.polito.lt.skype.bot.*;


 	/* NB: dato che JFlex genera la classe e i costruttori omettendo "public" 
	* e dato che l'ant-clean deve pulire anche i generati, 
	* ricordarsi ad ogni generazione dello scanner di aggiungere public 
	* al nome della classe Lexer ai costruttori!
	* NB2: risolto con ant task da jonni
	* */





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/13/11 12:15 PM from the specification file
 * <tt>/home/jo/POLITO/Linguaggi_Traduttori/parser/scanner.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int script = 3;
  public static final int YYINITIAL = 0;
  public static final int exclude_script_code = 2;
  public static final int comment = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\2\0\1\3\22\0\1\1\1\62\2\66\1\70"+
    "\1\66\1\64\1\67\1\32\1\33\1\31\1\36\1\4\1\37\1\65"+
    "\1\30\1\43\1\47\1\45\1\46\6\44\1\66\1\40\1\60\1\56"+
    "\1\61\1\57\1\0\1\17\1\21\1\12\1\22\1\10\1\42\1\27"+
    "\1\5\1\24\1\41\1\52\1\23\1\7\1\25\1\6\1\20\1\55"+
    "\1\15\1\14\1\11\1\13\1\16\1\53\1\50\1\26\1\51\1\34"+
    "\1\66\1\35\3\0\1\17\1\21\1\12\1\22\1\10\1\42\1\27"+
    "\1\5\1\24\1\41\1\52\1\23\1\7\1\25\1\6\1\20\1\55"+
    "\1\15\1\14\1\11\1\13\1\16\1\53\1\50\1\26\1\51\1\66"+
    "\1\63\1\66\133\0\1\54\37\0\1\54\uff06\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\4\1\1\4\13\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\1"+
    "\4\14\2\1\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\16\1\1\1\2\1\25\1\26\5\25"+
    "\11\0\1\27\1\30\3\0\1\1\1\0\1\24\2\1"+
    "\1\22\3\1\1\31\5\1\1\32\11\1\1\33\1\34"+
    "\1\1\1\4\1\35\1\1\1\4\1\36\15\1\1\37"+
    "\3\1\1\35\2\1\1\40\1\0\3\1\4\0\1\14"+
    "\2\0\1\1\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\24\1\4\1\24\1\4\10\24\1\0\1\50"+
    "\3\51\1\52\10\0\1\53\2\0\1\54\3\0\1\55"+
    "\2\56\1\1\1\4\1\1\1\57\27\1\1\60\1\23"+
    "\6\1\1\57\1\1\1\61\5\1\1\32\3\1\1\0"+
    "\1\62\4\0\1\63\1\1\5\24\1\4\4\24\2\51"+
    "\6\0\1\64\7\0\1\56\1\46\6\1\1\65\2\1"+
    "\1\66\2\1\1\33\1\67\3\1\1\70\5\1\1\71"+
    "\5\1\1\15\3\1\1\61\23\0\1\4\2\51\3\0"+
    "\1\72\1\73\1\0\1\74\3\0\1\75\1\0\1\56"+
    "\2\1\1\76\13\1\1\77\3\1\1\100\7\1\1\0"+
    "\1\62\14\0\1\101\2\0\1\51\1\102\1\103\2\0"+
    "\1\104\4\0\1\56\2\1\1\67\1\1\1\36\1\1"+
    "\1\70\2\1\1\47\4\1\1\105\1\1\4\0\1\51"+
    "\1\0\2\106\3\0\1\56\6\1\1\107\2\0\1\101"+
    "\1\2\3\0\1\110\1\111\1\1\1\112\3\1\2\0"+
    "\1\1\1\113\1\1\2\0\1\112\1\113\1\1\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u05ca"+
    "\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u011d\0\u0921"+
    "\0\u095a\0\u0993\0\u011d\0\u09cc\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u011d\0\u011d\0\u0cea\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0792\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\344\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\344\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\344\0\u12b4\0\u12ed\0\u1326\0\u135f\0\344\0\344"+
    "\0\u1398\0\u13d1\0\u140a\0\u127b\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\344\0\u1644\0\u167d"+
    "\0\u16b6\0\344\0\u16ef\0\u1728\0\u011d\0\u1761\0\u179a\0\u17d3"+
    "\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b"+
    "\0\u19d4\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u0921\0\u011d\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u011d\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81"+
    "\0\u1eba\0\u1ef3\0\u0ae9\0\u1f2c\0\u1f65\0\u0ae9\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u011d\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\344"+
    "\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5"+
    "\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd"+
    "\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\344"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u18b7\0\u2af9\0\u2b32\0\u2b6b"+
    "\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u1a0d\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\344\0\u3219"+
    "\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\344\0\u336f\0\u33a8"+
    "\0\344\0\u33e1\0\u341a\0\344\0\u3453\0\u348c\0\u34c5\0\u34fe"+
    "\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\344\0\u368d"+
    "\0\u36c6\0\u36ff\0\u3738\0\u3771\0\344\0\u37aa\0\u37e3\0\u381c"+
    "\0\344\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab"+
    "\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b"+
    "\0\u3d74\0\u3dad\0\u011d\0\u0ae9\0\u3de6\0\u0ae9\0\u3e1f\0\u3e58"+
    "\0\u3e91\0\u0ae9\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\344\0\u3fae"+
    "\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176"+
    "\0\u41af\0\u41e8\0\344\0\u4221\0\u425a\0\u4293\0\344\0\u42cc"+
    "\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u011d"+
    "\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623"+
    "\0\u465c\0\u4695\0\u46ce\0\u4707\0\u3be5\0\u4740\0\u4779\0\u47b2"+
    "\0\u1cb9\0\u011d\0\u47eb\0\u4824\0\u0ae9\0\u485d\0\u4896\0\u48cf"+
    "\0\u4908\0\u4941\0\u497a\0\u49b3\0\344\0\u49ec\0\u4a25\0\u4a5e"+
    "\0\344\0\u4a97\0\u4ad0\0\344\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4"+
    "\0\344\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43"+
    "\0\u011d\0\u4824\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99"+
    "\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d\0\344\0\u4fb6\0\u4fef\0\u011d"+
    "\0\u1cb9\0\u5028\0\u5061\0\u509a\0\u0ae9\0\u2049\0\u50d3\0\344"+
    "\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b"+
    "\0\u52d4\0\u530d\0\u5346\0\344\0\u537f\0\u011d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\6\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\5\1\30\1\31\1\32"+
    "\1\33\1\34\2\6\1\35\1\36\1\37\1\5\1\40"+
    "\1\41\1\42\1\43\1\44\1\43\1\5\1\45\1\5"+
    "\1\46\2\5\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\2\6\1\0\26\6"+
    "\1\62\37\6\2\63\1\64\1\65\4\63\1\66\7\63"+
    "\1\67\4\63\1\70\14\63\1\71\26\63\1\72\4\0"+
    "\3\72\1\73\1\74\2\72\1\75\2\72\1\76\1\77"+
    "\1\72\1\100\1\72\1\101\1\102\2\72\4\0\1\103"+
    "\1\104\3\0\1\72\1\105\5\0\6\72\4\0\1\72"+
    "\4\0\1\106\1\107\1\5\4\0\23\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\1\5\73\0\2\7\65\0\1\5"+
    "\4\0\1\5\1\113\2\5\1\114\16\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\10\5\1\115\12\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\1\5"+
    "\1\116\1\5\1\117\2\5\1\120\2\5\1\121\11\5"+
    "\1\110\1\111\5\0\1\5\1\0\11\5\1\122\3\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\7\5\1\123\6\5\1\124\4\5\1\110\1\111"+
    "\5\0\1\5\1\0\7\5\1\125\4\5\1\126\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\1\5\1\127\6\5\1\130\1\5\1\131\4\5\1\132"+
    "\3\5\1\110\1\111\5\0\1\5\1\0\7\5\1\133"+
    "\5\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\1\134\1\135\1\5\1\136\4\5\1\137"+
    "\1\5\1\140\1\141\1\5\1\142\5\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\22\5\1\143\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\1\144\2\5"+
    "\1\145\1\146\2\5\1\147\13\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\2\5\1\150\7\5\1\131"+
    "\10\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\12\5\1\151\10\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\7\5\1\152\10\5\1\153\2\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\1\154\2\5"+
    "\1\155\4\5\1\156\4\5\1\157\1\5\1\160\1\5"+
    "\1\147\1\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\23\5\1\110\1\111\5\0\1\5\1\0\10\5"+
    "\1\161\4\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\1\5\1\162\1\5\1\163\6\5"+
    "\1\164\4\5\1\165\3\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\7\5\1\166\2\5\1\167\4\5"+
    "\1\170\3\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\20\5\1\171\2\5\1\110\1\111\5\0\1\5"+
    "\1\0\1\5\1\172\13\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\1\5\1\142\15\5"+
    "\1\173\3\5\1\110\1\111\5\0\1\5\1\0\10\5"+
    "\1\45\4\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\1\5\1\174\4\0\23\174\1\0\1\175\7\0"+
    "\2\174\5\0\6\174\4\0\1\174\5\0\1\174\1\176"+
    "\4\0\23\176\1\0\1\111\7\0\2\176\5\0\6\176"+
    "\1\0\1\111\2\0\1\176\2\0\1\56\2\0\1\176"+
    "\1\5\4\0\1\5\1\177\10\5\1\200\4\5\1\201"+
    "\3\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\1\5\1\0"+
    "\1\202\5\0\1\203\11\0\1\204\5\0\1\205\13\0"+
    "\1\42\4\206\2\0\1\207\12\0\1\210\4\0\1\202"+
    "\5\0\1\203\11\0\1\204\5\0\1\205\13\0\5\42"+
    "\2\0\1\207\12\0\1\210\4\0\1\202\5\0\1\203"+
    "\11\0\1\204\5\0\1\205\13\0\5\206\2\0\1\207"+
    "\12\0\1\210\4\0\1\202\5\0\1\203\11\0\1\204"+
    "\5\0\1\205\13\0\1\206\3\42\1\206\2\0\1\207"+
    "\12\0\1\210\3\0\1\5\4\0\17\5\1\154\3\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\1\211"+
    "\22\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\1\5\56\0"+
    "\1\212\12\0\1\176\4\0\23\176\1\0\1\111\7\0"+
    "\2\176\5\0\6\176\1\0\1\111\2\0\1\176\2\0"+
    "\1\112\2\0\1\176\56\0\1\213\1\0\1\214\1\215"+
    "\65\0\1\216\12\0\1\5\4\0\23\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\215\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\1\5\63\0\1\217\71\0\1\220"+
    "\4\0\1\221\4\0\1\222\3\221\1\223\1\224\1\221"+
    "\1\225\1\226\2\221\1\227\1\230\1\231\1\232\3\221"+
    "\1\233\1\0\1\112\7\0\2\221\5\0\1\221\1\234"+
    "\4\221\1\0\1\112\2\0\1\221\5\0\1\221\2\235"+
    "\2\0\63\235\1\236\1\235\1\237\4\0\10\237\1\240"+
    "\7\237\1\241\2\237\1\110\1\111\5\0\1\5\1\0"+
    "\2\237\5\5\6\237\1\0\1\111\2\0\1\237\2\0"+
    "\1\112\2\0\1\237\30\0\1\242\42\0\2\64\112\0"+
    "\1\243\60\0\1\244\63\0\1\245\104\0\1\246\44\0"+
    "\1\72\4\0\23\72\7\0\1\72\1\0\15\72\4\0"+
    "\1\72\2\0\1\247\2\0\2\72\4\0\16\72\1\250"+
    "\1\72\1\251\2\72\7\0\1\72\1\0\15\72\4\0"+
    "\1\72\2\0\1\247\2\0\2\72\4\0\1\252\22\72"+
    "\7\0\1\72\1\0\15\72\4\0\1\72\2\0\1\247"+
    "\2\0\2\72\4\0\3\72\1\253\17\72\7\0\1\72"+
    "\1\0\15\72\4\0\1\72\2\0\1\247\2\0\2\72"+
    "\4\0\16\72\1\254\4\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\2\72\4\0\10\72"+
    "\1\255\12\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\2\72\4\0\1\72\1\256\21\72"+
    "\7\0\1\72\1\0\15\72\4\0\1\72\2\0\1\247"+
    "\2\0\2\72\4\0\23\72\7\0\1\72\1\0\1\72"+
    "\1\253\13\72\4\0\1\72\2\0\1\247\2\0\2\72"+
    "\4\0\3\72\1\257\17\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\2\72\4\0\1\72"+
    "\1\260\15\72\1\261\3\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\1\72\2\106\2\0"+
    "\63\106\1\262\1\106\1\263\4\0\10\263\1\264\12\263"+
    "\7\0\1\72\1\0\2\263\5\72\6\263\4\0\1\263"+
    "\2\0\1\247\2\0\1\263\1\174\4\0\23\174\11\0"+
    "\2\174\5\0\6\174\4\0\1\174\5\0\1\174\1\221"+
    "\4\0\23\221\1\0\1\112\7\0\2\221\5\0\6\221"+
    "\1\0\1\112\2\0\1\221\5\0\1\221\1\5\4\0"+
    "\6\5\1\265\14\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\2\5\1\266\20\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\1\5\1\267\1\5\1\270"+
    "\6\5\1\270\10\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\7\5\1\271\1\5\1\272\3\5\1\273"+
    "\5\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\20\5\1\274\2\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\1\5\1\275\21\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\15\5\1\276\5\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\3\5\1\277"+
    "\17\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\17\5\1\300\3\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\3\5\1\301\17\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\6\5\1\302\14\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\1\5\1\303"+
    "\4\5\1\304\14\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\10\5\1\147\12\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\13\5\1\305\7\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\4\5\1\147"+
    "\16\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\12\5\1\306\10\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\13\5\1\307\4\5\1\157\2\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\10\5\1\310"+
    "\12\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\3\5\1\311\17\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\10\5\1\312\7\5\1\313\2\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\13\5\1\147"+
    "\7\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\6\5\1\314\14\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\1\5\1\315\21\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\3\5\1\316\17\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\12\5\1\317"+
    "\10\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\17\5\1\142\3\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\5\5\1\320\15\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\15\5\1\321\5\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\10\5\1\322"+
    "\12\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\17\5\1\323\3\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\23\5\1\110\1\111\5\0\1\5\1\0"+
    "\1\5\1\147\13\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\6\5\1\127\14\5\1\110"+
    "\1\111\5\0\1\5\1\0\13\5\1\127\1\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\23\5\1\110\1\111\5\0\1\5\1\0\4\5\1\147"+
    "\10\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\5\5\1\147\3\5\1\324\11\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\5\5\1\325"+
    "\1\5\1\152\6\5\1\326\4\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\4\5\1\327\14\5\1\330"+
    "\1\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\2\5\1\331\5\5\1\332\12\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\6\5\1\333\11\5\1\334"+
    "\2\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\7\5\1\133\13\5\1\110\1\111\5\0\1\5\1\0"+
    "\11\5\1\335\3\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\17\5\1\336\3\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\1\5\1\337"+
    "\21\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\1\5\1\174"+
    "\4\0\23\174\1\110\6\0\1\174\1\0\15\174\4\0"+
    "\1\174\5\0\1\174\1\176\4\0\23\176\1\0\1\111"+
    "\5\0\1\176\1\0\15\176\1\0\1\111\2\0\1\176"+
    "\2\0\1\112\2\0\1\176\1\5\4\0\10\5\1\340"+
    "\12\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\16\5\1\341\4\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\16\5\1\342\1\5\1\343\2\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\1\5\7\0\1\203\11\0"+
    "\1\204\5\0\1\205\22\0\1\207\26\0\1\344\10\0"+
    "\1\345\75\0\1\346\63\0\1\345\2\0\1\344\45\0"+
    "\1\347\5\0\1\203\11\0\1\204\5\0\1\205\1\350"+
    "\6\0\1\350\3\0\5\42\2\0\1\207\12\0\1\210"+
    "\24\0\1\345\2\0\1\351\107\0\5\352\21\0\1\5"+
    "\4\0\3\5\1\353\17\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\1\5\1\221\4\0\23\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\4\221\1\354\16\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\12\221\1\355\10\221\1\0\1\112\5\0"+
    "\1\221\1\0\7\221\1\356\5\221\1\0\1\112\2\0"+
    "\1\221\5\0\2\221\4\0\1\221\1\357\11\221\1\360"+
    "\7\221\1\0\1\112\5\0\1\221\1\0\15\221\1\0"+
    "\1\112\2\0\1\221\5\0\2\221\4\0\1\361\6\221"+
    "\1\361\13\221\1\0\1\112\5\0\1\221\1\0\15\221"+
    "\1\0\1\112\2\0\1\221\5\0\2\221\4\0\12\221"+
    "\1\355\10\221\1\0\1\112\5\0\1\221\1\0\15\221"+
    "\1\0\1\112\2\0\1\221\5\0\2\221\4\0\1\360"+
    "\14\221\1\362\3\221\1\361\1\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\23\221\1\0\1\112\5\0\1\221\1\0"+
    "\10\221\1\363\4\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\1\221\1\364\21\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\17\221\1\365\3\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\23\221\1\0\1\112\5\0\1\221\1\0"+
    "\10\221\1\234\4\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\17\221\1\360\3\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\1\221\1\237\4\0\23\237\1\110\1\111\5\0\1\237"+
    "\1\0\15\237\1\0\1\111\2\0\1\237\2\0\1\112"+
    "\2\0\2\237\4\0\3\237\1\366\17\237\1\110\1\111"+
    "\5\0\1\237\1\0\15\237\1\0\1\111\2\0\1\237"+
    "\2\0\1\112\2\0\2\237\4\0\12\237\1\367\10\237"+
    "\1\110\1\111\5\0\1\237\1\0\15\237\1\0\1\111"+
    "\2\0\1\237\2\0\1\112\2\0\1\237\22\0\1\370"+
    "\54\0\1\371\132\0\1\372\45\0\1\373\57\0\1\374"+
    "\54\0\1\72\4\0\7\72\1\375\13\72\7\0\1\72"+
    "\1\0\15\72\4\0\1\72\2\0\1\247\2\0\2\72"+
    "\4\0\15\72\1\376\5\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\2\72\4\0\3\72"+
    "\1\377\17\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\2\72\4\0\4\72\1\u0100\11\72"+
    "\1\u0101\4\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\2\72\4\0\1\72\1\u0102\21\72"+
    "\7\0\1\72\1\0\15\72\4\0\1\72\2\0\1\247"+
    "\2\0\2\72\4\0\23\72\7\0\1\72\1\0\7\72"+
    "\1\u0103\5\72\4\0\1\72\2\0\1\247\2\0\2\72"+
    "\4\0\10\72\1\u0104\12\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\2\72\4\0\20\72"+
    "\1\u0105\2\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\1\72\1\263\4\0\23\263\7\0"+
    "\1\263\1\0\15\263\4\0\1\263\2\0\1\247\2\0"+
    "\2\263\4\0\3\263\1\u0106\17\263\7\0\1\263\1\0"+
    "\15\263\4\0\1\263\2\0\1\247\2\0\1\263\1\5"+
    "\4\0\10\5\1\330\12\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\16\5\1\147\4\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\10\5\1\u0107\12\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\4\5"+
    "\1\u0108\16\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\3\5\1\121\17\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\17\5\1\u0109\3\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\1\5\1\127\21\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\11\5"+
    "\1\u010a\11\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\17\5\1\u010b\3\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\22\5\1\u010c\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\2\5\1\u010d\20\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\5\5\1\u010e"+
    "\15\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\12\5\1\u010f\10\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\11\5\1\u0110\11\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\3\5\1\u0111\17\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\1\5\1\270"+
    "\15\5\1\270\3\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\20\5\1\u0112\2\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\17\5\1\u0113\1\5\1\u0114"+
    "\1\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\5\5\1\u0110\15\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\7\5\1\320\2\5\1\u0115\10\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\4\5\1\u0116"+
    "\16\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\5\5\1\u0117\15\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\12\5\1\u0118\10\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\23\5\1\110\1\111\5\0"+
    "\1\5\1\0\12\5\1\166\2\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\23\5\1\110"+
    "\1\111\5\0\1\5\1\0\11\5\1\u0119\3\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\2\5\1\u011a\5\5\1\u011b\12\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\12\5\1\u011c\10\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\2\5\1\u011d"+
    "\20\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\20\5\1\u011e\2\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\3\5\1\u011f\17\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\10\5\1\320\12\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\3\5\1\u0120"+
    "\17\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\3\5\1\330\6\5\1\270\10\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\7\5\1\270\13\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\3\5\1\u0121"+
    "\17\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\3\5\1\u0122\17\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\20\5\1\u0123\2\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\5\5\1\u0124\15\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\3\5\1\u0125"+
    "\17\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\23\5\1\110\1\111\5\0\1\5\1\0\10\5\1\u0126"+
    "\4\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\10\5\1\u0127\12\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\3\5\1\u0128\17\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\7\5\1\304"+
    "\13\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\3\5\1\u0129\17\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\15\5\1\u0119\5\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\1\5\27\0\1\u012a\52\0\1\u012b\65\0"+
    "\1\u012c\1\u012d\4\0\1\u012e\2\0\1\u012f\1\0\1\204"+
    "\1\u0130\2\0\1\u0131\1\0\1\205\11\0\1\u0132\1\u0133"+
    "\1\u0134\3\0\1\u0135\2\0\1\207\24\0\1\u012c\1\u0136"+
    "\4\0\1\u012e\2\0\1\u012f\2\0\1\u0130\2\0\1\u0131"+
    "\13\0\1\u0132\1\u0133\1\u0134\3\0\1\u0135\44\0\1\u0137"+
    "\46\0\1\u0138\5\0\1\u0139\11\0\1\u013a\5\0\1\u013b"+
    "\13\0\5\352\2\0\1\u013c\16\0\1\5\4\0\10\5"+
    "\1\324\12\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\1\5"+
    "\1\221\4\0\2\221\1\u013d\20\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\10\221\1\361\12\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\4\221\1\361\16\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\20\221\1\362\2\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\13\221\1\361\7\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\23\221\1\0\1\112\5\0\1\221\1\0"+
    "\1\221\1\361\13\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\23\221\1\0\1\112\5\0\1\221\1\0"+
    "\4\221\1\361\10\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\5\221\1\361\15\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\2\221\4\0\7\221\1\356\13\221\1\0\1\112\5\0"+
    "\1\221\1\0\15\221\1\0\1\112\2\0\1\221\5\0"+
    "\1\221\1\237\4\0\7\237\1\u013e\13\237\1\110\1\111"+
    "\5\0\1\237\1\0\15\237\1\0\1\111\2\0\1\237"+
    "\2\0\1\112\2\0\2\237\4\0\2\237\1\u013f\20\237"+
    "\1\110\1\111\5\0\1\237\1\0\15\237\1\0\1\111"+
    "\2\0\1\237\2\0\1\112\2\0\1\237\24\0\1\u0140"+
    "\60\0\1\u0141\65\0\1\u0142\67\0\1\370\74\0\1\u0143"+
    "\54\0\1\72\4\0\3\72\1\u0144\17\72\7\0\1\72"+
    "\1\0\15\72\4\0\1\72\2\0\1\247\2\0\2\72"+
    "\4\0\17\72\1\u0145\3\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\2\72\4\0\20\72"+
    "\1\u0146\2\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\2\72\4\0\10\72\1\u0147\12\72"+
    "\7\0\1\72\1\0\15\72\4\0\1\72\2\0\1\247"+
    "\2\0\2\72\4\0\1\72\1\u0148\21\72\7\0\1\72"+
    "\1\0\15\72\4\0\1\72\2\0\1\247\2\0\2\72"+
    "\4\0\7\72\1\u0149\13\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\2\72\4\0\4\72"+
    "\1\u014a\16\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\2\72\4\0\3\72\1\u014b\17\72"+
    "\7\0\1\72\1\0\15\72\4\0\1\72\2\0\1\247"+
    "\2\0\2\72\4\0\3\72\1\376\17\72\7\0\1\72"+
    "\1\0\15\72\4\0\1\72\2\0\1\247\2\0\1\72"+
    "\1\263\4\0\7\263\1\u014c\13\263\7\0\1\263\1\0"+
    "\15\263\4\0\1\263\2\0\1\247\2\0\1\263\1\5"+
    "\4\0\10\5\1\u014d\12\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\23\5\1\110\1\111\5\0\1\5"+
    "\1\0\1\5\1\u014e\13\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\17\5\1\121\3\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\10\5"+
    "\1\u014f\12\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\6\5\1\u0150\14\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\17\5\1\u0151\3\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\16\5\1\u0125\4\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\12\5"+
    "\1\u0119\10\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\22\5\1\u0152\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\12\5\1\u0114\10\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\4\5\1\u0153\16\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\3\5\1\u0154"+
    "\17\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\3\5\1\u0155\17\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\16\5\1\335\4\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\2\5\1\u0156\1\5\1\u0157"+
    "\6\5\1\u0158\7\5\1\110\1\111\5\0\1\5\1\0"+
    "\1\5\1\u0159\13\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\13\5\1\u015a\7\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\4\5\1\u015b"+
    "\16\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\20\5\1\u015c\2\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\3\5\1\u015d\13\5\1\u015e\3\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\4\5\1\u015f"+
    "\16\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\4\5\1\u0160\16\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\20\5\1\u0161\2\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\5\5\1\u0162\15\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\5\5\1\u0163"+
    "\15\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\17\5\1\u0164\3\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\17\5\1\u0165\3\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\20\5\1\305\2\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\12\5\1\u0166"+
    "\10\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\1\5\17\0"+
    "\1\u0167\61\0\1\u0168\72\0\1\u0169\66\0\1\344\6\0"+
    "\1\u016a\1\0\1\345\57\0\1\u016b\73\0\1\u016c\4\0"+
    "\1\u016d\60\0\1\u016e\66\0\1\u016f\75\0\1\u0170\3\0"+
    "\1\u0171\61\0\1\u0172\124\0\4\u0173\64\0\1\u0173\1\0"+
    "\1\u0173\1\0\1\u0173\40\0\1\u016a\57\0\1\u0167\71\0"+
    "\1\u0139\11\0\1\u013a\5\0\1\u013b\22\0\1\u013c\26\0"+
    "\1\u0174\10\0\1\u0175\75\0\1\u0176\63\0\1\u0175\2\0"+
    "\1\u0174\65\0\1\u0175\2\0\1\u0177\44\0\1\221\4\0"+
    "\16\221\1\361\4\221\1\0\1\112\5\0\1\221\1\0"+
    "\15\221\1\0\1\112\2\0\1\221\5\0\1\221\1\237"+
    "\4\0\6\237\1\u0178\14\237\1\110\1\111\5\0\1\237"+
    "\1\0\15\237\1\0\1\111\2\0\1\237\2\0\1\112"+
    "\2\0\2\237\4\0\3\237\1\u0179\17\237\1\110\1\111"+
    "\5\0\1\237\1\0\15\237\1\0\1\111\2\0\1\237"+
    "\2\0\1\112\2\0\1\237\42\0\1\u017a\42\0\1\u017b"+
    "\54\0\2\u017c\1\0\66\u017c\1\72\4\0\23\72\7\0"+
    "\1\72\1\0\1\72\1\u017d\13\72\4\0\1\72\2\0"+
    "\1\247\2\0\2\72\4\0\17\72\1\u017e\3\72\7\0"+
    "\1\72\1\0\15\72\4\0\1\72\2\0\1\247\2\0"+
    "\2\72\4\0\10\72\1\u017f\12\72\7\0\1\72\1\0"+
    "\15\72\4\0\1\72\2\0\1\247\2\0\2\72\4\0"+
    "\7\72\1\u0180\13\72\7\0\1\72\1\0\15\72\4\0"+
    "\1\72\2\0\1\247\2\0\2\72\4\0\12\72\1\u0181"+
    "\10\72\7\0\1\72\1\0\15\72\4\0\1\72\2\0"+
    "\1\247\2\0\1\72\1\263\4\0\6\263\1\u0182\14\263"+
    "\7\0\1\263\1\0\15\263\4\0\1\263\2\0\1\247"+
    "\2\0\1\263\1\5\4\0\12\5\1\166\10\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\17\5\1\u0183"+
    "\1\5\1\270\1\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\17\5\1\u010e\3\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\20\5\1\u0184\2\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\3\5\1\142"+
    "\17\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\3\5\1\u0185\17\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\16\5\1\u0186\4\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\16\5\1\u0187\4\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\3\5\1\u0188"+
    "\17\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\1\5\1\u0189\21\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\17\5\1\u018a\3\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\1\5\1\u018b\21\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\12\5\1\u015f"+
    "\10\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\15\5\1\u018c\5\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\7\5\1\u018d\13\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\7\5\1\u018e\13\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\3\5\1\150"+
    "\17\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\7\5\1\u018f\13\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\4\5\1\u0190\16\5\1\110\1\111\5\0"+
    "\1\5\1\0\15\5\1\0\1\111\2\0\1\5\2\0"+
    "\1\112\2\0\2\5\4\0\1\u0191\22\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\12\5\1\u0191\10\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\1\5"+
    "\1\u015b\21\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\5\5\1\u0192\15\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\1\5\21\0\1\204\60\0\1\u0173\74\0\1\u0173"+
    "\10\0\1\u0173\62\0\1\u0173\77\0\1\u0173\56\0\1\u0173"+
    "\65\0\1\u0173\74\0\1\u0173\75\0\1\u0173\1\0\1\u0173"+
    "\70\0\1\u0173\64\0\1\u0173\50\0\1\u0193\26\0\1\u0193"+
    "\6\0\1\u0193\60\0\1\u0194\52\0\1\u0195\102\0\1\u0196"+
    "\45\0\1\237\4\0\16\237\1\u0197\4\237\1\110\1\111"+
    "\5\0\1\237\1\0\15\237\1\0\1\111\2\0\1\237"+
    "\2\0\1\112\2\0\1\237\24\0\1\u0198\44\0\2\u017c"+
    "\1\u0199\1\u019a\65\u017c\1\72\4\0\2\72\1\u019b\20\72"+
    "\7\0\1\72\1\0\15\72\4\0\1\72\2\0\1\247"+
    "\2\0\2\72\4\0\12\72\1\u0146\10\72\7\0\1\72"+
    "\1\0\15\72\4\0\1\72\2\0\1\247\2\0\2\72"+
    "\4\0\17\72\1\u019c\3\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\2\72\4\0\5\72"+
    "\1\u019d\15\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\1\72\1\263\4\0\16\263\1\u019e"+
    "\4\263\7\0\1\263\1\0\15\263\4\0\1\263\2\0"+
    "\1\247\2\0\1\263\1\5\4\0\5\5\1\u019f\15\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\12\5"+
    "\1\150\10\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\16\5\1\u01a0\4\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\16\5\1\u0184\4\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\20\5\1\u0157\2\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\6\5"+
    "\1\u0189\14\5\1\110\1\111\5\0\1\5\1\0\13\5"+
    "\1\u0189\1\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\10\5\1\u0189\12\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\7\5\1\u01a1\13\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\2\5\4\0\7\5"+
    "\1\u01a2\13\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\17\5\1\u01a3\3\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\1\5\1\u01a4\21\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\1\u01a5\22\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\1\5\43\0\5\u01a6\40\0"+
    "\1\u01a7\61\0\1\u01a8\66\0\1\u01a7\62\0\1\237\4\0"+
    "\4\237\1\u01a9\16\237\1\110\1\111\5\0\1\237\1\0"+
    "\15\237\1\0\1\111\2\0\1\237\2\0\1\112\2\0"+
    "\1\237\7\0\1\u01aa\61\0\1\72\4\0\3\72\1\u01ab"+
    "\17\72\7\0\1\72\1\0\15\72\4\0\1\72\2\0"+
    "\1\247\2\0\2\72\4\0\2\72\1\u01ac\20\72\7\0"+
    "\1\72\1\0\15\72\4\0\1\72\2\0\1\247\2\0"+
    "\2\72\4\0\1\u01ad\22\72\7\0\1\72\1\0\15\72"+
    "\4\0\1\72\2\0\1\247\2\0\1\72\1\263\4\0"+
    "\4\263\1\u01ae\16\263\7\0\1\263\1\0\15\263\4\0"+
    "\1\263\2\0\1\247\2\0\1\263\1\5\4\0\12\5"+
    "\1\u01af\10\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\3\5\1\u0129\6\5\1\u0129\10\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\1\5\1\u01b0\15\5"+
    "\1\u01b0\3\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\17\5\1\u01b1\3\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\1\5\1\u01b2\21\5\1\110\1\111"+
    "\5\0\1\5\1\0\15\5\1\0\1\111\2\0\1\5"+
    "\2\0\1\112\2\0\2\5\4\0\10\5\1\u01b3\12\5"+
    "\1\110\1\111\5\0\1\5\1\0\15\5\1\0\1\111"+
    "\2\0\1\5\2\0\1\112\2\0\1\5\43\0\5\u01b4"+
    "\42\0\1\u013a\55\0\1\u0142\62\0\1\72\4\0\20\72"+
    "\1\u01b5\2\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\2\72\4\0\1\72\1\u014a\21\72"+
    "\7\0\1\72\1\0\15\72\4\0\1\72\2\0\1\247"+
    "\2\0\1\72\1\5\4\0\4\5\1\305\16\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\2\5\4\0\1\5\1\u01b6"+
    "\21\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\20\5\1\u01b7\2\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\2\5\4\0\17\5\1\u01b8\1\5\1\u0129\1\5\1\110"+
    "\1\111\5\0\1\5\1\0\15\5\1\0\1\111\2\0"+
    "\1\5\2\0\1\112\2\0\1\5\43\0\5\u01b9\21\0"+
    "\1\72\4\0\4\72\1\u01ba\16\72\7\0\1\72\1\0"+
    "\15\72\4\0\1\72\2\0\1\247\2\0\1\72\1\5"+
    "\4\0\20\5\1\u01bb\2\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\2\5\4\0\3\5\1\u01bc\3\5\1\u01bc\7\5"+
    "\1\u01bc\3\5\1\110\1\111\5\0\1\5\1\0\15\5"+
    "\1\0\1\111\2\0\1\5\2\0\1\112\2\0\2\5"+
    "\4\0\3\5\1\u01bd\17\5\1\110\1\111\5\0\1\5"+
    "\1\0\15\5\1\0\1\111\2\0\1\5\2\0\1\112"+
    "\2\0\1\5\43\0\5\u01be\21\0\1\72\4\0\17\72"+
    "\1\u0144\3\72\7\0\1\72\1\0\15\72\4\0\1\72"+
    "\2\0\1\247\2\0\1\72\1\5\4\0\7\5\1\u01b0"+
    "\13\5\1\110\1\111\5\0\1\5\1\0\15\5\1\0"+
    "\1\111\2\0\1\5\2\0\1\112\2\0\2\5\4\0"+
    "\7\5\1\u0129\13\5\1\110\1\111\5\0\1\5\1\0"+
    "\15\5\1\0\1\111\2\0\1\5\2\0\1\112\2\0"+
    "\1\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21432];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\11\24\1\5\11\17\1\1\11\3\1"+
    "\1\11\6\1\11\0\2\11\3\0\1\1\1\0\63\1"+
    "\1\11\1\0\3\1\4\0\1\1\2\0\1\1\7\11"+
    "\14\1\1\0\1\11\3\1\1\11\10\0\1\1\2\0"+
    "\1\1\3\0\1\11\61\1\1\0\1\1\4\0\16\1"+
    "\6\0\1\1\7\0\44\1\23\0\3\1\3\0\1\11"+
    "\1\1\1\0\1\1\3\0\1\1\1\0\33\1\1\0"+
    "\1\11\14\0\1\1\2\0\2\1\1\11\2\0\1\1"+
    "\4\0\21\1\4\0\1\1\1\0\1\11\1\1\3\0"+
    "\10\1\2\0\1\11\1\1\3\0\7\1\2\0\3\1"+
    "\2\0\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	/* Per disattivare il debugging, quindi la stampa dei simboli riconosciuti
	da parte dello scanner impostare la costante _DEBUG a false */
	private static final boolean _DEBUG = false;
	private Symbol symbol(int type) {
		if (_DEBUG) System.out.print("# "+type+" "+yytext()+"\n");	
		return new Symbol(type, yyline, yycolumn);
  	}
	private Symbol symbol(int type, Object value) {
	    	if (_DEBUG) System.out.print("# "+type+" > " +value+"\n");
		return new Symbol(type, yyline, yycolumn, value);
	}
	private int lines=0;	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 69: 
          { return symbol(sym.Throw_S);
          }
        case 77: break;
        case 57: 
          { return symbol(sym.Where);
          }
        case 78: break;
        case 28: 
          { return symbol(sym.Com_Cd);
          }
        case 79: break;
        case 59: 
          { return symbol(sym.Com_If_m);
          }
        case 80: break;
        case 14: 
          { System.out.println("errore: "+yytext());
          }
        case 81: break;
        case 55: 
          { return symbol(sym.Com_Str);
          }
        case 82: break;
        case 10: 
          { return symbol(sym.Minus,new String(yytext()));
          }
        case 83: break;
        case 62: 
          { return symbol(sym.Com_MKDir);
          }
        case 84: break;
        case 9: 
          { return symbol(sym.Plus,new String(yytext()));
          }
        case 85: break;
        case 44: 
          { return symbol(sym.Com_For_m);
          }
        case 86: break;
        case 43: 
          { return symbol(sym.Com_If);
          }
        case 87: break;
        case 4: 
          { return symbol(sym.Ext,new String(yytext()));
          }
        case 88: break;
        case 30: 
          { return symbol(sym.Com_Rm);
          }
        case 89: break;
        case 38: 
          { return symbol(sym.C_Orr,new String("||"));
          }
        case 90: break;
        case 50: 
          { return symbol(sym.IUnit);
          }
        case 91: break;
        case 49: 
          { return symbol(sym.Obj,new String(yytext()));
          }
        case 92: break;
        case 73: 
          { return symbol(sym.Result);
          }
        case 93: break;
        case 75: 
          { return symbol(sym.Dimension_Criteria);
          }
        case 94: break;
        case 46: 
          { Utility.mf("ID: "+yytext());
						return symbol(sym.Script_Var,new String(yytext()));
          }
        case 95: break;
        case 34: 
          { return symbol(sym.Minug);
          }
        case 96: break;
        case 7: 
          { return symbol(sym.RO);
          }
        case 97: break;
        case 13: 
          { return symbol(sym.C_Ug);
          }
        case 98: break;
        case 68: 
          { return symbol(sym.Com_If_e);
          }
        case 99: break;
        case 23: 
          { return symbol(sym.SO);
          }
        case 100: break;
        case 20: 
          { return symbol(sym.File,new String(yytext()));
          }
        case 101: break;
        case 74: 
          { return symbol(sym.Permission_Criteria);
          }
        case 102: break;
        case 64: 
          { return symbol(sym.Com_P);
          }
        case 103: break;
        case 22: 
          { Utility.mf("newline");
          }
        case 104: break;
        case 66: 
          { return symbol(sym.Name);
          }
        case 105: break;
        case 47: 
          { return symbol(sym.Date_Criteria);
          }
        case 106: break;
        case 3: 
          { lines++;System.out.println("\t\tlinea:"+lines);return symbol(sym.EL);
          }
        case 107: break;
        case 12: 
          { return symbol(sym.Int, new Integer(yytext()));
          }
        case 108: break;
        case 61: 
          { return symbol(sym.Com_For_e);
          }
        case 109: break;
        case 72: 
          { return symbol(sym.Com_For);
          }
        case 110: break;
        case 29: 
          { yybegin(exclude_script_code);
					Utility.mf("prima di lanciare script code da if");
          }
        case 111: break;
        case 15: 
          { return symbol(sym.Min);
          }
        case 112: break;
        case 32: 
          { yybegin(comment);
          }
        case 113: break;
        case 48: 
          { return symbol(sym.Order,new String(yytext()));
          }
        case 114: break;
        case 53: 
          { return symbol(sym.Com_Ex);
          }
        case 115: break;
        case 5: 
          { return symbol(sym.Div,new String(yytext()));
          }
        case 116: break;
        case 41: 
          { return symbol(sym.Var,new String(yytext()));
          }
        case 117: break;
        case 45: 
          { Utility.mf("str: "+yytext());String s = new String(yytext());
          }
        case 118: break;
        case 63: 
          { yybegin(script); 
					Utility.mf("dentro script");
					return symbol(sym.Start_S);
          }
        case 119: break;
        case 18: 
          { return symbol(sym.C_Or,new String("|"));
          }
        case 120: break;
        case 70: 
          { Utility.mf("dentro exclude script code da for");
					yybegin(YYINITIAL);
          }
        case 121: break;
        case 6: 
          { return symbol(sym.Times,new String(yytext()));
          }
        case 122: break;
        case 36: 
          { return symbol(sym.Diver);
          }
        case 123: break;
        case 8: 
          { return symbol(sym.RC);
          }
        case 124: break;
        case 27: 
          { return symbol(sym.Com_Cp);
          }
        case 125: break;
        case 65: 
          { return symbol(sym.FUnit);
          }
        case 126: break;
        case 76: 
          { Utility.mf("Data raccolta: " +yytext());
						/*SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
						Date date = sdf.parse(yytext());
						GregorianCalendar calendar = new GregorianCalendar();
						calendar.setTime(date);
						Utility.mf("Date: "+calendar.toString());
						return symbol(sym.GMA,calendar);*/
						String tdata = yytext().substring(0,2)+yytext().substring(3,5)+yytext().substring(6,10);
						Utility.mf("Data trimmed: " +tdata);
						return symbol(sym.Data, new String(tdata));
          }
        case 127: break;
        case 56: 
          { return symbol(sym.Com_Find);
          }
        case 128: break;
        case 24: 
          { return symbol(sym.SC);
          }
        case 129: break;
        case 17: 
          { return symbol(sym.C_Not,new String("!"));
          }
        case 130: break;
        case 2: 
          { ;
          }
        case 131: break;
        case 42: 
          { yybegin(YYINITIAL);
          }
        case 132: break;
        case 19: 
          { return symbol(sym.C_And,new String("&"));
          }
        case 133: break;
        case 51: 
          { return symbol(sym.Vint, new Float(yytext()));
          }
        case 134: break;
        case 1: 
          { return symbol(sym.Path,new String(yytext()));
          }
        case 135: break;
        case 35: 
          { return symbol(sym.Minor);
          }
        case 136: break;
        case 40: 
          { Utility.mf("str: "+yytext());
					String s = new String(yytext());
					return symbol(sym.Str,s.substring(1, s.length()-1));
          }
        case 137: break;
        case 31: 
          { return symbol(sym.Com_Ls);
          }
        case 138: break;
        case 33: 
          { return symbol(sym.C_Ugg);
          }
        case 139: break;
        case 52: 
          { yybegin(YYINITIAL);
						Utility.mf("dentro script");
						return symbol(sym.End_S);
          }
        case 140: break;
        case 21: 
          { Utility.mf("posizione linea "+yyline+" colonna "+yycolumn);
          }
        case 141: break;
        case 67: 
          { Utility.mf("dentro exclude script code da if");
					yybegin(YYINITIAL);
          }
        case 142: break;
        case 60: 
          { return symbol(sym.Com_If_2);
          }
        case 143: break;
        case 26: 
          { return symbol(sym.Prep_supp);
          }
        case 144: break;
        case 25: 
          { return symbol(sym.Com_Mov);
          }
        case 145: break;
        case 58: 
          { Utility.mf("script name: "+yytext());
						return symbol(sym.FileScript,new String(yytext()));
          }
        case 146: break;
        case 39: 
          { return symbol(sym.C_Andd,new String("&&"));
          }
        case 147: break;
        case 16: 
          { return symbol(sym.Magg);
          }
        case 148: break;
        case 54: 
          { return symbol(sym.Bool,new Boolean(yytext()));
          }
        case 149: break;
        case 71: 
          { yybegin(exclude_script_code);
					Utility.mf("prima di lanciare script code da for");
          }
        case 150: break;
        case 11: 
          { return symbol(sym.Pv);
          }
        case 151: break;
        case 37: 
          { return symbol(sym.Maggug);
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
