/* The following code was generated by JFlex 1.4.1 on 9/12/11 7:24 PM */

package it.polito.lt.skype.generated.parser;

import java_cup.runtime.*;
import it.polito.lt.skype.generated.parser.sym;
import java.util.*;
import java.text.*;
import it.polito.lt.skype.manager.*;
import it.polito.lt.skype.command.*;
import it.polito.lt.skype.bot.*;


 	/* NB: dato che JFlex genera la classe e i costruttori omettendo "public" 
	* e dato che l'ant-clean deve pulire anche i generati, 
	* ricordarsi ad ogni generazione dello scanner di aggiungere public 
	* al nome della classe Lexer ai costruttori!
	* NB2: risolto con ant task da jonni
	* */





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/12/11 7:24 PM from the specification file
 * <tt>/home/jo/POLITO/Linguaggi_Traduttori/parser/scanner.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int script = 2;
  public static final int YYINITIAL = 0;
  public static final int comment = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\2\0\1\3\22\0\1\1\1\62\2\66\1\70"+
    "\1\66\1\64\1\67\1\32\1\33\1\31\1\36\1\4\1\37\1\65"+
    "\1\30\1\43\1\47\1\45\1\46\6\44\1\66\1\40\1\60\1\56"+
    "\1\61\1\57\1\0\1\17\1\21\1\12\1\22\1\10\1\42\1\27"+
    "\1\5\1\24\1\41\1\52\1\23\1\7\1\25\1\6\1\20\1\55"+
    "\1\15\1\14\1\11\1\13\1\16\1\53\1\50\1\26\1\51\1\34"+
    "\1\66\1\35\3\0\1\17\1\21\1\12\1\22\1\10\1\42\1\27"+
    "\1\5\1\24\1\41\1\52\1\23\1\7\1\25\1\6\1\20\1\55"+
    "\1\15\1\14\1\11\1\13\1\16\1\53\1\50\1\26\1\51\1\66"+
    "\1\63\1\66\133\0\1\54\37\0\1\54\uff06\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\4\1\1\4\14\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\1\4\16\2\1\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\3\20\1\1\1\2\1\1\1\0"+
    "\1\26\2\1\1\24\3\1\1\27\7\1\1\30\11\1"+
    "\1\31\1\32\1\1\1\4\1\33\1\1\1\4\1\34"+
    "\12\1\1\35\3\1\1\36\3\1\1\33\3\1\1\37"+
    "\1\0\1\26\3\1\4\0\1\16\2\0\1\1\1\40"+
    "\1\26\1\41\1\42\1\43\1\44\1\45\1\46\1\26"+
    "\1\4\1\26\1\4\10\26\1\0\1\47\3\50\1\51"+
    "\1\26\1\1\1\4\1\1\1\52\11\1\1\53\20\1"+
    "\1\54\2\1\1\25\7\1\1\52\1\1\1\55\6\1"+
    "\1\30\3\1\1\0\1\56\4\0\1\57\1\1\5\26"+
    "\1\4\4\26\2\50\1\60\1\45\5\1\1\61\2\1"+
    "\1\62\1\1\1\63\1\1\1\64\2\1\1\31\1\65"+
    "\3\1\1\66\10\1\1\67\5\1\1\17\1\1\1\70"+
    "\2\1\1\55\23\0\1\4\2\50\2\1\1\71\2\1"+
    "\1\72\11\1\1\73\6\1\1\74\7\1\1\0\1\56"+
    "\14\0\1\75\2\0\1\50\1\76\2\1\1\65\1\1"+
    "\1\34\1\1\1\66\3\1\1\46\5\1\1\77\1\1"+
    "\4\0\1\50\10\1\1\100\2\0\1\75\1\101\2\1"+
    "\1\102\3\1\1\0\2\1\1\103\1\1\1\0\1\102"+
    "\1\103\1\1\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\162\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\162\0\162\0\162\0\162\0\162\0\162"+
    "\0\162\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\162\0\u08e8\0\u0921\0\u095a\0\u0993\0\u0759\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\253\0\u0b5b\0\u0b94"+
    "\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\253\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\253\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\253\0\253\0\u1008"+
    "\0\u1041\0\u107a\0\u10b3\0\u0eeb\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\253\0\u12ed\0\u1326"+
    "\0\u135f\0\253\0\u1398\0\u13d1\0\u140a\0\162\0\u1443\0\u08af"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\162\0\u16ef\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u08e8"+
    "\0\162\0\u19d4\0\u1a0d\0\u1a46\0\162\0\u1a7f\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\253\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\u2082\0\u20bb\0\u20f4\0\253\0\u212d\0\u2166\0\u219f"+
    "\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u1599\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u1728\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15"+
    "\0\u1728\0\253\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\253"+
    "\0\u2b6b\0\u2ba4\0\253\0\u2bdd\0\253\0\u2c16\0\253\0\u2c4f"+
    "\0\u2c88\0\253\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde"+
    "\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\253"+
    "\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\253\0\u30c3\0\253"+
    "\0\u30fc\0\u3135\0\253\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252"+
    "\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a"+
    "\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2"+
    "\0\u361b\0\u3654\0\u368d\0\253\0\u36c6\0\u36ff\0\253\0\u3738"+
    "\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900"+
    "\0\253\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\253"+
    "\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e"+
    "\0\162\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad"+
    "\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u34fe\0\u3f03\0\u3f3c"+
    "\0\u3f75\0\u19d4\0\u3fae\0\u3fe7\0\253\0\u4020\0\u4059\0\u4092"+
    "\0\253\0\u40cb\0\u4104\0\u413d\0\253\0\u4176\0\u41af\0\u41e8"+
    "\0\u4221\0\u425a\0\253\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377"+
    "\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f"+
    "\0\u4578\0\253\0\u45b1\0\u45ea\0\162\0\u19d4\0\u4623\0\u465c"+
    "\0\253\0\u4695\0\u46ce\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb"+
    "\0\u4824\0\u485d\0\u4896\0\253\0\u48cf\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\4\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\4\1\42\1\43\1\44\1\45\1\46\1\45\1\4"+
    "\1\47\1\4\1\50\2\4\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\2\5"+
    "\1\0\26\5\1\64\37\5\71\0\1\4\4\0\23\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\1\4\2\0\2\6"+
    "\65\0\1\4\4\0\1\4\1\70\2\4\1\71\16\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\10\4"+
    "\1\72\12\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\1\4\1\73\1\4\1\74\2\4\1\75\2\4"+
    "\1\76\11\4\1\65\1\66\5\0\1\4\1\0\11\4"+
    "\1\77\3\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\7\4\1\100\6\4\1\101\1\4"+
    "\1\102\2\4\1\65\1\66\5\0\1\4\1\0\7\4"+
    "\1\103\4\4\1\104\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\1\105\1\106\6\4\1\107"+
    "\1\4\1\110\4\4\1\111\3\4\1\65\1\66\5\0"+
    "\1\4\1\0\7\4\1\112\5\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\1\113\1\114"+
    "\1\4\1\115\4\4\1\116\1\4\1\117\1\120\1\4"+
    "\1\121\5\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\22\4\1\122\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\1\123\2\4\1\124\1\125\2\4\1\126"+
    "\13\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\2\4\1\127\7\4\1\110\10\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\12\4\1\130\10\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\7\4\1\131"+
    "\6\4\1\132\1\4\1\133\2\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\1\134\2\4\1\135\4\4"+
    "\1\136\4\4\1\137\1\4\1\140\1\4\1\126\1\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\23\4"+
    "\1\65\1\66\5\0\1\4\1\0\10\4\1\141\4\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\1\4\1\142\1\4\1\143\6\4\1\144\4\4"+
    "\1\145\3\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\7\4\1\146\2\4\1\147\4\4\1\150\3\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\20\4"+
    "\1\151\2\4\1\65\1\66\5\0\1\4\1\0\1\4"+
    "\1\152\13\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\3\4\1\153\17\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\1\4\1\121\15\4"+
    "\1\154\3\4\1\65\1\66\5\0\1\4\1\0\10\4"+
    "\1\47\4\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\1\4\1\155\4\0\23\155\1\0\1\156\7\0"+
    "\2\155\5\0\6\155\4\0\1\155\5\0\1\155\1\157"+
    "\4\0\23\157\1\0\1\66\7\0\2\157\5\0\6\157"+
    "\1\0\1\66\2\0\1\157\2\0\1\160\2\0\1\157"+
    "\1\4\4\0\1\4\1\161\10\4\1\162\4\4\1\163"+
    "\3\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\1\4\1\0"+
    "\1\164\5\0\1\165\11\0\1\166\5\0\1\167\13\0"+
    "\1\44\4\170\2\0\1\171\12\0\1\172\4\0\1\164"+
    "\5\0\1\165\11\0\1\166\5\0\1\167\13\0\5\44"+
    "\2\0\1\171\12\0\1\172\4\0\1\164\5\0\1\165"+
    "\11\0\1\166\5\0\1\167\13\0\5\170\2\0\1\171"+
    "\12\0\1\172\4\0\1\164\5\0\1\165\11\0\1\166"+
    "\5\0\1\167\13\0\1\170\3\44\1\170\2\0\1\171"+
    "\12\0\1\172\3\0\1\4\4\0\17\4\1\134\3\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\1\173"+
    "\22\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\1\4\56\0"+
    "\1\174\12\0\1\157\4\0\23\157\1\0\1\66\7\0"+
    "\2\157\5\0\6\157\1\0\1\66\2\0\1\157\2\0"+
    "\1\175\2\0\1\157\56\0\1\176\1\0\1\177\1\200"+
    "\65\0\1\201\12\0\1\4\4\0\23\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\200\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\1\4\63\0\1\202\71\0\1\203"+
    "\4\0\1\204\4\0\1\205\3\204\1\206\1\207\1\204"+
    "\1\210\1\211\2\204\1\212\1\213\1\214\1\215\3\204"+
    "\1\216\1\0\1\175\7\0\2\204\5\0\1\204\1\217"+
    "\4\204\1\0\1\175\2\0\1\204\5\0\1\204\2\220"+
    "\2\0\63\220\1\221\1\220\1\222\4\0\10\222\1\223"+
    "\7\222\1\224\2\222\1\65\1\66\5\0\1\4\1\0"+
    "\2\222\5\4\6\222\1\0\1\66\2\0\1\222\2\0"+
    "\1\67\2\0\1\222\30\0\1\225\40\0\1\155\4\0"+
    "\23\155\11\0\2\155\5\0\6\155\4\0\1\155\5\0"+
    "\1\155\1\204\4\0\7\204\1\226\13\204\1\0\1\175"+
    "\7\0\2\204\5\0\6\204\1\0\1\175\2\0\1\204"+
    "\5\0\1\204\1\4\4\0\6\4\1\227\14\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\2\4\1\230"+
    "\20\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\1\4\1\231\1\4\1\232\6\4\1\232\10\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\7\4\1\233"+
    "\1\4\1\234\3\4\1\235\5\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\20\4\1\236\2\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\1\4\1\237"+
    "\21\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\15\4\1\240\5\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\3\4\1\241\17\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\7\4\1\242\7\4\1\243"+
    "\3\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\15\4\1\244\5\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\3\4\1\245\17\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\6\4\1\246\14\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\3\4\1\247"+
    "\17\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\1\4\1\250\4\4\1\251\14\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\10\4\1\126\12\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\13\4\1\252"+
    "\7\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\4\4\1\126\16\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\12\4\1\253\10\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\13\4\1\254\4\4\1\137"+
    "\2\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\10\4\1\255\12\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\3\4\1\256\17\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\10\4\1\257\7\4\1\260"+
    "\2\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\13\4\1\126\7\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\6\4\1\261\14\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\1\4\1\262\21\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\3\4\1\263"+
    "\17\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\12\4\1\264\10\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\17\4\1\121\3\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\5\4\1\265\15\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\4\4\1\266"+
    "\11\4\1\267\4\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\15\4\1\270\5\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\10\4\1\271\12\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\1\4\1\272"+
    "\15\4\1\273\3\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\23\4\1\65\1\66\5\0\1\4\1\0"+
    "\1\4\1\126\13\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\6\4\1\106\14\4\1\65"+
    "\1\66\5\0\1\4\1\0\13\4\1\106\1\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\23\4\1\65\1\66\5\0\1\4\1\0\4\4\1\126"+
    "\10\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\5\4\1\126\3\4\1\274\11\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\5\4\1\275"+
    "\1\4\1\131\6\4\1\276\4\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\4\4\1\277\14\4\1\300"+
    "\1\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\2\4\1\301\5\4\1\302\12\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\6\4\1\303\11\4\1\304"+
    "\2\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\7\4\1\112\13\4\1\65\1\66\5\0\1\4\1\0"+
    "\11\4\1\305\3\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\17\4\1\306\3\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\23\4\1\65"+
    "\1\66\5\0\1\4\1\0\7\4\1\307\5\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\1\4\1\310\21\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\1\4\1\155\4\0\23\155\1\65\6\0\1\155\1\0"+
    "\15\155\4\0\1\155\5\0\1\155\1\157\4\0\23\157"+
    "\1\0\1\66\5\0\1\157\1\0\15\157\1\0\1\66"+
    "\2\0\1\157\2\0\1\175\2\0\1\157\1\4\4\0"+
    "\10\4\1\311\12\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\16\4\1\312\4\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\16\4\1\313\1\4\1\314"+
    "\2\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\1\4\7\0"+
    "\1\165\11\0\1\166\5\0\1\167\22\0\1\171\26\0"+
    "\1\315\10\0\1\316\75\0\1\317\63\0\1\316\2\0"+
    "\1\315\45\0\1\320\5\0\1\165\11\0\1\166\5\0"+
    "\1\167\1\321\6\0\1\321\3\0\5\44\2\0\1\171"+
    "\12\0\1\172\24\0\1\316\2\0\1\322\107\0\5\323"+
    "\21\0\1\4\4\0\3\4\1\324\17\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\1\4\1\204\4\0\23\204\1\0"+
    "\1\175\7\0\2\204\5\0\6\204\1\0\1\175\2\0"+
    "\1\204\5\0\2\204\4\0\23\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\4\204\1\325\16\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\12\204\1\326\10\204\1\0\1\175\5\0"+
    "\1\204\1\0\7\204\1\327\5\204\1\0\1\175\2\0"+
    "\1\204\5\0\2\204\4\0\1\204\1\330\11\204\1\331"+
    "\7\204\1\0\1\175\5\0\1\204\1\0\15\204\1\0"+
    "\1\175\2\0\1\204\5\0\2\204\4\0\1\332\6\204"+
    "\1\332\13\204\1\0\1\175\5\0\1\204\1\0\15\204"+
    "\1\0\1\175\2\0\1\204\5\0\2\204\4\0\12\204"+
    "\1\326\10\204\1\0\1\175\5\0\1\204\1\0\15\204"+
    "\1\0\1\175\2\0\1\204\5\0\2\204\4\0\1\331"+
    "\14\204\1\333\3\204\1\332\1\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\23\204\1\0\1\175\5\0\1\204\1\0"+
    "\10\204\1\334\4\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\1\204\1\335\21\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\17\204\1\336\3\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\23\204\1\0\1\175\5\0\1\204\1\0"+
    "\10\204\1\217\4\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\17\204\1\331\3\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\1\204\1\222\4\0\23\222\1\65\1\66\5\0\1\222"+
    "\1\0\15\222\1\0\1\66\2\0\1\222\2\0\1\67"+
    "\2\0\2\222\4\0\3\222\1\337\17\222\1\65\1\66"+
    "\5\0\1\222\1\0\15\222\1\0\1\66\2\0\1\222"+
    "\2\0\1\67\2\0\2\222\4\0\12\222\1\340\10\222"+
    "\1\65\1\66\5\0\1\222\1\0\15\222\1\0\1\66"+
    "\2\0\1\222\2\0\1\67\2\0\1\222\1\204\4\0"+
    "\7\204\1\341\13\204\1\0\1\175\5\0\1\204\1\0"+
    "\15\204\1\0\1\175\2\0\1\204\5\0\1\204\1\4"+
    "\4\0\10\4\1\300\12\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\16\4\1\126\4\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\10\4\1\342\12\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\4\4"+
    "\1\343\16\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\3\4\1\76\17\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\17\4\1\344\3\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\1\4\1\106\21\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\11\4"+
    "\1\345\11\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\17\4\1\346\3\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\22\4\1\347\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\3\4\1\350\17\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\2\4\1\351"+
    "\20\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\17\4\1\352\3\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\5\4\1\353\15\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\12\4\1\354\10\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\20\4\1\355"+
    "\2\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\11\4\1\356\11\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\3\4\1\357\17\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\1\4\1\232\15\4\1\232"+
    "\3\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\20\4\1\360\2\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\17\4\1\361\1\4\1\362\1\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\5\4\1\356"+
    "\15\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\7\4\1\265\2\4\1\363\10\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\4\4\1\364\16\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\5\4\1\365"+
    "\15\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\12\4\1\366\10\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\23\4\1\65\1\66\5\0\1\4\1\0"+
    "\12\4\1\146\2\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\23\4\1\65\1\66\5\0"+
    "\1\4\1\0\11\4\1\367\3\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\2\4\1\370"+
    "\5\4\1\371\12\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\10\4\1\372\12\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\1\4\1\373\21\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\12\4\1\374"+
    "\10\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\2\4\1\375\20\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\7\4\1\376\13\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\20\4\1\377\2\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\3\4\1\u0100"+
    "\17\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\10\4\1\265\12\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\3\4\1\u0101\17\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\3\4\1\300\6\4\1\232"+
    "\10\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\7\4\1\232\13\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\3\4\1\u0102\17\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\3\4\1\u0103\17\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\20\4\1\u0104"+
    "\2\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\5\4\1\u0105\15\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\3\4\1\u0106\17\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\23\4\1\65\1\66\5\0"+
    "\1\4\1\0\10\4\1\u0107\4\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\4\4\1\u0108"+
    "\16\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\10\4\1\u0109\12\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\3\4\1\u010a\17\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\7\4\1\251\13\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\3\4\1\u010b"+
    "\17\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\3\4\1\244\11\4\1\367\5\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\1\4\27\0\1\u010c\52\0\1\u010d\65\0"+
    "\1\u010e\1\u010f\4\0\1\u0110\2\0\1\u0111\1\0\1\166"+
    "\1\u0112\2\0\1\u0113\1\0\1\167\11\0\1\u0114\1\u0115"+
    "\1\u0116\3\0\1\u0117\2\0\1\171\24\0\1\u010e\1\u0118"+
    "\4\0\1\u0110\2\0\1\u0111\2\0\1\u0112\2\0\1\u0113"+
    "\13\0\1\u0114\1\u0115\1\u0116\3\0\1\u0117\44\0\1\u0119"+
    "\46\0\1\u011a\5\0\1\u011b\11\0\1\u011c\5\0\1\u011d"+
    "\13\0\5\323\2\0\1\u011e\16\0\1\4\4\0\10\4"+
    "\1\274\12\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\1\4"+
    "\1\204\4\0\2\204\1\u011f\20\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\10\204\1\332\12\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\4\204\1\332\16\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\20\204\1\333\2\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\13\204\1\332\7\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\23\204\1\0\1\175\5\0\1\204\1\0"+
    "\1\204\1\332\13\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\23\204\1\0\1\175\5\0\1\204\1\0"+
    "\4\204\1\332\10\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\5\204\1\332\15\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\2\204\4\0\7\204\1\327\13\204\1\0\1\175\5\0"+
    "\1\204\1\0\15\204\1\0\1\175\2\0\1\204\5\0"+
    "\1\204\1\222\4\0\7\222\1\u0120\13\222\1\65\1\66"+
    "\5\0\1\222\1\0\15\222\1\0\1\66\2\0\1\222"+
    "\2\0\1\67\2\0\2\222\4\0\2\222\1\u0121\20\222"+
    "\1\65\1\66\5\0\1\222\1\0\15\222\1\0\1\66"+
    "\2\0\1\222\2\0\1\67\2\0\1\222\1\4\4\0"+
    "\10\4\1\u0122\12\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\23\4\1\65\1\66\5\0\1\4\1\0"+
    "\1\4\1\u0123\13\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\17\4\1\76\3\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\10\4\1\u0124"+
    "\12\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\6\4\1\u0125\14\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\17\4\1\u0126\3\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\23\4\1\65\1\66\5\0"+
    "\1\4\1\0\1\4\1\u0127\13\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\16\4\1\u0106"+
    "\4\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\12\4\1\367\10\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\2\4\4\0\22\4\1\u0128\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\12\4\1\362\10\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\4\4\1\u0129\16\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\3\4"+
    "\1\u012a\17\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\3\4\1\u012b\17\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\16\4\1\305\4\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\2\4\1\u012c\1\4"+
    "\1\u012d\6\4\1\u012e\7\4\1\65\1\66\5\0\1\4"+
    "\1\0\1\4\1\u012f\13\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\13\4\1\u0130\7\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\4\4"+
    "\1\u0131\16\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\17\4\1\u0132\3\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\10\4\1\u0133\12\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\20\4\1\u0134\2\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\3\4"+
    "\1\u0135\13\4\1\u0136\3\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\7\4\1\u0137\13\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\4\4\1\u0138\16\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\4\4"+
    "\1\u0139\16\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\20\4\1\u013a\2\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\5\4\1\u013b\15\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\5\4\1\u013c\15\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\17\4"+
    "\1\u013d\3\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\17\4\1\u013e\3\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\20\4\1\252\2\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\12\4\1\u013f\10\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\1\4\17\0\1\u0140"+
    "\61\0\1\u0141\72\0\1\u0142\66\0\1\315\6\0\1\u0143"+
    "\1\0\1\316\57\0\1\u0144\73\0\1\u0145\4\0\1\u0146"+
    "\60\0\1\u0147\66\0\1\u0148\75\0\1\u0149\3\0\1\u014a"+
    "\61\0\1\u014b\124\0\4\u014c\64\0\1\u014c\1\0\1\u014c"+
    "\1\0\1\u014c\40\0\1\u0143\57\0\1\u0140\71\0\1\u011b"+
    "\11\0\1\u011c\5\0\1\u011d\22\0\1\u011e\26\0\1\u014d"+
    "\10\0\1\u014e\75\0\1\u014f\63\0\1\u014e\2\0\1\u014d"+
    "\65\0\1\u014e\2\0\1\u0150\44\0\1\204\4\0\16\204"+
    "\1\332\4\204\1\0\1\175\5\0\1\204\1\0\15\204"+
    "\1\0\1\175\2\0\1\204\5\0\1\204\1\222\4\0"+
    "\6\222\1\u0151\14\222\1\65\1\66\5\0\1\222\1\0"+
    "\15\222\1\0\1\66\2\0\1\222\2\0\1\67\2\0"+
    "\2\222\4\0\3\222\1\u0152\17\222\1\65\1\66\5\0"+
    "\1\222\1\0\15\222\1\0\1\66\2\0\1\222\2\0"+
    "\1\67\2\0\1\222\1\4\4\0\12\4\1\146\10\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\17\4"+
    "\1\u0153\1\4\1\232\1\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\17\4\1\353\3\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\20\4\1\u0154\2\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\3\4"+
    "\1\121\17\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\3\4\1\u0155\17\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\16\4\1\u0156\4\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\16\4\1\u0157\4\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\3\4"+
    "\1\u0158\17\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\1\4\1\u0159\21\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\17\4\1\u015a\3\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\1\4\1\u015b\21\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\12\4"+
    "\1\u0138\10\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\2\4\1\u015c\20\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\12\4\1\355\10\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\15\4\1\u015d\5\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\7\4"+
    "\1\u015e\13\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\7\4\1\u015f\13\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\17\4\1\u0160\3\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\3\4\1\127\17\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\7\4"+
    "\1\u0161\13\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\4\4\1\u0162\16\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\1\u0163\22\4\1\65\1\66\5\0"+
    "\1\4\1\0\15\4\1\0\1\66\2\0\1\4\2\0"+
    "\1\67\2\0\2\4\4\0\12\4\1\u0163\10\4\1\65"+
    "\1\66\5\0\1\4\1\0\15\4\1\0\1\66\2\0"+
    "\1\4\2\0\1\67\2\0\2\4\4\0\1\4\1\u0131"+
    "\21\4\1\65\1\66\5\0\1\4\1\0\15\4\1\0"+
    "\1\66\2\0\1\4\2\0\1\67\2\0\2\4\4\0"+
    "\5\4\1\u0164\15\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\1\4\21\0\1\166\60\0\1\u014c\74\0\1\u014c\10\0"+
    "\1\u014c\62\0\1\u014c\77\0\1\u014c\56\0\1\u014c\65\0"+
    "\1\u014c\74\0\1\u014c\75\0\1\u014c\1\0\1\u014c\70\0"+
    "\1\u014c\64\0\1\u014c\50\0\1\u0165\26\0\1\u0165\6\0"+
    "\1\u0165\60\0\1\u0166\52\0\1\u0167\102\0\1\u0168\45\0"+
    "\1\222\4\0\16\222\1\u0169\4\222\1\65\1\66\5\0"+
    "\1\222\1\0\15\222\1\0\1\66\2\0\1\222\2\0"+
    "\1\67\2\0\1\222\1\4\4\0\5\4\1\u016a\15\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\12\4"+
    "\1\127\10\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\16\4\1\u016b\4\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\16\4\1\u0154\4\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\20\4\1\u012d\2\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\6\4"+
    "\1\u0159\14\4\1\65\1\66\5\0\1\4\1\0\13\4"+
    "\1\u0159\1\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\10\4\1\u0159\12\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\3\4\1\u016c\17\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\7\4"+
    "\1\u016d\13\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\7\4\1\u016e\13\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\2\4\1\u016f\20\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\17\4\1\u0170\3\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\1\4"+
    "\1\u0171\21\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\1\u0172\22\4\1\65\1\66\5\0\1\4\1\0"+
    "\15\4\1\0\1\66\2\0\1\4\2\0\1\67\2\0"+
    "\1\4\43\0\5\u0173\40\0\1\u0174\61\0\1\u0175\66\0"+
    "\1\u0174\62\0\1\222\4\0\4\222\1\u0176\16\222\1\65"+
    "\1\66\5\0\1\222\1\0\15\222\1\0\1\66\2\0"+
    "\1\222\2\0\1\67\2\0\1\222\1\4\4\0\12\4"+
    "\1\u0177\10\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\3\4\1\u010b\6\4\1\u010b\10\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\20\4\1\u0178\2\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\1\4"+
    "\1\u0179\15\4\1\u0179\3\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\17\4\1\u017a\3\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\1\4\1\u0108\21\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\1\4"+
    "\1\u017b\21\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\10\4\1\u017c\12\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\1\4\43\0\5\u017d\42\0\1\u011c\47\0\1\4"+
    "\4\0\4\4\1\252\16\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\4\4\1\u017e\16\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\1\4\1\u017f\21\4"+
    "\1\65\1\66\5\0\1\4\1\0\15\4\1\0\1\66"+
    "\2\0\1\4\2\0\1\67\2\0\2\4\4\0\20\4"+
    "\1\u0180\2\4\1\65\1\66\5\0\1\4\1\0\15\4"+
    "\1\0\1\66\2\0\1\4\2\0\1\67\2\0\2\4"+
    "\4\0\17\4\1\u0181\1\4\1\u010b\1\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\1\4\43\0\5\u0182\21\0\1\4"+
    "\4\0\17\4\1\350\3\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\20\4\1\u0183\2\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\2\4\4\0\3\4\1\u0184\3\4"+
    "\1\u0184\7\4\1\u0184\3\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\3\4\1\u0185\17\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\1\4\43\0\5\u0186\21\0\1\4"+
    "\4\0\7\4\1\u0179\13\4\1\65\1\66\5\0\1\4"+
    "\1\0\15\4\1\0\1\66\2\0\1\4\2\0\1\67"+
    "\2\0\2\4\4\0\7\4\1\u010b\13\4\1\65\1\66"+
    "\5\0\1\4\1\0\15\4\1\0\1\66\2\0\1\4"+
    "\2\0\1\67\2\0\1\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18696];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\1\1\1\11\25\1\7\11\17\1\1\11"+
    "\4\1\1\0\67\1\1\11\1\0\4\1\4\0\1\1"+
    "\2\0\1\1\1\11\1\1\6\11\14\1\1\0\1\11"+
    "\3\1\1\11\67\1\1\0\1\1\4\0\71\1\23\0"+
    "\41\1\1\0\1\11\14\0\1\1\2\0\24\1\4\0"+
    "\12\1\2\0\1\11\7\1\1\0\4\1\1\0\3\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	/* Per disattivare il debugging, quindi la stampa dei simboli riconosciuti
	da parte dello scanner impostare la costante _DEBUG a false */
	private static final boolean _DEBUG = false;
	private Symbol symbol(int type) {
		if (_DEBUG) System.out.print("# "+type+" "+yytext()+"\n");	
		return new Symbol(type, yyline, yycolumn);
  	}
	private Symbol symbol(int type, Object value) {
	    	if (_DEBUG) System.out.print("# "+type+" > " +value+"\n");
		return new Symbol(type, yyline, yycolumn, value);
	}
	private int lines=0;	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { return symbol(sym.Com_Find);
          }
        case 69: break;
        case 51: 
          { return symbol(sym.Com_If_2);
          }
        case 70: break;
        case 10: 
          { return symbol(sym.SC);
          }
        case 71: break;
        case 24: 
          { return symbol(sym.Prep_supp);
          }
        case 72: break;
        case 67: 
          { return symbol(sym.Dimension_Criteria);
          }
        case 73: break;
        case 64: 
          { return symbol(sym.Com_For);
          }
        case 74: break;
        case 12: 
          { return symbol(sym.Minus,new String(yytext()));
          }
        case 75: break;
        case 5: 
          { return symbol(sym.Div,new String(yytext()));
          }
        case 76: break;
        case 58: 
          { return symbol(sym.Com_If_e);
          }
        case 77: break;
        case 1: 
          { return symbol(sym.Path,new String(yytext()));
          }
        case 78: break;
        case 11: 
          { return symbol(sym.Plus,new String(yytext()));
          }
        case 79: break;
        case 15: 
          { return symbol(sym.C_Ug);
          }
        case 80: break;
        case 18: 
          { return symbol(sym.Magg);
          }
        case 81: break;
        case 68: 
          { Utility.mf("Data raccolta: " +yytext());
						/*SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
						Date date = sdf.parse(yytext());
						GregorianCalendar calendar = new GregorianCalendar();
						calendar.setTime(date);
						Utility.mf("Date: "+calendar.toString());
						return symbol(sym.GMA,calendar);*/
						String tdata = yytext().substring(0,2)+yytext().substring(3,5)+yytext().substring(6,10);
						Utility.mf("Data trimmed: " +tdata);
						return symbol(sym.Data, new String(tdata));
          }
        case 82: break;
        case 47: 
          { return symbol(sym.Vint, new Float(yytext()));
          }
        case 83: break;
        case 49: 
          { return symbol(sym.Com_If_m);
          }
        case 84: break;
        case 17: 
          { return symbol(sym.Min);
          }
        case 85: break;
        case 7: 
          { return symbol(sym.RO);
          }
        case 86: break;
        case 40: 
          { return symbol(sym.Var,new String(yytext()));
          }
        case 87: break;
        case 50: 
          { return symbol(sym.Com_Ex);
          }
        case 88: break;
        case 20: 
          { return symbol(sym.C_Or,new String("|"));
          }
        case 89: break;
        case 32: 
          { return symbol(sym.C_Ugg);
          }
        case 90: break;
        case 37: 
          { return symbol(sym.C_Orr,new String("||"));
          }
        case 91: break;
        case 22: 
          { return symbol(sym.File,new String(yytext()));
          }
        case 92: break;
        case 21: 
          { return symbol(sym.C_And,new String("&"));
          }
        case 93: break;
        case 35: 
          { return symbol(sym.Diver);
          }
        case 94: break;
        case 55: 
          { return symbol(sym.Where);
          }
        case 95: break;
        case 60: 
          { return symbol(sym.Com_P);
          }
        case 96: break;
        case 62: 
          { return symbol(sym.Name);
          }
        case 97: break;
        case 41: 
          { yybegin(YYINITIAL);
          }
        case 98: break;
        case 33: 
          { return symbol(sym.Minug);
          }
        case 99: break;
        case 25: 
          { return symbol(sym.Com_Cp);
          }
        case 100: break;
        case 36: 
          { return symbol(sym.Maggug);
          }
        case 101: break;
        case 2: 
          { ;
          }
        case 102: break;
        case 57: 
          { return symbol(sym.Com_MKDir);
          }
        case 103: break;
        case 66: 
          { return symbol(sym.Permission_Criteria);
          }
        case 104: break;
        case 4: 
          { return symbol(sym.Ext,new String(yytext()));
          }
        case 105: break;
        case 43: 
          { /*yybegin(YYINITIAL);*/ return symbol(sym.End_S);
          }
        case 106: break;
        case 53: 
          { return symbol(sym.Com_Str);
          }
        case 107: break;
        case 44: 
          { return symbol(sym.Order,new String(yytext()));
          }
        case 108: break;
        case 48: 
          { return symbol(sym.FileScript,new String(yytext()));
          }
        case 109: break;
        case 61: 
          { return symbol(sym.FUnit);
          }
        case 110: break;
        case 46: 
          { return symbol(sym.IUnit);
          }
        case 111: break;
        case 8: 
          { return symbol(sym.RC);
          }
        case 112: break;
        case 34: 
          { return symbol(sym.Minor);
          }
        case 113: break;
        case 9: 
          { return symbol(sym.SO);
          }
        case 114: break;
        case 63: 
          { return symbol(sym.Throw_S);
          }
        case 115: break;
        case 42: 
          { return symbol(sym.Date_Criteria);
          }
        case 116: break;
        case 23: 
          { return symbol(sym.Com_Mov);
          }
        case 117: break;
        case 38: 
          { return symbol(sym.C_Andd,new String("&&"));
          }
        case 118: break;
        case 30: 
          { return symbol(sym.Com_Ls);
          }
        case 119: break;
        case 3: 
          { lines++;System.out.println("\t\tlinea:"+lines);return symbol(sym.EL);
          }
        case 120: break;
        case 59: 
          { /*yybegin(script);*/ return symbol(sym.Start_S);
          }
        case 121: break;
        case 26: 
          { return symbol(sym.Com_Cd);
          }
        case 122: break;
        case 45: 
          { return symbol(sym.Obj,new String(yytext()));
          }
        case 123: break;
        case 16: 
          { System.out.println("errore: "+yytext());
          }
        case 124: break;
        case 56: 
          { return symbol(sym.Com_For_e);
          }
        case 125: break;
        case 29: 
          { return symbol(sym.Com_For_m);
          }
        case 126: break;
        case 31: 
          { yybegin(comment);
          }
        case 127: break;
        case 28: 
          { return symbol(sym.Com_Rm);
          }
        case 128: break;
        case 39: 
          { String s = new String(yytext());
					return symbol(sym.Str,s.substring(1, s.length()-1));
          }
        case 129: break;
        case 13: 
          { return symbol(sym.Pv);
          }
        case 130: break;
        case 52: 
          { return symbol(sym.Bool,new Boolean(yytext()));
          }
        case 131: break;
        case 14: 
          { return symbol(sym.Int, new Integer(yytext()));
          }
        case 132: break;
        case 65: 
          { return symbol(sym.Result);
          }
        case 133: break;
        case 19: 
          { return symbol(sym.C_Not,new String("!"));
          }
        case 134: break;
        case 6: 
          { return symbol(sym.Times,new String(yytext()));
          }
        case 135: break;
        case 27: 
          { return symbol(sym.Com_If);
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
