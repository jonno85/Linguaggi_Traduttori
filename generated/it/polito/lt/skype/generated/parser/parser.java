
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Sep 05 19:08:58 CEST 2011
//----------------------------------------------------

package it.polito.lt.skype.generated.parser;

import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Collection;
import java.util.Iterator;
import java.util.Calendar;
import it.polito.lt.skype.manager.*;
import it.polito.lt.skype.command.*;
import it.polito.lt.skype.bot.*;

/** CUP v0.10k generated parser.
  * @version Mon Sep 05 19:08:58 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\023\005\000\002\033\004\000\002\034\004" +
    "\000\002\010\003\000\002\010\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\004\004\000\002\004\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\007\005\000\002\007\003\000\002\005\004\000\002" +
    "\005\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\003\000\002\025\005\000" +
    "\002\025\004\000\002\027\003\000\002\027\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\041\003\000\002\041\004\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\045\003\000\002\045\004\000\002\045" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\006\000\002\020\003\000" +
    "\002\020\005\000\002\020\004\000\002\014\002\000\002" +
    "\014\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\035\003\000\002\035\003\000\002\046\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\016" +
    "\003\000\002\016\003\000\002\037\005\000\002\036\003" +
    "\000\002\036\004\000\002\036\005\000\002\036\005\000" +
    "\002\013\007\000\002\044\007\000\002\044\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\030\010\000\002\032\003\000\002\032\003" +
    "\000\002\040\005\000\002\043\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\064\002\000\005\027\006\007\007\055\010" +
    "\052\011\004\012\011\016\013\021\054\022\057\023\023" +
    "\024\043\047\020\050\021\053\031\055\053\061\034\062" +
    "\041\067\036\070\005\072\024\073\037\074\032\075\010" +
    "\100\051\001\002\000\022\025\uffd4\027\uffd4\030\uffd4\034" +
    "\uffd4\036\uffd4\063\234\064\uffd4\065\uffd4\001\002\000\004" +
    "\027\233\001\002\000\024\025\uffce\027\uffce\030\uffce\031" +
    "\232\034\uffce\035\231\036\uffce\064\uffce\065\uffce\001\002" +
    "\000\020\025\uffd0\027\uffd0\030\uffd0\034\uffd0\036\uffd0\064" +
    "\uffd0\065\uffd0\001\002\000\050\004\uffb6\013\uffb6\025\uffb6" +
    "\027\uffb6\030\uffb6\034\uffb6\036\uffb6\040\uffb6\042\uffb6\043" +
    "\uffb6\045\uffb6\046\uffb6\050\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\073\uffb6\001\002\000\026\047\020\050" +
    "\066\053\031\055\053\061\034\062\041\072\024\074\032" +
    "\075\010\100\051\001\002\000\010\012\uffee\016\uffee\073" +
    "\uffee\001\002\000\012\026\164\050\170\074\167\075\166" +
    "\001\002\000\010\012\011\016\013\073\217\001\002\000" +
    "\004\002\214\001\002\000\020\004\205\025\105\027\112" +
    "\030\107\034\uffc2\036\104\073\204\001\002\000\064\002" +
    "\uffff\005\027\006\007\007\055\010\052\011\004\012\011" +
    "\016\013\021\054\022\057\023\023\024\043\047\020\050" +
    "\021\053\031\055\053\061\034\062\041\067\036\070\005" +
    "\072\024\073\037\074\032\075\010\100\051\001\002\000" +
    "\026\047\064\050\066\053\031\055\053\061\034\062\041" +
    "\072\024\074\032\075\010\100\051\001\002\000\024\040" +
    "\uffdd\041\063\042\uffdd\043\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\073\uffea\001\002\000\006\014\175\015\174\001" +
    "\002\000\020\025\uffd1\027\uffd1\030\uffd1\034\uffd1\036\uffd1" +
    "\064\uffd1\065\uffd1\001\002\000\050\004\uffb5\013\uffb5\025" +
    "\uffb5\027\uffb5\030\uffb5\034\uffb5\036\uffb5\040\uffb5\042\uffb5" +
    "\043\uffb5\045\uffb5\046\uffb5\050\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\073\uffb5\001\002\000\004\073\173" +
    "\001\002\000\020\040\140\042\074\043\067\055\070\056" +
    "\073\057\071\060\072\001\002\000\014\025\105\027\112" +
    "\030\107\034\uffc2\036\104\001\002\000\062\005\027\006" +
    "\007\007\055\010\052\011\004\012\011\016\013\021\054" +
    "\022\057\023\023\024\043\047\020\050\021\053\031\055" +
    "\053\061\034\062\041\067\036\070\005\072\024\073\037" +
    "\074\032\075\010\100\051\001\002\000\026\047\064\050" +
    "\066\053\031\055\053\061\034\062\041\072\024\074\032" +
    "\075\010\100\051\001\002\000\050\004\uffb7\013\uffb7\025" +
    "\uffb7\027\uffb7\030\uffb7\034\uffb7\036\uffb7\040\uffb7\042\uffb7" +
    "\043\uffb7\045\uffb7\046\uffb7\050\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\073\uffb7\001\002\000\006\050\062" +
    "\073\152\001\002\000\050\004\uffb3\013\uffb3\025\uffb3\027" +
    "\uffb3\030\uffb3\034\uffb3\036\uffb3\040\uffb3\042\uffb3\043\uffb3" +
    "\045\uffb3\046\uffb3\050\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\073\uffb3\001\002\000\004\073\150\001\002" +
    "\000\004\027\147\001\002\000\072\002\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\047" +
    "\ufff0\050\ufff0\053\ufff0\055\ufff0\061\ufff0\062\ufff0\067\ufff0" +
    "\070\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\100\ufff0\001" +
    "\002\000\014\025\105\027\112\030\107\034\uffc2\036\104" +
    "\001\002\000\050\004\uffb4\013\uffb4\025\uffb4\027\uffb4\030" +
    "\uffb4\034\uffb4\036\uffb4\040\uffb4\042\uffb4\043\uffb4\045\uffb4" +
    "\046\uffb4\050\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\073\uffb4\001\002\000\034\013\uffdc\040\uffdc\042\uffdc" +
    "\043\uffdc\045\uffdc\046\uffdc\050\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\073\uffdc\001\002\000\026\047\064" +
    "\050\066\053\031\055\053\061\034\062\041\072\024\074" +
    "\032\075\010\100\051\001\002\000\004\073\142\001\002" +
    "\000\034\013\uffe0\040\uffe0\042\uffe0\043\uffe0\045\uffe0\046" +
    "\uffe0\050\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\073\uffe0\001\002\000\012\013\uffae\045\uffae\046\uffae\073" +
    "\uffae\001\002\000\010\045\132\046\133\073\135\001\002" +
    "\000\010\012\uffef\016\uffef\073\uffef\001\002\000\050\004" +
    "\uffb2\013\uffb2\025\uffb2\027\uffb2\030\uffb2\034\uffb2\036\uffb2" +
    "\040\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\050\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\073\uffb2\001\002" +
    "\000\020\025\uffcf\027\uffcf\030\uffcf\034\uffcf\036\uffcf\064" +
    "\uffcf\065\uffcf\001\002\000\026\047\064\050\066\053\031" +
    "\055\053\061\034\062\041\072\024\074\032\075\010\100" +
    "\051\001\002\000\024\025\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\064\uffcd\065\uffcd\001\002\000" +
    "\020\025\uffd2\027\uffd2\030\uffd2\034\uffd2\036\uffd2\064\uffd2" +
    "\065\uffd2\001\002\000\016\025\105\027\112\030\107\034" +
    "\uffc2\036\104\073\113\001\002\000\004\050\062\001\002" +
    "\000\072\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\047\ufffb\050\ufffb\053\ufffb\055" +
    "\ufffb\061\ufffb\062\ufffb\067\ufffb\070\ufffb\072\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\100\ufffb\001\002\000\006\050\uffe9\073" +
    "\uffe9\001\002\000\010\041\063\050\uffea\073\uffea\001\002" +
    "\000\026\047\064\050\066\053\031\055\053\061\034\062" +
    "\041\072\024\074\032\075\010\100\051\001\002\000\026" +
    "\047\064\050\066\053\031\055\053\061\034\062\041\072" +
    "\024\074\032\075\010\100\051\001\002\000\022\042\074" +
    "\043\067\050\uffeb\055\070\056\073\057\071\060\072\073" +
    "\uffeb\001\002\000\034\013\uffdd\040\uffdd\042\uffdd\043\uffdd" +
    "\045\uffdd\046\uffdd\050\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\073\uffdd\001\002\000\026\047\064\050\066" +
    "\053\031\055\053\061\034\062\041\072\024\074\032\075" +
    "\010\100\051\001\002\000\026\047\064\050\066\053\031" +
    "\055\053\061\034\062\041\072\024\074\032\075\010\100" +
    "\051\001\002\000\026\047\064\050\066\053\031\055\053" +
    "\061\034\062\041\072\024\074\032\075\010\100\051\001" +
    "\002\000\026\047\064\050\066\053\031\055\053\061\034" +
    "\062\041\072\024\074\032\075\010\100\051\001\002\000" +
    "\026\047\064\050\066\053\031\055\053\061\034\062\041" +
    "\072\024\074\032\075\010\100\051\001\002\000\026\047" +
    "\064\050\066\053\031\055\053\061\034\062\041\072\024" +
    "\074\032\075\010\100\051\001\002\000\034\013\uffe3\040" +
    "\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3\050\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\073\uffe3\001\002\000" +
    "\034\013\uffe5\040\uffe5\042\074\043\uffe5\045\uffe5\046\uffe5" +
    "\050\uffe5\054\uffe5\055\uffe5\056\uffe5\057\071\060\072\073" +
    "\uffe5\001\002\000\034\013\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\045\uffe6\046\uffe6\050\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\073\uffe6\001\002\000\034\013\uffe7\040\uffe7" +
    "\042\uffe7\043\uffe7\045\uffe7\046\uffe7\050\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\073\uffe7\001\002\000\034" +
    "\013\uffe4\040\uffe4\042\074\043\uffe4\045\uffe4\046\uffe4\050" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\071\060\072\073\uffe4" +
    "\001\002\000\034\013\uffe2\040\uffe2\042\074\043\uffe2\045" +
    "\uffe2\046\uffe2\050\uffe2\054\uffe2\055\uffe2\056\uffe2\057\071" +
    "\060\072\073\uffe2\001\002\000\034\013\uffde\040\uffde\042" +
    "\uffde\043\uffde\045\uffde\046\uffde\050\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\073\uffde\001\002\000\004\034" +
    "\uffc1\001\002\000\024\004\uffd9\025\uffd9\027\uffd9\030\uffd9" +
    "\034\uffd9\036\uffd9\064\uffd9\065\uffd9\073\uffd9\001\002\000" +
    "\016\025\uffd6\027\uffd6\030\uffd6\034\uffd6\036\uffd6\073\uffd6" +
    "\001\002\000\024\004\uffdb\025\uffdb\027\uffdb\030\uffdb\034" +
    "\uffdb\036\uffdb\064\uffdb\065\uffdb\073\uffdb\001\002\000\024" +
    "\004\uffc0\025\uffc0\027\uffc0\030\uffc0\034\uffc0\036\uffc0\042" +
    "\uffc0\043\uffc0\073\uffc0\001\002\000\004\034\121\001\002" +
    "\000\024\004\uffda\025\uffda\027\uffda\030\uffda\034\uffda\036" +
    "\uffda\064\uffda\065\uffda\073\uffda\001\002\000\072\002\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\047\ufff6\050\ufff6\053\ufff6\055\ufff6\061\ufff6\062" +
    "\ufff6\067\ufff6\070\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6" +
    "\100\ufff6\001\002\000\022\025\uffd5\027\uffd5\030\uffd5\034" +
    "\uffd5\036\uffd5\042\117\043\115\073\uffd5\001\002\000\006" +
    "\034\uffb9\036\uffb9\001\002\000\006\034\uffc2\036\104\001" +
    "\002\000\006\034\uffba\036\uffba\001\002\000\024\004\uffbf" +
    "\025\uffbf\027\uffbf\030\uffbf\034\uffbf\036\uffbf\042\uffbf\043" +
    "\uffbf\073\uffbf\001\002\000\006\040\122\041\123\001\002" +
    "\000\020\061\034\062\041\072\024\074\032\075\010\076" +
    "\126\100\051\001\002\000\020\061\034\062\041\072\024" +
    "\074\032\075\010\076\126\100\051\001\002\000\024\004" +
    "\uffbd\025\uffbd\027\uffbd\030\uffbd\034\uffbd\036\uffbd\042\uffbd" +
    "\043\uffbd\073\uffbd\001\002\000\024\004\uffbb\025\uffbb\027" +
    "\uffbb\030\uffbb\034\uffbb\036\uffbb\042\uffbb\043\uffbb\073\uffbb" +
    "\001\002\000\024\004\uffb8\025\uffb8\027\uffb8\030\uffb8\034" +
    "\uffb8\036\uffb8\042\uffb8\043\uffb8\073\uffb8\001\002\000\024" +
    "\004\uffbe\025\uffbe\027\uffbe\030\uffbe\034\uffbe\036\uffbe\042" +
    "\uffbe\043\uffbe\073\uffbe\001\002\000\024\004\uffbc\025\uffbc" +
    "\027\uffbc\030\uffbc\034\uffbc\036\uffbc\042\uffbc\043\uffbc\073" +
    "\uffbc\001\002\000\034\013\uffe1\040\uffe1\042\074\043\uffe1" +
    "\045\uffe1\046\uffe1\050\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\071\060\072\073\uffe1\001\002\000\026\047\uffb0\050\uffb0" +
    "\053\uffb0\055\uffb0\061\uffb0\062\uffb0\072\uffb0\074\uffb0\075" +
    "\uffb0\100\uffb0\001\002\000\026\047\uffb1\050\uffb1\053\uffb1" +
    "\055\uffb1\061\uffb1\062\uffb1\072\uffb1\074\uffb1\075\uffb1\100" +
    "\uffb1\001\002\000\026\047\064\050\066\053\031\055\053" +
    "\061\034\062\041\072\024\074\032\075\010\100\051\001" +
    "\002\000\072\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\047\ufff1\050\ufff1\053\ufff1" +
    "\055\ufff1\061\ufff1\062\ufff1\067\ufff1\070\ufff1\072\ufff1\073" +
    "\ufff1\074\ufff1\075\ufff1\100\ufff1\001\002\000\012\013\uffac" +
    "\045\uffac\046\uffac\073\uffac\001\002\000\030\013\uffab\040" +
    "\140\042\074\043\067\045\uffab\046\uffab\055\070\056\073" +
    "\057\071\060\072\073\uffab\001\002\000\026\047\064\050" +
    "\066\053\031\055\053\061\034\062\041\072\024\074\032" +
    "\075\010\100\051\001\002\000\026\013\uffaf\042\074\043" +
    "\067\045\uffaf\046\uffaf\055\070\056\073\057\071\060\072" +
    "\073\uffaf\001\002\000\072\002\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\047\ufff4\050" +
    "\ufff4\053\ufff4\055\ufff4\061\ufff4\062\ufff4\067\ufff4\070\ufff4" +
    "\072\ufff4\073\ufff4\074\ufff4\075\ufff4\100\ufff4\001\002\000" +
    "\020\042\074\043\067\055\070\056\073\057\071\060\072" +
    "\073\144\001\002\000\072\002\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\047\ufff2\050" +
    "\ufff2\053\ufff2\055\ufff2\061\ufff2\062\ufff2\067\ufff2\070\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\075\ufff2\100\ufff2\001\002\000" +
    "\016\025\uffd8\027\uffd8\030\uffd8\034\uffd8\036\uffd8\073\uffd8" +
    "\001\002\000\022\025\uffd7\027\uffd7\030\uffd7\034\uffd7\036" +
    "\uffd7\042\117\043\115\073\uffd7\001\002\000\004\073\ufffc" +
    "\001\002\000\072\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\047\ufff8\050\ufff8\053" +
    "\ufff8\055\ufff8\061\ufff8\062\ufff8\067\ufff8\070\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\100\ufff8\001\002\000\006\050" +
    "\uffe8\073\uffe8\001\002\000\072\002\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\047\ufff9" +
    "\050\ufff9\053\ufff9\055\ufff9\061\ufff9\062\ufff9\067\ufff9\070" +
    "\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\100\ufff9\001\002" +
    "\000\020\042\074\043\067\054\154\055\070\056\073\057" +
    "\071\060\072\001\002\000\034\013\uffdf\040\uffdf\042\uffdf" +
    "\043\uffdf\045\uffdf\046\uffdf\050\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\073\uffdf\001\002\000\064\005\027" +
    "\006\007\007\055\010\052\011\004\012\011\016\013\017" +
    "\157\021\054\022\057\023\023\024\043\047\020\050\021" +
    "\053\031\055\053\061\034\062\041\067\036\070\005\072" +
    "\024\073\037\074\032\075\010\100\051\001\002\000\010" +
    "\012\uff9f\016\uff9f\073\uff9f\001\002\000\006\055\161\056" +
    "\163\001\002\000\072\002\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\047\ufffa\050\ufffa" +
    "\053\ufffa\055\ufffa\061\ufffa\062\ufffa\067\ufffa\070\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\075\ufffa\100\ufffa\001\002\000\012" +
    "\026\uffa1\050\uffa1\074\uffa1\075\uffa1\001\002\000\012\026" +
    "\164\050\170\074\167\075\166\001\002\000\012\026\uffa2" +
    "\050\uffa2\074\uffa2\075\uffa2\001\002\000\022\012\uffa4\016" +
    "\uffa4\020\uffa4\026\uffa4\050\uffa4\073\uffa4\074\uffa4\075\uffa4" +
    "\001\002\000\010\012\uffa0\016\uffa0\073\uffa0\001\002\000" +
    "\022\012\uffa5\016\uffa5\020\uffa5\026\uffa5\050\uffa5\073\uffa5" +
    "\074\uffa5\075\uffa5\001\002\000\022\012\uffa6\016\uffa6\020" +
    "\uffa6\026\uffa6\050\uffa6\073\uffa6\074\uffa6\075\uffa6\001\002" +
    "\000\022\012\uffa7\016\uffa7\020\uffa7\026\uffa7\050\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\001\002\000\020\004\uffca\025\uffca" +
    "\027\uffca\030\uffca\034\uffca\036\uffca\073\uffca\001\002\000" +
    "\024\004\uffc9\025\uffc9\027\uffc9\030\uffc9\034\uffc9\036\uffc9" +
    "\042\117\043\115\073\uffc9\001\002\000\072\002\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\047\ufff3\050\ufff3\053\ufff3\055\ufff3\061\ufff3\062\ufff3" +
    "\067\ufff3\070\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\100" +
    "\ufff3\001\002\000\010\012\uffa8\016\uffa8\073\uffa8\001\002" +
    "\000\004\073\176\001\002\000\062\005\027\006\007\007" +
    "\055\010\052\011\004\012\011\016\013\021\054\022\057" +
    "\023\023\024\043\047\020\050\021\053\031\055\053\061" +
    "\034\062\041\067\036\070\005\072\024\073\037\074\032" +
    "\075\010\100\051\001\002\000\064\005\027\006\007\007" +
    "\055\010\052\011\004\012\011\015\200\016\013\021\054" +
    "\022\057\023\023\024\043\047\020\050\021\053\031\055" +
    "\053\061\034\062\041\067\036\070\005\072\024\073\037" +
    "\074\032\075\010\100\051\001\002\000\010\012\uffa9\016" +
    "\uffa9\073\uffa9\001\002\000\012\013\uffad\045\uffad\046\uffad" +
    "\073\uffad\001\002\000\020\040\uffde\042\uffde\043\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\001\002\000\020\004\uffc8" +
    "\025\uffc8\027\uffc8\030\uffc8\034\uffc8\036\uffc8\073\uffc8\001" +
    "\002\000\072\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\047\ufff5\050\ufff5\053\ufff5" +
    "\055\ufff5\061\ufff5\062\ufff5\067\ufff5\070\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\075\ufff5\100\ufff5\001\002\000\016\006\007" +
    "\007\055\010\052\011\004\021\054\023\023\001\002\000" +
    "\024\004\uffc7\025\uffc7\027\uffc7\030\uffc7\034\uffc7\036\uffc7" +
    "\042\117\043\115\073\uffc7\001\002\000\006\064\uffc5\065" +
    "\uffc5\001\002\000\006\064\212\065\211\001\002\000\014" +
    "\025\105\027\112\030\107\064\uffc3\065\uffc3\001\002\000" +
    "\020\004\uffc6\025\uffc6\027\uffc6\030\uffc6\034\uffc6\036\uffc6" +
    "\073\uffc6\001\002\000\006\064\uffc4\065\uffc4\001\002\000" +
    "\004\002\001\001\002\000\010\012\uffec\016\uffec\073\uffec" +
    "\001\002\000\010\012\uffed\016\uffed\073\uffed\001\002\000" +
    "\072\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\047\ufff7\050\ufff7\053\ufff7\055\ufff7" +
    "\061\ufff7\062\ufff7\067\ufff7\070\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\100\ufff7\001\002\000\012\026\164\050\170" +
    "\074\167\075\166\001\002\000\012\026\164\050\170\074" +
    "\167\075\166\001\002\000\004\020\223\001\002\000\004" +
    "\073\224\001\002\000\062\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\011\uffa3\012\uffa3\016\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\047\uffa3\050\uffa3\053\uffa3\055\uffa3\061\uffa3\062" +
    "\uffa3\067\uffa3\070\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\100\uffa3\001\002\000\010\013\226\045\132\046\133\001" +
    "\002\000\004\073\227\001\002\000\062\005\027\006\007" +
    "\007\055\010\052\011\004\012\011\016\013\021\054\022" +
    "\057\023\023\024\043\047\020\050\021\053\031\055\053" +
    "\061\034\062\041\067\036\070\005\072\024\073\037\074" +
    "\032\075\010\100\051\001\002\000\066\005\027\006\007" +
    "\007\055\010\052\011\004\012\011\014\uffaa\015\uffaa\016" +
    "\013\021\054\022\057\023\023\024\043\047\020\050\021" +
    "\053\031\055\053\061\034\062\041\067\036\070\005\072" +
    "\024\073\037\074\032\075\010\100\051\001\002\000\024" +
    "\025\uffcb\027\uffcb\030\uffcb\031\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\064\uffcb\065\uffcb\001\002\000\024\025\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\034\uffcc\035\uffcc\036\uffcc\064\uffcc\065" +
    "\uffcc\001\002\000\004\073\ufffd\001\002\000\020\025\uffd3" +
    "\027\uffd3\030\uffd3\034\uffd3\036\uffd3\064\uffd3\065\uffd3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\054\003\014\004\057\005\032\006\013\007" +
    "\034\010\016\013\021\017\015\024\041\025\025\027\044" +
    "\030\027\033\043\034\024\036\046\037\045\041\037\042" +
    "\055\043\011\044\047\045\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\041\025\025\027\044\036\224" +
    "\037\045\001\001\000\002\001\001\000\004\026\217\001" +
    "\001\000\012\013\021\030\027\043\215\044\214\001\001" +
    "\000\002\001\001\000\012\014\110\021\205\022\107\047" +
    "\202\001\001\000\050\004\157\005\032\006\013\007\034" +
    "\013\021\017\015\024\041\025\025\027\044\030\027\033" +
    "\043\034\024\036\046\037\045\041\037\042\055\043\011" +
    "\044\047\045\005\001\001\000\012\024\041\025\201\027" +
    "\044\037\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\110\021\171\022\107\047\170" +
    "\001\001\000\052\004\057\005\032\006\013\007\034\010" +
    "\154\013\021\017\015\024\041\025\025\027\044\030\027" +
    "\033\043\034\024\036\046\037\045\041\037\042\055\043" +
    "\011\044\047\045\005\001\001\000\010\024\041\025\152" +
    "\027\044\001\001\000\002\001\001\000\004\007\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\110\021\145\022\107\047" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\041\025\142\027\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\041\025\130\027\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\110\021\113\022\107\047" +
    "\105\001\001\000\004\007\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\041\025" +
    "\064\027\044\001\001\000\010\024\041\025\102\027\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\041\025\101\027\044\001\001\000\010\024\041\025\100" +
    "\027\044\001\001\000\010\024\041\025\077\027\044\001" +
    "\001\000\010\024\041\025\076\027\044\001\001\000\010" +
    "\024\041\025\075\027\044\001\001\000\010\024\041\025" +
    "\074\027\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\115\001\001\000\002\001\001\000\006\014" +
    "\110\022\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\126\046\127\001\001\000" +
    "\006\024\123\046\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\041\025\136\027\044\037\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\041\025\140\027\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\004\157\005\032\006" +
    "\013\007\034\013\021\017\015\024\041\025\025\027\044" +
    "\030\027\033\043\034\024\036\046\037\045\040\155\041" +
    "\037\042\055\043\011\044\047\045\005\001\001\000\002" +
    "\001\001\000\004\032\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\004\057\005\032\006\013\007\034" +
    "\010\176\013\021\017\015\024\041\025\025\027\044\030" +
    "\027\033\043\034\024\036\046\037\045\041\037\042\055" +
    "\043\011\044\047\045\005\001\001\000\050\004\157\005" +
    "\032\006\013\007\034\013\021\017\015\024\041\025\025" +
    "\027\044\030\027\033\043\034\024\036\046\037\045\041" +
    "\037\042\055\043\011\044\047\045\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\207\041\206\045\005" +
    "\001\001\000\004\035\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\220\001\001" +
    "\000\004\026\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\133\001\001\000\002" +
    "\001\001\000\052\004\057\005\032\006\013\007\034\010" +
    "\227\013\021\017\015\024\041\025\025\027\044\030\027" +
    "\033\043\034\024\036\046\037\045\041\037\042\055\043" +
    "\011\044\047\045\005\001\001\000\050\004\157\005\032" +
    "\006\013\007\034\013\021\017\015\024\041\025\025\027" +
    "\044\030\027\033\043\034\024\036\046\037\045\041\037" +
    "\042\055\043\011\044\047\045\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	vm = new VarManager();
	cp = new CommandParameter[6];
	com =null;


    }


public VarManager vm;
public CommandParameter[] cp;
public ICommand com;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for_stmt ::= for_head i_stmt for_tail 
            {
              Object[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar[] x = (myVar[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[] y = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println("for cycle");
			RESULT= new Object[5];
			RESULT[0] = (myVar)x[0];
			RESULT[1] = (myVar)x[1];
			RESULT[2] = (myVar)x[2];			
			RESULT[3] = parser.vm.extractVar(y[1].toString());  
			RESULT[4] = (String)y[0];					
              CUP$parser$result = new java_cup.runtime.Symbol(33/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_tail ::= Com_For_e i_Op_ps for_arg 
            {
              String[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	//passiamo un vettore di 2 elementi stringe contenenti l'operatore e il fattore
			System.out.println("dentro for tail");
			RESULT= new String[2];
			RESULT[0]= (String)x.toString();
			RESULT[1]= ((myVar)y).getName();
			System.out.println(" valore: "+y.toString());
			System.out.println("operatore: "+x.toString()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(30/*for_tail*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // i_Op_ps ::= Minus 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // i_Op_ps ::= Plus 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_head ::= Com_For for_arg for_arg for_arg Com_For_m EL 
            {
              myVar[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar z = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("for_head variabili \n"+x.toString()+"\n"+y.toString()+"\n"+z.toString());
		// passiamo un vettore contenente le tre variabili sulle quali controllare il ciclo for
			RESULT= new myVar[3];
			RESULT[0]= x;
			RESULT[1]= y;
			RESULT[2]= z;							
              CUP$parser$result = new java_cup.runtime.Symbol(22/*for_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_arg ::= ID 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_arg ::= Vint 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_arg ::= Int 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_arg ::= Var 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(x); 				
              CUP$parser$result = new java_cup.runtime.Symbol(20/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_stmt ::= if_head Com_If_e 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_stmt ::= if_head Com_If_m EL i_stmt Com_If_e 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_head ::= Com_If conf_exp Com_If_2 EL i_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*if_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conf_exp ::= conf_exp cond_if arit_stmt 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conf_exp ::= conf_exp cond_if conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // conf_exp ::= C_Not conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conf_exp ::= conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conf ::= arit_stmt Cond arit_stmt 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*conf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond_if ::= C_Andd 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond_if ::= C_Orr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // i_arg ::= Bool 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._bool, new Boolean(x)); 		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // i_arg ::= FUnit 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // i_arg ::= IUnit 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // i_arg ::= Str 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("str: "+x); 
					RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // i_arg ::= Vint 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // i_arg ::= Int 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // date_arg ::= GMA 
            {
              Calendar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Calendar x = (Calendar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x;			
              CUP$parser$result = new java_cup.runtime.Symbol(36/*date_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bool_op ::= C_Or 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =x; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bool_op ::= C_And 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =x; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cc_conds ::= _where Criteria C_Ug date_arg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cc_conds ::= _where Criteria Cond date_arg 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cc_conds ::= _where Criteria C_Ug i_arg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cc_conds ::= _where Criteria Cond i_arg 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // i_cc_conds ::= i_cc_conds bool_op cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // i_cc_conds ::= cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _where ::= Where 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _where ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comm_find_2 ::= comm_find_2 Name 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comm_find_2 ::= comm_find_2 Name param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comm_find_2 ::= commands 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comm_find ::= comm_find Com_Ex comm_find_2 Pv 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comm_find ::= comm_find i_cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comm_find ::= comm_find param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comm_find ::= Com_Find i_cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comm_find ::= Com_Find param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LS_stmt ::= LS_stmt Obj 
            {
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
						Utility.mf("LS obj!");
						parser.cp[1]=new CommandParameter(null,o,null);					
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LS_stmt ::= LS_stmt Order 
            {
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
						Utility.mf("LS Order!");
						parser.cp[0]=new CommandParameter(null,o,null);					
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LS_stmt ::= Com_Ls 
            {
              Object[] RESULT = null;
		 
						Utility.mf("LS!");
						
						parser.com = new LSCommand("/home/robizz/lt");
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // commands ::= LS_stmt 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // commands ::= Com_Cp 
            {
              Object[] RESULT = null;
		 
						Utility.mf("CP!");
						
						parser.com = new CPCommand("/home/robizz/lt");
								
					
              CUP$parser$result = new java_cup.runtime.Symbol(31/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // commands ::= Com_Rm 
            {
              Object[] RESULT = null;
		 
						Utility.mf("RM!");
						
						parser.com = new RMCommand("/home/robizz/lt");
							
					
              CUP$parser$result = new java_cup.runtime.Symbol(31/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // commands ::= Com_Mov 
            {
              Object[] RESULT = null;
		 
						Utility.mf("MV!");
						parser.com = new MVCommand("/home/robizz/lt");		
					
              CUP$parser$result = new java_cup.runtime.Symbol(31/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // commands ::= Com_MKDir 
            {
              Object[] RESULT = null;
		 
						Utility.mf("MKDIR!");
						
						parser.com = new MKDCommand("/home/robizz/lt");
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(31/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // commands ::= Com_Cd Minor 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // commands ::= Com_Cd 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sh_stmt ::= sh_stmt i_cc_conds 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sh_stmt ::= sh_stmt param 
            {
              Object[] RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.cp[3]=p; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sh_stmt ::= commands i_cc_conds 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sh_stmt ::= commands param 
            {
              Object[] RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] c = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.cp[2]=p; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= Ext 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CommandParameter(ParamType.FILE,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= File 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CommandParameter(ParamType.FILE,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= Path 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new CommandParameter(ParamType.FILE,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arit_arg ::= i_arg 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((myVar)x); System.out.println("i_arg"); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arit_arg ::= Var 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.extractVar(x); 
							System.out.println("Var: "+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arit_stmt ::= C_Not arit_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.makeSOper(((myVar)x),s); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arit_stmt ::= RO arit_stmt RC 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ((myVar)x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arit_stmt ::= arit_arg 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((myVar)x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arit_stmt ::= Minus arit_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.makeSOper(((myVar)x),s); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arit_stmt ::= arit_stmt C_Or arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_stmt ::= arit_stmt C_And arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_stmt ::= arit_stmt Minus arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_stmt ::= arit_stmt Plus arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arit_stmt ::= arit_stmt Div arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arit_stmt ::= arit_stmt Times arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_stmt ::= init_stmt assig_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.vm.add_var(((myVar)x)); 	
              CUP$parser$result = new java_cup.runtime.Symbol(3/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_stmt ::= Com_Str assig_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.vm.add_var(((myVar)x)); 	
              CUP$parser$result = new java_cup.runtime.Symbol(3/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assig_stmt ::= Var 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assig_stmt ::= Var C_Ug arit_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ((myVar)y).setName(x); RESULT = y; 	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_stmt ::= str_stmt if_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_stmt ::= str_stmt for_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_stmt ::= for_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // str_stmt ::= if_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= conf_exp EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= Com_P arit_stmt EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= throw_s EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= start_s EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= comm_find EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= sh_stmt EL 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] x = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						System.out.println("raccolto sh stmt"); 
						/*((ICommand)(((Object[])x)[0])).setCommandParamter(((CommandParameter)((Object[])x)[1]))); 
						((ICommand)(((Object[])x)[0])).exec(); 
						System.out.println(((ICommand)((Object[])x)[0])).getCommandStringResult()); */
						Object[] o = (Object[])x;
						
						parser.com.setCommandParameter(parser.cp);
						parser.com.exec();
						Utility.mf(parser.com.getCommandStringResult());
					
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= str_stmt EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= assig_stmt EL 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.vm.assig(((myVar)x)); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= init_stmt EL 
            {
              Object RESULT = null;
		 parser.vm.getListVar(); 	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_stmt ::= i_stmt stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // i_stmt ::= stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // throw_s ::= Throw_S File 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*throw_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_s ::= Start_S File 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*start_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= start_s i_stmt End_S 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= i_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

