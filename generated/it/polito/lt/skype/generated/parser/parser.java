
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Sep 12 19:24:45 CEST 2011
//----------------------------------------------------

package it.polito.lt.skype.generated.parser;

import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Collection;
import java.util.Iterator;
import java.util.Calendar;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Iterator;
import it.polito.lt.skype.manager.*;
import it.polito.lt.skype.command.*;
import it.polito.lt.skype.parser.*;
import it.polito.lt.skype.bot.*;

/** CUP v0.10k generated parser.
  * @version Mon Sep 12 19:24:45 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\020\007\000\002\033\005\000\002\034\004" +
    "\000\002\050\003\000\002\050\004\000\002\050\003\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\005\000\002\052\004\000\002\052\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\004\000\002\053\004\000" +
    "\002\004\005\000\002\004\003\000\002\051\004\000\002" +
    "\051\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\004\000\002\022\003\000\002\022\005\000" +
    "\002\022\004\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\024\003\000\002\024\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\042\003" +
    "\000\002\042\004\000\002\042\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\006\000\002\012\003\000\002\012\005\000\002\012" +
    "\004\000\002\007\002\000\002\007\003\000\002\013\003" +
    "\000\002\013\005\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\014\006\000\002\014\006\000\002\014\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\006\000\002\035" +
    "\003\000\002\035\003\000\002\037\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\040\003\000\002" +
    "\040\003\000\002\036\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\047\007\000\002\046\007\000" +
    "\002\046\004\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\045\010\000\002\032" +
    "\003\000\002\032\003\000\002\027\005\000\002\044\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\064\002\000\005\030\006\007\007\057\010" +
    "\054\011\004\012\010\016\013\021\056\022\061\023\024" +
    "\024\045\056\021\057\022\062\032\064\055\070\035\071" +
    "\043\076\037\077\005\101\025\103\041\104\033\105\011" +
    "\110\053\001\002\000\024\025\uffce\027\uffce\030\uffce\035" +
    "\uffce\036\uffce\037\uffce\041\uffce\073\uffce\074\uffce\001\002" +
    "\000\004\102\320\001\002\000\030\025\uffc9\027\uffc9\030" +
    "\uffc9\031\317\035\uffc9\036\uffc9\037\uffc9\040\316\041\uffc9" +
    "\073\uffc9\074\uffc9\001\002\000\024\025\uffcb\027\uffcb\030" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\041\uffcb\073\uffcb\074\uffcb" +
    "\001\002\000\026\056\021\057\070\062\032\064\055\070" +
    "\035\071\043\101\025\104\033\105\011\110\053\001\002" +
    "\000\066\004\uffa0\013\uffa0\025\uffa0\027\uffa0\030\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\041\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\057\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0" +
    "\103\uffa0\001\002\000\010\012\uffee\016\uffee\103\uffee\001" +
    "\002\000\012\026\262\057\266\104\265\105\264\001\002" +
    "\000\010\012\010\016\013\103\304\001\002\000\004\002" +
    "\301\001\002\000\072\002\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\056\ufff9\057\ufff9" +
    "\062\ufff9\064\ufff9\070\ufff9\071\ufff9\076\ufff9\100\ufff9\101" +
    "\ufff9\103\ufff9\104\ufff9\105\ufff9\110\ufff9\001\002\000\012" +
    "\013\uff97\054\uff97\055\uff97\103\uff97\001\002\000\062\002" +
    "\uffff\005\030\006\007\007\057\010\054\011\004\012\010" +
    "\016\013\021\056\022\061\023\024\024\045\056\021\057" +
    "\022\062\032\064\055\070\035\071\043\076\037\101\025" +
    "\103\041\104\033\105\011\110\053\001\002\000\026\056" +
    "\066\057\070\062\032\064\055\070\035\071\043\101\025" +
    "\104\033\105\011\110\053\001\002\000\036\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\065\051\uffd7\052\uffd7" +
    "\053\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\103\uffea\001" +
    "\002\000\006\014\273\015\272\001\002\000\024\025\uffcc" +
    "\027\uffcc\030\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\073" +
    "\uffcc\074\uffcc\001\002\000\066\004\uff9f\013\uff9f\025\uff9f" +
    "\027\uff9f\030\uff9f\035\uff9f\036\uff9f\037\uff9f\041\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\057\uff9f\063\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\103\uff9f\001\002\000\004\103\271" +
    "\001\002\000\032\043\207\044\214\045\212\046\211\047" +
    "\206\051\076\052\071\053\210\064\072\065\075\066\073" +
    "\067\074\001\002\000\020\025\107\027\115\030\111\035" +
    "\uffbd\036\uffbd\037\uffbd\041\106\001\002\000\062\005\030" +
    "\006\007\007\057\010\054\011\004\012\010\016\013\021" +
    "\056\022\061\023\024\024\045\056\021\057\022\062\032" +
    "\064\055\070\035\071\043\076\037\077\005\101\025\103" +
    "\041\104\033\105\011\110\053\001\002\000\026\056\066" +
    "\057\070\062\032\064\055\070\035\071\043\101\025\104" +
    "\033\105\011\110\053\001\002\000\066\004\uffa1\013\uffa1" +
    "\025\uffa1\027\uffa1\030\uffa1\035\uffa1\036\uffa1\037\uffa1\041" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\067\uffa1\103\uffa1\001\002\000\006" +
    "\057\064\103\251\001\002\000\066\004\uff9d\013\uff9d\025" +
    "\uff9d\027\uff9d\030\uff9d\035\uff9d\036\uff9d\037\uff9d\041\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\057\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\103\uff9d\001\002\000\004\103" +
    "\247\001\002\000\004\027\246\001\002\000\024\004\237" +
    "\025\107\027\115\030\111\035\uffbd\036\uffbd\037\uffbd\041" +
    "\106\103\236\001\002\000\072\002\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\056\ufff0" +
    "\057\ufff0\062\ufff0\064\ufff0\070\ufff0\071\ufff0\076\ufff0\100" +
    "\ufff0\101\ufff0\103\ufff0\104\ufff0\105\ufff0\110\ufff0\001\002" +
    "\000\020\025\107\027\115\030\111\035\uffbd\036\uffbd\037" +
    "\uffbd\041\106\001\002\000\066\004\uff9e\013\uff9e\025\uff9e" +
    "\027\uff9e\030\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\057\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\067\uff9e\103\uff9e\001\002\000\046\013\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\103\uffd6\001\002\000\026\056" +
    "\066\057\070\062\032\064\055\070\035\071\043\101\025" +
    "\104\033\105\011\110\053\001\002\000\062\005\030\006" +
    "\007\007\057\010\054\011\004\012\010\016\013\021\056" +
    "\022\061\023\024\024\045\056\021\057\022\062\032\064" +
    "\055\070\035\071\043\076\037\077\005\101\025\103\041" +
    "\104\033\105\011\110\053\001\002\000\046\013\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\057\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\103\uffe0\001\002\000\012\013\uff98" +
    "\054\uff98\055\uff98\103\uff98\001\002\000\010\054\177\055" +
    "\200\103\202\001\002\000\010\012\uffef\016\uffef\103\uffef" +
    "\001\002\000\066\004\uff9c\013\uff9c\025\uff9c\027\uff9c\030" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\057\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\067\uff9c\103\uff9c\001\002\000\024\025\uffca\027\uffca\030" +
    "\uffca\035\uffca\036\uffca\037\uffca\041\uffca\073\uffca\074\uffca" +
    "\001\002\000\026\056\066\057\070\062\032\064\055\070" +
    "\035\071\043\101\025\104\033\105\011\110\053\001\002" +
    "\000\030\025\uffc8\027\uffc8\030\uffc8\031\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\073\uffc8\074\uffc8\001\002" +
    "\000\024\025\uffcd\027\uffcd\030\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\041\uffcd\073\uffcd\074\uffcd\001\002\000\022\025\107" +
    "\027\115\030\111\035\uffbd\036\uffbd\037\uffbd\041\106\103" +
    "\116\001\002\000\004\057\064\001\002\000\072\002\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\056\ufffb\057\ufffb\062\ufffb\064\ufffb\070\ufffb\071" +
    "\ufffb\076\ufffb\100\ufffb\101\ufffb\103\ufffb\104\ufffb\105\ufffb" +
    "\110\ufffb\001\002\000\006\057\uffe9\103\uffe9\001\002\000" +
    "\010\050\065\057\uffea\103\uffea\001\002\000\026\056\066" +
    "\057\070\062\032\064\055\070\035\071\043\101\025\104" +
    "\033\105\011\110\053\001\002\000\026\056\066\057\070" +
    "\062\032\064\055\070\035\071\043\101\025\104\033\105" +
    "\011\110\053\001\002\000\022\051\076\052\071\057\uffeb" +
    "\064\072\065\075\066\073\067\074\103\uffeb\001\002\000" +
    "\046\013\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\103\uffd7\001\002" +
    "\000\026\056\066\057\070\062\032\064\055\070\035\071" +
    "\043\101\025\104\033\105\011\110\053\001\002\000\026" +
    "\056\066\057\070\062\032\064\055\070\035\071\043\101" +
    "\025\104\033\105\011\110\053\001\002\000\026\056\066" +
    "\057\070\062\032\064\055\070\035\071\043\101\025\104" +
    "\033\105\011\110\053\001\002\000\026\056\066\057\070" +
    "\062\032\064\055\070\035\071\043\101\025\104\033\105" +
    "\011\110\053\001\002\000\026\056\066\057\070\062\032" +
    "\064\055\070\035\071\043\101\025\104\033\105\011\110" +
    "\053\001\002\000\026\056\066\057\070\062\032\064\055" +
    "\070\035\071\043\101\025\104\033\105\011\110\053\001" +
    "\002\000\046\013\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\103\uffe3" +
    "\001\002\000\046\013\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\051\076\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\057\uffe5\063\uffe5\064\uffe5\065\uffe5\066\073\067\074\103" +
    "\uffe5\001\002\000\046\013\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\057\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\103\uffe6\001\002\000\046\013\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\057\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\103\uffe7\001\002\000\046\013\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\051\076\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\057\uffe4\063\uffe4\064\uffe4\065\uffe4\066\073" +
    "\067\074\103\uffe4\001\002\000\046\013\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\051\076\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\057\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\073\067\074\103\uffe2\001\002\000\046\013\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\057\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\103\uffde\001\002\000\010\035\uffbc\036" +
    "\uffbc\037\uffbc\001\002\000\030\004\uffd3\025\uffd3\027\uffd3" +
    "\030\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\073\uffd3\074" +
    "\uffd3\103\uffd3\001\002\000\022\025\uffd0\027\uffd0\030\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\041\uffd0\103\uffd0\001\002\000" +
    "\030\004\uffd5\025\uffd5\027\uffd5\030\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\041\uffd5\073\uffd5\074\uffd5\103\uffd5\001\002\000" +
    "\030\004\uffb9\025\uffb9\027\uffb9\030\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\041\uffb9\051\uffb9\052\uffb9\103\uffb9\001\002\000" +
    "\030\004\uffbb\025\uffbb\027\uffbb\030\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\041\uffbb\051\uffbb\052\uffbb\103\uffbb\001\002\000" +
    "\010\035\130\036\126\037\127\001\002\000\030\004\uffd4" +
    "\025\uffd4\027\uffd4\030\uffd4\035\uffd4\036\uffd4\037\uffd4\041" +
    "\uffd4\073\uffd4\074\uffd4\103\uffd4\001\002\000\072\002\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\056\ufff5\057\ufff5\062\ufff5\064\ufff5\070\ufff5\071" +
    "\ufff5\076\ufff5\100\ufff5\101\ufff5\103\ufff5\104\ufff5\105\ufff5" +
    "\110\ufff5\001\002\000\030\004\uffb7\025\uffb7\027\uffb7\030" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\041\uffb7\051\uffb7\052\uffb7" +
    "\103\uffb7\001\002\000\026\025\uffcf\027\uffcf\030\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\041\uffcf\051\123\052\122\103\uffcf" +
    "\001\002\000\030\004\uffb8\025\uffb8\027\uffb8\030\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\041\uffb8\051\uffb8\052\uffb8\103\uffb8" +
    "\001\002\000\012\035\uffa3\036\uffa3\037\uffa3\041\uffa3\001" +
    "\002\000\012\035\uffa4\036\uffa4\037\uffa4\041\uffa4\001\002" +
    "\000\012\035\uffbd\036\uffbd\037\uffbd\041\106\001\002\000" +
    "\030\004\uffba\025\uffba\027\uffba\030\uffba\035\uffba\036\uffba" +
    "\037\uffba\041\uffba\051\uffba\052\uffba\103\uffba\001\002\000" +
    "\016\043\163\044\162\045\164\046\166\047\167\050\165" +
    "\001\002\000\016\043\146\044\147\045\150\046\152\047" +
    "\153\050\151\001\002\000\016\043\132\044\131\045\133" +
    "\046\135\047\136\050\134\001\002\000\004\032\140\001" +
    "\002\000\004\032\140\001\002\000\004\032\140\001\002" +
    "\000\004\032\140\001\002\000\004\032\140\001\002\000" +
    "\004\032\140\001\002\000\030\004\uffa6\025\uffa6\027\uffa6" +
    "\030\uffa6\035\uffa6\036\uffa6\037\uffa6\041\uffa6\051\uffa6\052" +
    "\uffa6\103\uffa6\001\002\000\030\004\uffa2\025\uffa2\027\uffa2" +
    "\030\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\051\uffa2\052" +
    "\uffa2\103\uffa2\001\002\000\030\004\uffa7\025\uffa7\027\uffa7" +
    "\030\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\051\uffa7\052" +
    "\uffa7\103\uffa7\001\002\000\030\004\uffa5\025\uffa5\027\uffa5" +
    "\030\uffa5\035\uffa5\036\uffa5\037\uffa5\041\uffa5\051\uffa5\052" +
    "\uffa5\103\uffa5\001\002\000\030\004\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\035\uffa8\036\uffa8\037\uffa8\041\uffa8\051\uffa8\052" +
    "\uffa8\103\uffa8\001\002\000\030\004\uffaa\025\uffaa\027\uffaa" +
    "\030\uffaa\035\uffaa\036\uffaa\037\uffaa\041\uffaa\051\uffaa\052" +
    "\uffaa\103\uffaa\001\002\000\030\004\uffa9\025\uffa9\027\uffa9" +
    "\030\uffa9\035\uffa9\036\uffa9\037\uffa9\041\uffa9\051\uffa9\052" +
    "\uffa9\103\uffa9\001\002\000\016\070\035\071\043\101\025" +
    "\104\033\105\011\110\053\001\002\000\016\070\035\071" +
    "\043\101\025\104\033\105\011\110\053\001\002\000\016" +
    "\070\035\071\043\101\025\104\033\105\011\110\053\001" +
    "\002\000\016\070\035\071\043\101\025\104\033\105\011" +
    "\110\053\001\002\000\016\070\035\071\043\101\025\104" +
    "\033\105\011\110\053\001\002\000\016\070\035\071\043" +
    "\101\025\104\033\105\011\110\053\001\002\000\030\004" +
    "\uffb2\025\uffb2\027\uffb2\030\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\041\uffb2\051\uffb2\052\uffb2\103\uffb2\001\002\000\030\004" +
    "\uffb3\025\uffb3\027\uffb3\030\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\041\uffb3\051\uffb3\052\uffb3\103\uffb3\001\002\000\030\004" +
    "\uffb1\025\uffb1\027\uffb1\030\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\041\uffb1\051\uffb1\052\uffb1\103\uffb1\001\002\000\030\004" +
    "\uffb4\025\uffb4\027\uffb4\030\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\041\uffb4\051\uffb4\052\uffb4\103\uffb4\001\002\000\030\004" +
    "\uffb5\025\uffb5\027\uffb5\030\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\041\uffb5\051\uffb5\052\uffb5\103\uffb5\001\002\000\030\004" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\041\uffb6\051\uffb6\052\uffb6\103\uffb6\001\002\000\016\070" +
    "\035\071\043\101\025\104\033\105\011\110\053\001\002" +
    "\000\016\070\035\071\043\101\025\104\033\105\011\110" +
    "\053\001\002\000\016\070\035\071\043\101\025\104\033" +
    "\105\011\110\053\001\002\000\016\070\035\071\043\101" +
    "\025\104\033\105\011\110\053\001\002\000\016\070\035" +
    "\071\043\101\025\104\033\105\011\110\053\001\002\000" +
    "\016\070\035\071\043\101\025\104\033\105\011\110\053" +
    "\001\002\000\030\004\uffac\025\uffac\027\uffac\030\uffac\035" +
    "\uffac\036\uffac\037\uffac\041\uffac\051\uffac\052\uffac\103\uffac" +
    "\001\002\000\030\004\uffad\025\uffad\027\uffad\030\uffad\035" +
    "\uffad\036\uffad\037\uffad\041\uffad\051\uffad\052\uffad\103\uffad" +
    "\001\002\000\030\004\uffab\025\uffab\027\uffab\030\uffab\035" +
    "\uffab\036\uffab\037\uffab\041\uffab\051\uffab\052\uffab\103\uffab" +
    "\001\002\000\030\004\uffae\025\uffae\027\uffae\030\uffae\035" +
    "\uffae\036\uffae\037\uffae\041\uffae\051\uffae\052\uffae\103\uffae" +
    "\001\002\000\030\004\uffb0\025\uffb0\027\uffb0\030\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\041\uffb0\051\uffb0\052\uffb0\103\uffb0" +
    "\001\002\000\030\004\uffaf\025\uffaf\027\uffaf\030\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\041\uffaf\051\uffaf\052\uffaf\103\uffaf" +
    "\001\002\000\046\013\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\051\076\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\057\uffe1\063\uffe1\064\uffe1\065\uffe1\066\073\067\074\103" +
    "\uffe1\001\002\000\026\056\uff9a\057\uff9a\062\uff9a\064\uff9a" +
    "\070\uff9a\071\uff9a\101\uff9a\104\uff9a\105\uff9a\110\uff9a\001" +
    "\002\000\026\056\uff9b\057\uff9b\062\uff9b\064\uff9b\070\uff9b" +
    "\071\uff9b\101\uff9b\104\uff9b\105\uff9b\110\uff9b\001\002\000" +
    "\026\056\066\057\070\062\032\064\055\070\035\071\043" +
    "\101\025\104\033\105\011\110\053\001\002\000\072\002" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\056\ufff1\057\ufff1\062\ufff1\064\ufff1\070\ufff1" +
    "\071\ufff1\076\ufff1\100\ufff1\101\ufff1\103\ufff1\104\ufff1\105" +
    "\ufff1\110\ufff1\001\002\000\012\013\uff93\054\uff93\055\uff93" +
    "\103\uff93\001\002\000\012\013\uff95\054\uff95\055\uff95\103" +
    "\uff95\001\002\000\042\013\uff94\043\207\044\214\045\212" +
    "\046\211\047\206\051\076\052\071\053\210\054\uff94\055" +
    "\uff94\064\072\065\075\066\073\067\074\103\uff94\001\002" +
    "\000\026\056\066\057\070\062\032\064\055\070\035\071" +
    "\043\101\025\104\033\105\011\110\053\001\002\000\026" +
    "\056\066\057\070\062\032\064\055\070\035\071\043\101" +
    "\025\104\033\105\011\110\053\001\002\000\026\056\066" +
    "\057\070\062\032\064\055\070\035\071\043\101\025\104" +
    "\033\105\011\110\053\001\002\000\026\056\066\057\070" +
    "\062\032\064\055\070\035\071\043\101\025\104\033\105" +
    "\011\110\053\001\002\000\026\056\066\057\070\062\032" +
    "\064\055\070\035\071\043\101\025\104\033\105\011\110" +
    "\053\001\002\000\026\056\066\057\070\062\032\064\055" +
    "\070\035\071\043\101\025\104\033\105\011\110\053\001" +
    "\002\000\026\056\066\057\070\062\032\064\055\070\035" +
    "\071\043\101\025\104\033\105\011\110\053\001\002\000" +
    "\026\013\uffdd\051\076\052\071\054\uffdd\055\uffdd\064\072" +
    "\065\075\066\073\067\074\103\uffdd\001\002\000\026\013" +
    "\uff99\051\076\052\071\054\uff99\055\uff99\064\072\065\075" +
    "\066\073\067\074\103\uff99\001\002\000\026\013\uffda\051" +
    "\076\052\071\054\uffda\055\uffda\064\072\065\075\066\073" +
    "\067\074\103\uffda\001\002\000\026\013\uffdc\051\076\052" +
    "\071\054\uffdc\055\uffdc\064\072\065\075\066\073\067\074" +
    "\103\uffdc\001\002\000\026\013\uffd9\051\076\052\071\054" +
    "\uffd9\055\uffd9\064\072\065\075\066\073\067\074\103\uffd9" +
    "\001\002\000\026\013\uffdb\051\076\052\071\054\uffdb\055" +
    "\uffdb\064\072\065\075\066\073\067\074\103\uffdb\001\002" +
    "\000\026\013\uffd8\051\076\052\071\054\uffd8\055\uffd8\064" +
    "\072\065\075\066\073\067\074\103\uffd8\001\002\000\062" +
    "\005\030\006\007\007\057\010\054\011\004\012\010\016" +
    "\013\021\056\022\061\023\024\024\045\056\021\057\022" +
    "\062\032\064\055\070\035\071\043\076\037\100\225\101" +
    "\025\103\041\104\033\105\011\110\053\001\002\000\004" +
    "\102\227\001\002\000\072\002\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\056\ufffa\057" +
    "\ufffa\062\ufffa\064\ufffa\070\ufffa\071\ufffa\076\ufffa\100\ufffa" +
    "\101\ufffa\103\ufffa\104\ufffa\105\ufffa\110\ufffa\001\002\000" +
    "\004\103\230\001\002\000\072\002\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\056\ufffe" +
    "\057\ufffe\062\ufffe\064\ufffe\070\ufffe\071\ufffe\076\ufffe\100" +
    "\ufffe\101\ufffe\103\ufffe\104\ufffe\105\ufffe\110\ufffe\001\002" +
    "\000\020\051\076\052\071\064\072\065\075\066\073\067" +
    "\074\103\232\001\002\000\072\002\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\056\ufff2" +
    "\057\ufff2\062\ufff2\064\ufff2\070\ufff2\071\ufff2\076\ufff2\100" +
    "\ufff2\101\ufff2\103\ufff2\104\ufff2\105\ufff2\110\ufff2\001\002" +
    "\000\022\025\uffd2\027\uffd2\030\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\041\uffd2\103\uffd2\001\002\000\026\025\uffd1\027\uffd1" +
    "\030\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\051\123\052" +
    "\122\103\uffd1\001\002\000\024\004\uffc3\025\uffc3\027\uffc3" +
    "\030\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\103\uffc3\001" +
    "\002\000\072\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\056\ufff4\057\ufff4\062\ufff4" +
    "\064\ufff4\070\ufff4\071\ufff4\076\ufff4\100\ufff4\101\ufff4\103" +
    "\ufff4\104\ufff4\105\ufff4\110\ufff4\001\002\000\016\006\007" +
    "\007\057\010\054\011\004\021\056\023\024\001\002\000" +
    "\030\004\uffc2\025\uffc2\027\uffc2\030\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\041\uffc2\051\123\052\122\103\uffc2\001\002\000" +
    "\006\073\uffc0\074\uffc0\001\002\000\006\073\244\074\243" +
    "\001\002\000\014\025\107\027\115\030\111\073\uffbe\074" +
    "\uffbe\001\002\000\024\004\uffc1\025\uffc1\027\uffc1\030\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\041\uffc1\103\uffc1\001\002\000" +
    "\006\073\uffbf\074\uffbf\001\002\000\004\103\ufffc\001\002" +
    "\000\072\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\056\ufff7\057\ufff7\062\ufff7\064" +
    "\ufff7\070\ufff7\071\ufff7\076\ufff7\100\ufff7\101\ufff7\103\ufff7" +
    "\104\ufff7\105\ufff7\110\ufff7\001\002\000\006\057\uffe8\103" +
    "\uffe8\001\002\000\072\002\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\056\ufff8\057\ufff8" +
    "\062\ufff8\064\ufff8\070\ufff8\071\ufff8\076\ufff8\100\ufff8\101" +
    "\ufff8\103\ufff8\104\ufff8\105\ufff8\110\ufff8\001\002\000\020" +
    "\051\076\052\071\063\253\064\072\065\075\066\073\067" +
    "\074\001\002\000\046\013\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\057\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\103\uffdf\001\002\000\062\005\030\006\007\007\057\010" +
    "\054\011\004\012\010\016\013\017\256\021\056\022\061" +
    "\023\024\024\045\056\021\057\022\062\032\064\055\070" +
    "\035\071\043\076\037\101\025\103\041\104\033\105\011" +
    "\110\053\001\002\000\010\012\uff87\016\uff87\103\uff87\001" +
    "\002\000\006\064\257\065\261\001\002\000\012\026\uff89" +
    "\057\uff89\104\uff89\105\uff89\001\002\000\012\026\262\057" +
    "\266\104\265\105\264\001\002\000\012\026\uff8a\057\uff8a" +
    "\104\uff8a\105\uff8a\001\002\000\022\012\uff8c\016\uff8c\020" +
    "\uff8c\026\uff8c\057\uff8c\103\uff8c\104\uff8c\105\uff8c\001\002" +
    "\000\010\012\uff88\016\uff88\103\uff88\001\002\000\022\012" +
    "\uff8d\016\uff8d\020\uff8d\026\uff8d\057\uff8d\103\uff8d\104\uff8d" +
    "\105\uff8d\001\002\000\022\012\uff8e\016\uff8e\020\uff8e\026" +
    "\uff8e\057\uff8e\103\uff8e\104\uff8e\105\uff8e\001\002\000\022" +
    "\012\uff8f\016\uff8f\020\uff8f\026\uff8f\057\uff8f\103\uff8f\104" +
    "\uff8f\105\uff8f\001\002\000\024\004\uffc5\025\uffc5\027\uffc5" +
    "\030\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\103\uffc5\001" +
    "\002\000\030\004\uffc4\025\uffc4\027\uffc4\030\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\041\uffc4\051\123\052\122\103\uffc4\001" +
    "\002\000\072\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\056\ufff3\057\ufff3\062\ufff3" +
    "\064\ufff3\070\ufff3\071\ufff3\076\ufff3\100\ufff3\101\ufff3\103" +
    "\ufff3\104\ufff3\105\ufff3\110\ufff3\001\002\000\010\012\uff90" +
    "\016\uff90\103\uff90\001\002\000\004\103\274\001\002\000" +
    "\062\005\030\006\007\007\057\010\054\011\004\012\010" +
    "\016\013\021\056\022\061\023\024\024\045\056\021\057" +
    "\022\062\032\064\055\070\035\071\043\076\037\077\005" +
    "\101\025\103\041\104\033\105\011\110\053\001\002\000" +
    "\062\005\030\006\007\007\057\010\054\011\004\012\010" +
    "\015\276\016\013\021\056\022\061\023\024\024\045\056" +
    "\021\057\022\062\032\064\055\070\035\071\043\076\037" +
    "\101\025\103\041\104\033\105\011\110\053\001\002\000" +
    "\010\012\uff91\016\uff91\103\uff91\001\002\000\012\013\uff96" +
    "\054\uff96\055\uff96\103\uff96\001\002\000\032\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053\uffde" +
    "\064\uffde\065\uffde\066\uffde\067\uffde\001\002\000\004\002" +
    "\001\001\002\000\010\012\uffec\016\uffec\103\uffec\001\002" +
    "\000\010\012\uffed\016\uffed\103\uffed\001\002\000\072\002" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\056\ufff6\057\ufff6\062\ufff6\064\ufff6\070\ufff6" +
    "\071\ufff6\076\ufff6\100\ufff6\101\ufff6\103\ufff6\104\ufff6\105" +
    "\ufff6\110\ufff6\001\002\000\012\026\262\057\266\104\265" +
    "\105\264\001\002\000\012\026\262\057\266\104\265\105" +
    "\264\001\002\000\004\020\310\001\002\000\004\103\311" +
    "\001\002\000\062\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011" +
    "\uff8b\012\uff8b\016\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b" +
    "\056\uff8b\057\uff8b\062\uff8b\064\uff8b\070\uff8b\071\uff8b\076" +
    "\uff8b\077\uff8b\101\uff8b\103\uff8b\104\uff8b\105\uff8b\110\uff8b" +
    "\001\002\000\010\013\313\054\177\055\200\001\002\000" +
    "\004\103\314\001\002\000\062\005\030\006\007\007\057" +
    "\010\054\011\004\012\010\016\013\021\056\022\061\023" +
    "\024\024\045\056\021\057\022\062\032\064\055\070\035" +
    "\071\043\076\037\077\005\101\025\103\041\104\033\105" +
    "\011\110\053\001\002\000\064\005\030\006\007\007\057" +
    "\010\054\011\004\012\010\014\uff92\015\uff92\016\013\021" +
    "\056\022\061\023\024\024\045\056\021\057\022\062\032" +
    "\064\055\070\035\071\043\076\037\101\025\103\041\104" +
    "\033\105\011\110\053\001\002\000\030\025\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\073\uffc6\074\uffc6\001\002\000\030\025\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\073\uffc7\074\uffc7\001\002\000\004\103\321\001\002" +
    "\000\062\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\016\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\056\ufffd" +
    "\057\ufffd\062\ufffd\064\ufffd\070\ufffd\071\ufffd\076\ufffd\077" +
    "\ufffd\101\ufffd\103\ufffd\104\ufffd\105\ufffd\110\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\060\003\014\004\035\011\037\020\015\021" +
    "\043\022\026\024\046\025\050\026\016\030\041\033\045" +
    "\034\025\036\047\041\057\042\005\044\011\045\030\046" +
    "\051\047\022\050\017\051\033\052\061\053\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\043\022\026\024\046\025\311" +
    "\026\016\036\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\304\001\001\000\012\044\302\045\030" +
    "\046\301\047\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\004\035\011\037\021\043" +
    "\022\026\024\046\025\050\026\016\030\041\034\025\036" +
    "\047\041\057\042\005\044\011\045\030\046\051\047\022" +
    "\051\033\052\225\053\013\001\001\000\012\021\043\022" +
    "\277\024\046\036\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\212\001\001\000\020\007\113\013\267" +
    "\014\120\015\111\016\116\017\112\043\266\001\001\000" +
    "\056\004\035\011\037\020\015\021\043\022\026\024\046" +
    "\025\050\026\016\030\041\033\045\034\025\036\047\041" +
    "\057\042\005\044\011\045\030\046\051\047\022\050\253" +
    "\051\033\052\061\053\013\001\001\000\010\021\043\022" +
    "\251\024\046\001\001\000\002\001\001\000\004\004\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\113\013\237\014\120\015\111\016\116" +
    "\017\112\043\234\001\001\000\002\001\001\000\020\007" +
    "\113\013\233\014\120\015\111\016\116\017\112\043\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\043\022\230\024\046\001\001\000\056\004\035\011\037" +
    "\020\015\021\043\022\026\024\046\025\050\026\016\030" +
    "\041\033\045\034\025\036\047\041\057\042\005\044\011" +
    "\045\030\046\051\047\022\050\223\051\033\052\061\053" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\043\022\175\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\113\013" +
    "\117\014\120\015\111\016\116\017\112\043\107\001\001" +
    "\000\004\004\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\043\022\066\024\046" +
    "\001\001\000\010\021\043\022\104\024\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\043\022\103" +
    "\024\046\001\001\000\010\021\043\022\102\024\046\001" +
    "\001\000\010\021\043\022\101\024\046\001\001\000\010" +
    "\021\043\022\100\024\046\001\001\000\010\021\043\022" +
    "\077\024\046\001\001\000\010\021\043\022\076\024\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\113\014\120\015\111\016\116\017\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\144\001\001\000\004\037\143\001\001" +
    "\000\004\037\142\001\001\000\004\037\141\001\001\000" +
    "\004\037\140\001\001\000\004\037\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\160\001\001\000\004\021\157\001\001\000" +
    "\004\021\156\001\001\000\004\021\155\001\001\000\004" +
    "\021\154\001\001\000\004\021\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\174\001" +
    "\001\000\004\021\173\001\001\000\004\021\172\001\001" +
    "\000\004\021\171\001\001\000\004\021\170\001\001\000" +
    "\004\021\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\043\022\204\024\046\026\202\036" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\212\001\001\000\010\021\043\022" +
    "\222\024\046\001\001\000\010\021\043\022\221\024\046" +
    "\001\001\000\010\021\043\022\220\024\046\001\001\000" +
    "\010\021\043\022\217\024\046\001\001\000\010\021\043" +
    "\022\216\024\046\001\001\000\010\021\043\022\215\024" +
    "\046\001\001\000\010\021\043\022\214\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\004\035\011\037\021\043\022\026\024" +
    "\046\025\050\026\016\030\041\034\025\036\047\041\057" +
    "\042\005\044\011\045\030\046\051\047\022\051\033\052" +
    "\225\053\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\241\030" +
    "\240\042\005\001\001\000\004\035\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\004\035\011\037\021\043" +
    "\022\026\024\046\025\050\026\016\027\254\030\041\034" +
    "\025\036\047\041\057\042\005\044\011\045\030\046\051" +
    "\047\022\051\033\052\225\053\013\001\001\000\002\001" +
    "\001\000\004\032\257\001\001\000\002\001\001\000\004" +
    "\023\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\004\035\011\037\020\015\021\043\022\026\024\046\025" +
    "\050\026\016\030\041\033\045\034\025\036\047\041\057" +
    "\042\005\044\011\045\030\046\051\047\022\050\274\051" +
    "\033\052\061\053\013\001\001\000\050\004\035\011\037" +
    "\021\043\022\026\024\046\025\050\026\016\030\041\034" +
    "\025\036\047\041\057\042\005\044\011\045\030\046\051" +
    "\047\022\051\033\052\225\053\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\305\001\001\000\004\023\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\200\001\001\000\002\001\001\000\056\004\035" +
    "\011\037\020\015\021\043\022\026\024\046\025\050\026" +
    "\016\030\041\033\045\034\025\036\047\041\057\042\005" +
    "\044\011\045\030\046\051\047\022\050\314\051\033\052" +
    "\061\053\013\001\001\000\050\004\035\011\037\021\043" +
    "\022\026\024\046\025\050\026\016\030\041\034\025\036" +
    "\047\041\057\042\005\044\011\045\030\046\051\047\022" +
    "\051\033\052\225\053\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	vm = new VarManager();
	cp = new CommandParameter[7];
	cpm = new CommandParameter[7][];
	com = null;
	comFind = null;

	array_path = new ArrayList<CommandParameter>();
	array_file = new ArrayList<CommandParameter>();
	array_perm = new ArrayList<CommandParameter>();
	array_data = new ArrayList<CommandParameter>();
	array_dim = new ArrayList<CommandParameter>();

	ifcc = null;
	ic = null;

	list_script = new LinkedList<ICommand>();
	todo = new LinkedList<ICommand>();


    }



	public VarManager vm;
	public CommandParameter[] cp, datap, permp, dimp ;
	public CommandParameter[][] cpm;
	public ICommand com, comFind;
	public int counter_file = 0;
	public int counter_path = 0;
	public int sublevel = 0;

	public ArrayList<CommandParameter> array_path, array_file, array_dim, array_perm, array_data;

	public LinkedList<ICommand> list_script;
	public LinkedList<ICommand> todo;
	public IFlowCommandControl ifcc;
	public ICommand ic;
	public boolean if_control = false;

	private String enviroment = "/home";

	public void add_param(CommandParameter x) throws ParserException
	{
		Utility.mf(x.getValue()+" tipo "+x.getParamType());
		if(x.getParamType()==ParamType.PATH)
			array_path.add(x);
		else
			array_file.add(x);
	}

	public void setEnviroment(String path)
	{
		enviroment = path;
		Utility.mf("CURRENT-PATH now is: " + enviroment);
	}

	public String getEnviroment()
	{
		return enviroment;
	}

	public void print_el(LinkedList ls)
	{
		LinkedList ll = ls;
		Utility.mf("ITERATORE ");
		Iterator s = ll.iterator();
		while(s.hasNext())
			((IFlowCommandControl)s.next()).print_parameters();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for_stmt ::= for_head i_stmt for_tail 
            {
              for_command RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		for_command x = (for_command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		x.set_list_command(l);
		parser.list_script.clear();
		x.close_command(y);
		System.out.println("for cycle");
		RESULT = x;
		
              CUP$parser$result = new java_cup.runtime.Symbol(34/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for_tail ::= Com_For_e i_Op_ps for_arg 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				Utility.mf("CICLO FOR CHIUSO");
				Utility.mf("\tSUBLEVEL: "+(--parser.sublevel));
				Utility.mf("step: "+parser.vm.Auto_Neg(y,s));
				RESULT = parser.vm.Auto_Neg(y,s);
				
              CUP$parser$result = new java_cup.runtime.Symbol(21/*for_tail*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // i_Op_ps ::= Minus 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // i_Op_ps ::= Plus 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_head ::= Com_For for_arg for_arg for_arg Com_For_m EL 
            {
              for_command RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar z = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				System.out.println("FOR HEAD variabili "+x.getValue()+"\t"+y.getValue()+"\t"+z.getValue());
				for_command fc = new for_command(x,y,z);
				Utility.mf("\tSUBLEVEL: "+(++parser.sublevel));
				RESULT = fc;
				
              CUP$parser$result = new java_cup.runtime.Symbol(35/*for_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_arg ::= ID 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_arg ::= Vint 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_arg ::= Int 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_arg ::= Var 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.extractVar(x); 
					System.out.println("Var: "+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_stmt ::= if_head Com_If_e 
            {
              if_command RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		if_command x = (if_command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				x.close_command();
				Utility.mf("IF CHIUSO");
				RESULT = x;
				
              CUP$parser$result = new java_cup.runtime.Symbol(36/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_stmt ::= if_head Com_If_m EL i_stmt Com_If_e 
            {
              if_command RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		if_command x = (if_command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				x.set_list_command_else(l);
				parser.list_script.clear();
				x.close_command(new myVar());
				Utility.mf("IF ELSE CHIUSO");
				RESULT = x;
				
              CUP$parser$result = new java_cup.runtime.Symbol(36/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_head ::= Com_If conf_exp Com_If_2 EL i_stmt 
            {
              if_command RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				if_command ic = new if_command(x);
				ic.set_list_command(l);
				parser.list_script.clear();
				Utility.mf("IF HEAD condizione: ");
				Utility.mf("\tSUBLEVEL: "+parser.sublevel);
				RESULT = ic;
				
              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // conf_exp ::= conf_exp cond_if logic_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				Utility.mf("IF: CONF_EXP with AND/OR ...");
				RESULT = parser.vm.makeOper(x,y,s);
				
              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // conf_exp ::= conf_exp cond_if arit_stmt 
            {
              myVar RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // conf_exp ::= conf_exp cond_if conf 
            {
              myVar RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // conf_exp ::= C_Not conf 
            {
              myVar RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conf_exp ::= logic_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar s = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				Utility.mf("IF LOGIC STMT -> CONF_EXP ");
				RESULT = s;
				
              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conf_exp ::= conf 
            {
              myVar RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conf ::= arit_stmt cond arit_stmt 
            {
              String RESULT = null;
		
				
				
              CUP$parser$result = new java_cup.runtime.Symbol(28/*conf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond_if ::= C_Andd 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cond_if ::= C_Orr 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				Utility.mf("IF C_Orr: ");
				RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // i_arg ::= Bool 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._bool, new Boolean(x)); 		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // i_arg ::= FUnit 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // i_arg ::= IUnit 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // i_arg ::= Str 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("str: "+x); 
					RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // i_arg ::= Vint 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // i_arg ::= Int 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // date_arg ::= Data 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x;	
              CUP$parser$result = new java_cup.runtime.Symbol(29/*date_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bool_op ::= C_Or 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =x; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bool_op ::= C_And 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =x; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cc_date_cond ::= _where Date_Criteria C_Ug date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Date Criteria UG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.UG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cc_date_cond ::= _where Date_Criteria Diver date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Date Criteria DIV raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.DIV);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cc_date_cond ::= _where Date_Criteria Maggug date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Date Criteria MAGUG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAGUG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cc_date_cond ::= _where Date_Criteria Minug date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Date Criteria MINUG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MINUG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cc_date_cond ::= _where Date_Criteria Magg date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Date Criteria MAG raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cc_date_cond ::= _where Date_Criteria Min date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Date Criteria MIN raccolto");
								parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MIN);					
							
              CUP$parser$result = new java_cup.runtime.Symbol(10/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cc_permission_cond ::= _where Permission_Criteria C_Ug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto permesso = : OK");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.UG);			
								
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cc_permission_cond ::= _where Permission_Criteria Diver i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.DIV);
								
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cc_permission_cond ::= _where Permission_Criteria Maggug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MAGUG);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cc_permission_cond ::= _where Permission_Criteria Minug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MINUG);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cc_permission_cond ::= _where Permission_Criteria Magg i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MAG);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cc_permission_cond ::= _where Permission_Criteria Min i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.getStringValue(),SignType.MIN);
								
              CUP$parser$result = new java_cup.runtime.Symbol(11/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cc_dimension_cond ::= _where Dimension_Criteria C_Ug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto OK");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.UG);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cc_dimension_cond ::= _where Dimension_Criteria Diver i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.DIV);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cc_dimension_cond ::= _where Dimension_Criteria Maggug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MAGUG);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cc_dimension_cond ::= _where Dimension_Criteria Minug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MINUG);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cc_dimension_cond ::= _where Dimension_Criteria Magg i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto");
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MAG);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cc_dimension_cond ::= _where Dimension_Criteria Min i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
								Utility.mf("Dimension Criteria raccolto valore i_arg ricevuto: "+a.getStringValue());
								parser.cp[6]=new CommandParameter(ParamType.DIMENSIONE,a.getStringValue(),SignType.MIN);		
								
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cc_conds ::= cc_dimension_cond 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					parser.array_dim.add(parser.cp[6]);
					
              CUP$parser$result = new java_cup.runtime.Symbol(13/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cc_conds ::= cc_date_cond 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					parser.array_data.add(parser.cp[4]);
					
              CUP$parser$result = new java_cup.runtime.Symbol(13/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cc_conds ::= cc_permission_cond 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					parser.array_perm.add(parser.cp[5]);
//					parser.cp[5] = null;
					
              CUP$parser$result = new java_cup.runtime.Symbol(13/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // i_cc_conds ::= i_cc_conds bool_op cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // i_cc_conds ::= cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _where ::= Where 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _where ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comm_find_stmt_2 ::= comm_find_stmt_2 Name 
            {
              Object RESULT = null;
		
					Utility.mf("COMANDO RECURSIVO! rilevato: SENZA PARAM!"); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(8/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comm_find_stmt_2 ::= comm_find_stmt_2 Name param 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					Utility.mf("COMANDO RECURSIVO! rilevato:  CON PARAM"); 
					parser.cp[3]=p; 
					
              CUP$parser$result = new java_cup.runtime.Symbol(8/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comm_find_stmt_2 ::= commands 
            {
              Object RESULT = null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					Utility.mf("COMANDO RICORSIVO! rilevato: "+sc);
					parser.cpm[5] = new CommandParameter[]{new CommandParameter(null,sc,null)};
					
              CUP$parser$result = new java_cup.runtime.Symbol(8/*comm_find_stmt_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comm_find_stmt ::= comm_find_stmt Com_Ex comm_find_stmt_2 Pv 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comm_find_stmt ::= comm_find_stmt i_cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comm_find_stmt ::= comm_find_stmt param 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter x = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					Utility.mf("passo dentro comm_find_stmt");
					parser.add_param(x);
					
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comm_find_stmt ::= Com_Find i_cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comm_find_stmt ::= Com_Find param 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter x = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					Utility.mf("_FIND_!");
					parser.comFind = new FINDCommand(parser.getEnviroment());
/*
					parser.counter_file = 0; //posso usare una arraylist e poi convertire in array
					parser.counter_path = 0;*/

					parser.add_param(x);
					
              CUP$parser$result = new java_cup.runtime.Symbol(7/*comm_find_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LS_stmt ::= LS_stmt Obj 
            {
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					Utility.mf("LS obj!");
					parser.cp[1]=new CommandParameter(ParamType.BINARIO,o,null);
					
              CUP$parser$result = new java_cup.runtime.Symbol(32/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LS_stmt ::= LS_stmt Order 
            {
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
					Utility.mf("LS Order!");
					parser.cp[0]=new CommandParameter(ParamType.BINARIO,o,null);
					
              CUP$parser$result = new java_cup.runtime.Symbol(32/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LS_stmt ::= Com_Ls 
            {
              Object[] RESULT = null;
		 
					Utility.mf("LS!");
					parser.com = new LSCommand(parser.getEnviroment());
					
              CUP$parser$result = new java_cup.runtime.Symbol(32/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // commands ::= LS_stmt 
            {
              String RESULT = null;
		RESULT= "ls";
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // commands ::= Com_Cp 
            {
              String RESULT = null;
		 
					Utility.mf("CP!");
					RESULT= "cp";
					parser.com = new CPCommand(parser.getEnviroment());
					
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // commands ::= Com_Rm 
            {
              String RESULT = null;
		 
					Utility.mf("RM!");
					RESULT= "rm";
					parser.com = new RMCommand(parser.getEnviroment());
					
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // commands ::= Com_Mov 
            {
              String RESULT = null;
		 
					Utility.mf("MV!");
					RESULT= "mv";
					parser.com = new MVCommand(parser.getEnviroment());
					
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // commands ::= Com_MKDir 
            {
              String RESULT = null;
		 
					Utility.mf("MKDIR!");
					RESULT= "mkdir";
					parser.com = new MKDCommand(parser.getEnviroment());
					
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // commands ::= Com_Cd 
            {
              String RESULT = null;
		 
					Utility.mf("CD!");
					RESULT= "cd";
					parser.com = new CDCommand(parser.getEnviroment(),parser);
					
              CUP$parser$result = new java_cup.runtime.Symbol(22/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sh_stmt ::= sh_stmt i_cc_conds 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sh_stmt ::= sh_stmt param 
            {
              Object[] RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.cp[3]=p; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sh_stmt ::= commands i_cc_conds 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sh_stmt ::= commands param 
            {
              Object[] RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.cp[2]=p; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // param ::= Ext 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CommandParameter(ParamType.FILE,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // param ::= File 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CommandParameter(ParamType.FILE,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // param ::= Path 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CommandParameter(ParamType.PATH,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arit_arg ::= i_arg 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((myVar)x); System.out.println("i_arg"); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arit_arg ::= Var 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.extractVar(x); 
							System.out.println("Var: "+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logic_stmt ::= arit_stmt Diver arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = new myVar(myVar._bool,parser.vm.makeLODiv(x,y));
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logic_stmt ::= arit_stmt C_Ugg arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = new myVar(myVar._bool,parser.vm.makeLOUg(x,y));
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logic_stmt ::= arit_stmt Minug arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMiU(x,y));
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logic_stmt ::= arit_stmt Min arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMin(x,y));
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logic_stmt ::= arit_stmt Maggug arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMaU(x,y));
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // logic_stmt ::= arit_stmt Magg arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = new myVar(myVar._bool,parser.vm.makeLOMag(x,y));
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*logic_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arit_stmt ::= C_Not arit_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.makeSOper(((myVar)x),s); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arit_stmt ::= RO arit_stmt RC 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ((myVar)x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arit_stmt ::= arit_arg 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((myVar)x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arit_stmt ::= Minus arit_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.makeSOper(((myVar)x),s); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arit_stmt ::= arit_stmt C_Or arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_stmt ::= arit_stmt C_And arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_stmt ::= arit_stmt Minus arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_stmt ::= arit_stmt Plus arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arit_stmt ::= arit_stmt Div arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arit_stmt ::= arit_stmt Times arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_stmt ::= init_stmt assig_stmt 
            {
              ICommand RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.vm.add_var(((myVar)x)); 	
              CUP$parser$result = new java_cup.runtime.Symbol(39/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_stmt ::= Com_Str assig_stmt 
            {
              ICommand RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.vm.add_var(((myVar)x)); 	
              CUP$parser$result = new java_cup.runtime.Symbol(39/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assig_stmt ::= Var 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assig_stmt ::= Var C_Ug arit_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ((myVar)y).setName(x);
						RESULT = y; 	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_stmt ::= str_stmt if_stmt 
            {
              ICommand RESULT = null;
		 Utility.mf("raccolto IF stmt interno"); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_stmt ::= str_stmt for_stmt 
            {
              ICommand RESULT = null;
		 Utility.mf("raccolto FOR stmt interno"); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_stmt ::= for_stmt 
            {
              ICommand RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		for_command x = (for_command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
						//x.print_parameters(); nullpointerexc
						Utility.mf("raccolto FOR stmt"); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // str_stmt ::= if_stmt 
            {
              ICommand RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		if_command x = (if_command)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
						((if_command)x).print_parameters();
						Utility.mf("raccolto IF stmt"); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= EL 
            {
              ICommand RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= conf_exp EL 
            {
              ICommand RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= Com_P arit_stmt EL 
            {
              ICommand RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= throw_s EL 
            {
              ICommand RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= comm_find_stmt EL 
            {
              ICommand RESULT = null;
		
					System.out.println("raccolto sh stmt = FIND");
					parser.cpm[0] = new CommandParameter[parser.array_file.size()];
					parser.cpm[1] = new CommandParameter[parser.array_path.size()];
					parser.cpm[2] = new CommandParameter[parser.array_perm.size()];
					parser.cpm[3] = new CommandParameter[parser.array_data.size()];
					parser.cpm[4] = new CommandParameter[parser.array_dim.size()];

					System.out.println("dopo onit");
					parser.cpm[0] = parser.array_file.toArray(parser.cpm[0]);
					parser.cpm[1] = parser.array_path.toArray(parser.cpm[1]);
					parser.cpm[2] = parser.array_perm.toArray(parser.cpm[2]);
					parser.cpm[3] = parser.array_data.toArray(parser.cpm[3]);
					parser.cpm[4] = parser.array_dim.toArray(parser.cpm[4]);

					//parser.cpm[6]=new CommandParameter[7];

					System.out.println("dopo init 2'");
					for(int i=0; i<7; i++)
						if(parser.cp[i]==null)
							Utility.mf("cp niente:"+i);
						else
							Utility.mf("cp param["+i+"]: "+parser.cp[i].getValue());

					parser.cpm[6] = parser.cp;

					for(int i=0;i<7;i++){
						if(parser.cp[i]==null)
							Utility.mf("cpm niente:"+i);
						else
							Utility.mf("cpm param[6]["+i+"]: "+parser.cpm[6][i].getValue());
					}
/*
					for(int i=0; i<7; i++){
						if(parser.cpm[i]==null)
							continue;
						int len = parser.cpm[i].length;
						for(int j=0;j<len;j++){
							if(parser.cpm[i][j]==null)
								Utility.mf("param["+i+"]["+j+"]: niente");
							else
								Utility.mf("param["+i+"]["+j+"]: "+parser.cpm[i][j].getValue());
						}
					}*/
					Utility.mf("SETCOMMANDPARAMETER");
					parser.comFind.setCommandParameter(parser.cpm);
					Utility.mf("EXEC");
					parser.comFind.exec();
					parser.array_file.clear();
					parser.array_path.clear();
					parser.array_perm.clear();
					parser.array_data.clear();
					parser.array_dim.clear();
					
					Utility.mf(parser.comFind.getCommandStringResult());
					
              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= sh_stmt EL 
            {
              ICommand RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] x = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					System.out.println("raccolto sh stmt: parameter setting"); 
					/*parser.cp[0] = parser.array_file.get(0);
					parser.cp[1] = parser.array_path.get(0);
					parser.cp[2] = parser.array_perm.get(0);
					parser.cp[3] = parser.array_data.get(0);
					parser.cp[4] = parser.array_dim.get(0);*/
					for(int i=0; i<7; i++)
						if(parser.cp[i]==null)
							Utility.mf("*niente*");
						else
							Utility.mf("param["+i+"]: "+parser.cp[i].getValue());
					parser.com.setCommandParameter(parser.cp);
					parser.com.exec();
					Utility.mf(parser.com.getCommandStringResult());
					
					
              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= str_stmt EL 
            {
              ICommand RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					parser.list_script.add(s);
					Utility.mf("risolto flow control statement -> INSERITO IN LIST SCRIPT"); 
					
              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= assig_stmt EL 
            {
              ICommand RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.vm.assig(((myVar)x)); Utility.mf("ASSIST STMT");
              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= init_stmt EL 
            {
              ICommand RESULT = null;
		 parser.vm.getListVar(); Utility.mf("INIT STMT");	
              CUP$parser$result = new java_cup.runtime.Symbol(40/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // i_stmt ::= script 
            {
              LinkedList RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_stmt ::= i_stmt stmt 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // i_stmt ::= stmt 
            {
              LinkedList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ICommand s = (ICommand)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		//RE-Init
					parser.todo.add(s);
					parser.cp = new CommandParameter[7];
					parser.cpm = new CommandParameter[7][];
					parser.com = null;
					parser.comFind = null;
					
              CUP$parser$result = new java_cup.runtime.Symbol(38/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // throw_s ::= Throw_S File 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*throw_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_s ::= Start_S FileScript EL 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Utility.mf("INIZIO SCRIPT");
					parser.list_script = new LinkedList<ICommand>();
					//parser.list_script.add(s);
					
              CUP$parser$result = new java_cup.runtime.Symbol(25/*start_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= start_s i_stmt End_S FileScript EL 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList x = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					Utility.mf("CHIUDO SCRIPT");
					//salvataggio script
					
              CUP$parser$result = new java_cup.runtime.Symbol(14/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= i_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

