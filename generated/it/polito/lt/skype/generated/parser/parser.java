
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Sep 06 17:30:54 CEST 2011
//----------------------------------------------------

package it.polito.lt.skype.generated.parser;

import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Collection;
import java.util.Iterator;
import java.util.Calendar;
import it.polito.lt.skype.manager.*;
import it.polito.lt.skype.command.*;
import it.polito.lt.skype.bot.*;

/** CUP v0.10k generated parser.
  * @version Tue Sep 06 17:30:54 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\026\005\000\002\036\004\000\002\037\004" +
    "\000\002\010\003\000\002\010\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\004\004\000\002\004\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\007\005\000\002\007\003\000\002\005\004\000\002" +
    "\005\004\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\004\000\002\030\003\000\002\030\005\000" +
    "\002\030\004\000\002\032\003\000\002\032\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\045\003\000\002\045\004\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\051\003\000\002\051\004\000\002\051" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\006\000\002\020\003\000" +
    "\002\020\005\000\002\020\004\000\002\014\002\000\002" +
    "\014\003\000\002\021\003\000\002\021\005\000\002\025" +
    "\003\000\002\025\003\000\002\024\006\000\002\024\006" +
    "\000\002\024\006\000\002\024\006\000\002\024\006\000" +
    "\002\024\006\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\040\003\000\002\040\003\000\002\043\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\016\003" +
    "\000\002\016\003\000\002\042\005\000\002\041\003\000" +
    "\002\041\004\000\002\041\005\000\002\041\005\000\002" +
    "\013\007\000\002\050\007\000\002\050\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\033\010\000\002\035\003\000\002\035\003\000" +
    "\002\044\005\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\064\002\000\005\027\006\007\007\055\010" +
    "\052\011\004\012\010\016\013\021\054\022\057\023\023" +
    "\024\043\056\020\057\021\062\031\064\053\070\034\071" +
    "\041\076\036\077\005\101\024\102\037\103\032\104\011" +
    "\107\050\001\002\000\024\025\uffd4\027\uffd4\030\uffd4\035" +
    "\uffd4\036\uffd4\041\uffd4\072\261\073\uffd4\074\uffd4\001\002" +
    "\000\004\027\260\001\002\000\026\025\uffce\027\uffce\030" +
    "\uffce\031\257\035\uffce\036\uffce\040\256\041\uffce\073\uffce" +
    "\074\uffce\001\002\000\022\025\uffd0\027\uffd0\030\uffd0\035" +
    "\uffd0\036\uffd0\041\uffd0\073\uffd0\074\uffd0\001\002\000\026" +
    "\056\020\057\066\062\031\064\053\070\034\071\041\101" +
    "\024\103\032\104\011\107\050\001\002\000\050\004\uffa6" +
    "\013\uffa6\025\uffa6\027\uffa6\030\uffa6\035\uffa6\036\uffa6\041" +
    "\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6\057\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\067\uffa6\102\uffa6\001\002\000" +
    "\010\012\uffee\016\uffee\102\uffee\001\002\000\012\026\211" +
    "\057\215\103\214\104\213\001\002\000\010\012\010\016" +
    "\013\102\244\001\002\000\004\002\241\001\002\000\022" +
    "\004\232\025\105\027\111\030\107\035\uffc2\036\uffc2\041" +
    "\104\102\231\001\002\000\064\002\uffff\005\027\006\007" +
    "\007\055\010\052\011\004\012\010\016\013\021\054\022" +
    "\057\023\023\024\043\056\020\057\021\062\031\064\053" +
    "\070\034\071\041\076\036\077\005\101\024\102\037\103" +
    "\032\104\011\107\050\001\002\000\026\056\064\057\066" +
    "\062\031\064\053\070\034\071\041\101\024\103\032\104" +
    "\011\107\050\001\002\000\022\050\063\051\uffdd\052\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\102\uffea\001\002\000" +
    "\006\014\222\015\221\001\002\000\022\025\uffd1\027\uffd1" +
    "\030\uffd1\035\uffd1\036\uffd1\041\uffd1\073\uffd1\074\uffd1\001" +
    "\002\000\050\004\uffa5\013\uffa5\025\uffa5\027\uffa5\030\uffa5" +
    "\035\uffa5\036\uffa5\041\uffa5\051\uffa5\052\uffa5\054\uffa5\055" +
    "\uffa5\057\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\102\uffa5\001\002\000\004\102\220\001\002\000\016\051" +
    "\074\052\067\064\070\065\073\066\071\067\072\001\002" +
    "\000\016\025\105\027\111\030\107\035\uffc2\036\uffc2\041" +
    "\104\001\002\000\062\005\027\006\007\007\055\010\052" +
    "\011\004\012\010\016\013\021\054\022\057\023\023\024" +
    "\043\056\020\057\021\062\031\064\053\070\034\071\041" +
    "\076\036\077\005\101\024\102\037\103\032\104\011\107" +
    "\050\001\002\000\026\056\064\057\066\062\031\064\053" +
    "\070\034\071\041\101\024\103\032\104\011\107\050\001" +
    "\002\000\050\004\uffa7\013\uffa7\025\uffa7\027\uffa7\030\uffa7" +
    "\035\uffa7\036\uffa7\041\uffa7\051\uffa7\052\uffa7\054\uffa7\055" +
    "\uffa7\057\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7" +
    "\102\uffa7\001\002\000\006\057\062\102\177\001\002\000" +
    "\050\004\uffa3\013\uffa3\025\uffa3\027\uffa3\030\uffa3\035\uffa3" +
    "\036\uffa3\041\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\057" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\102\uffa3" +
    "\001\002\000\004\102\175\001\002\000\004\027\174\001" +
    "\002\000\072\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\056\ufff0\057\ufff0\062\ufff0" +
    "\064\ufff0\070\ufff0\071\ufff0\076\ufff0\077\ufff0\101\ufff0\102" +
    "\ufff0\103\ufff0\104\ufff0\107\ufff0\001\002\000\016\025\105" +
    "\027\111\030\107\035\uffc2\036\uffc2\041\104\001\002\000" +
    "\050\004\uffa4\013\uffa4\025\uffa4\027\uffa4\030\uffa4\035\uffa4" +
    "\036\uffa4\041\uffa4\051\uffa4\052\uffa4\054\uffa4\055\uffa4\057" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\102\uffa4" +
    "\001\002\000\032\013\uffdc\051\uffdc\052\uffdc\054\uffdc\055" +
    "\uffdc\057\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\102\uffdc\001\002\000\026\056\064\057\066\062\031\064" +
    "\053\070\034\071\041\101\024\103\032\104\011\107\050" +
    "\001\002\000\004\102\167\001\002\000\032\013\uffe0\051" +
    "\uffe0\052\uffe0\054\uffe0\055\uffe0\057\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\102\uffe0\001\002\000\012\013" +
    "\uff9e\054\uff9e\055\uff9e\102\uff9e\001\002\000\010\054\157" +
    "\055\160\102\162\001\002\000\050\004\uffa2\013\uffa2\025" +
    "\uffa2\027\uffa2\030\uffa2\035\uffa2\036\uffa2\041\uffa2\051\uffa2" +
    "\052\uffa2\054\uffa2\055\uffa2\057\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\067\uffa2\102\uffa2\001\002\000\010\012\uffef" +
    "\016\uffef\102\uffef\001\002\000\022\025\uffcf\027\uffcf\030" +
    "\uffcf\035\uffcf\036\uffcf\041\uffcf\073\uffcf\074\uffcf\001\002" +
    "\000\026\056\064\057\066\062\031\064\053\070\034\071" +
    "\041\101\024\103\032\104\011\107\050\001\002\000\026" +
    "\025\uffcd\027\uffcd\030\uffcd\031\uffcd\035\uffcd\036\uffcd\040" +
    "\uffcd\041\uffcd\073\uffcd\074\uffcd\001\002\000\022\025\uffd2" +
    "\027\uffd2\030\uffd2\035\uffd2\036\uffd2\041\uffd2\073\uffd2\074" +
    "\uffd2\001\002\000\020\025\105\027\111\030\107\035\uffc2" +
    "\036\uffc2\041\104\102\114\001\002\000\004\057\062\001" +
    "\002\000\072\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\056\ufffb\057\ufffb\062\ufffb" +
    "\064\ufffb\070\ufffb\071\ufffb\076\ufffb\077\ufffb\101\ufffb\102" +
    "\ufffb\103\ufffb\104\ufffb\107\ufffb\001\002\000\006\057\uffe9" +
    "\102\uffe9\001\002\000\010\050\063\057\uffea\102\uffea\001" +
    "\002\000\026\056\064\057\066\062\031\064\053\070\034" +
    "\071\041\101\024\103\032\104\011\107\050\001\002\000" +
    "\026\056\064\057\066\062\031\064\053\070\034\071\041" +
    "\101\024\103\032\104\011\107\050\001\002\000\022\051" +
    "\074\052\067\057\uffeb\064\070\065\073\066\071\067\072" +
    "\102\uffeb\001\002\000\032\013\uffdd\051\uffdd\052\uffdd\054" +
    "\uffdd\055\uffdd\057\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\102\uffdd\001\002\000\026\056\064\057\066\062" +
    "\031\064\053\070\034\071\041\101\024\103\032\104\011" +
    "\107\050\001\002\000\026\056\064\057\066\062\031\064" +
    "\053\070\034\071\041\101\024\103\032\104\011\107\050" +
    "\001\002\000\026\056\064\057\066\062\031\064\053\070" +
    "\034\071\041\101\024\103\032\104\011\107\050\001\002" +
    "\000\026\056\064\057\066\062\031\064\053\070\034\071" +
    "\041\101\024\103\032\104\011\107\050\001\002\000\026" +
    "\056\064\057\066\062\031\064\053\070\034\071\041\101" +
    "\024\103\032\104\011\107\050\001\002\000\026\056\064" +
    "\057\066\062\031\064\053\070\034\071\041\101\024\103" +
    "\032\104\011\107\050\001\002\000\032\013\uffe3\051\uffe3" +
    "\052\uffe3\054\uffe3\055\uffe3\057\uffe3\063\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\067\uffe3\102\uffe3\001\002\000\032\013\uffe5" +
    "\051\074\052\uffe5\054\uffe5\055\uffe5\057\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\071\067\072\102\uffe5\001\002\000\032" +
    "\013\uffe6\051\uffe6\052\uffe6\054\uffe6\055\uffe6\057\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\102\uffe6\001\002" +
    "\000\032\013\uffe7\051\uffe7\052\uffe7\054\uffe7\055\uffe7\057" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\102\uffe7" +
    "\001\002\000\032\013\uffe4\051\074\052\uffe4\054\uffe4\055" +
    "\uffe4\057\uffe4\063\uffe4\064\uffe4\065\uffe4\066\071\067\072" +
    "\102\uffe4\001\002\000\032\013\uffe2\051\074\052\uffe2\054" +
    "\uffe2\055\uffe2\057\uffe2\063\uffe2\064\uffe2\065\uffe2\066\071" +
    "\067\072\102\uffe2\001\002\000\032\013\uffde\051\uffde\052" +
    "\uffde\054\uffde\055\uffde\057\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\102\uffde\001\002\000\006\035\uffc1\036" +
    "\uffc1\001\002\000\026\004\uffd9\025\uffd9\027\uffd9\030\uffd9" +
    "\035\uffd9\036\uffd9\041\uffd9\073\uffd9\074\uffd9\102\uffd9\001" +
    "\002\000\020\025\uffd6\027\uffd6\030\uffd6\035\uffd6\036\uffd6" +
    "\041\uffd6\102\uffd6\001\002\000\026\004\uffdb\025\uffdb\027" +
    "\uffdb\030\uffdb\035\uffdb\036\uffdb\041\uffdb\073\uffdb\074\uffdb" +
    "\102\uffdb\001\002\000\026\004\uffbe\025\uffbe\027\uffbe\030" +
    "\uffbe\035\uffbe\036\uffbe\041\uffbe\051\uffbe\052\uffbe\102\uffbe" +
    "\001\002\000\026\004\uffda\025\uffda\027\uffda\030\uffda\035" +
    "\uffda\036\uffda\041\uffda\073\uffda\074\uffda\102\uffda\001\002" +
    "\000\026\004\uffc0\025\uffc0\027\uffc0\030\uffc0\035\uffc0\036" +
    "\uffc0\041\uffc0\051\uffc0\052\uffc0\102\uffc0\001\002\000\006" +
    "\035\124\036\123\001\002\000\072\002\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\056" +
    "\ufff6\057\ufff6\062\ufff6\064\ufff6\070\ufff6\071\ufff6\076\ufff6" +
    "\077\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\107\ufff6\001" +
    "\002\000\024\025\uffd5\027\uffd5\030\uffd5\035\uffd5\036\uffd5" +
    "\041\uffd5\051\121\052\117\102\uffd5\001\002\000\026\004" +
    "\uffbd\025\uffbd\027\uffbd\030\uffbd\035\uffbd\036\uffbd\041\uffbd" +
    "\051\uffbd\052\uffbd\102\uffbd\001\002\000\010\035\uffa9\036" +
    "\uffa9\041\uffa9\001\002\000\010\035\uffc2\036\uffc2\041\104" +
    "\001\002\000\010\035\uffaa\036\uffaa\041\uffaa\001\002\000" +
    "\026\004\uffbf\025\uffbf\027\uffbf\030\uffbf\035\uffbf\036\uffbf" +
    "\041\uffbf\051\uffbf\052\uffbf\102\uffbf\001\002\000\016\043" +
    "\142\044\143\045\144\046\146\047\147\050\145\001\002" +
    "\000\016\043\126\044\125\045\127\046\131\047\132\050" +
    "\130\001\002\000\004\032\134\001\002\000\004\032\134" +
    "\001\002\000\004\032\134\001\002\000\004\032\134\001" +
    "\002\000\004\032\134\001\002\000\004\032\134\001\002" +
    "\000\026\004\uffac\025\uffac\027\uffac\030\uffac\035\uffac\036" +
    "\uffac\041\uffac\051\uffac\052\uffac\102\uffac\001\002\000\026" +
    "\004\uffa8\025\uffa8\027\uffa8\030\uffa8\035\uffa8\036\uffa8\041" +
    "\uffa8\051\uffa8\052\uffa8\102\uffa8\001\002\000\026\004\uffad" +
    "\025\uffad\027\uffad\030\uffad\035\uffad\036\uffad\041\uffad\051" +
    "\uffad\052\uffad\102\uffad\001\002\000\026\004\uffab\025\uffab" +
    "\027\uffab\030\uffab\035\uffab\036\uffab\041\uffab\051\uffab\052" +
    "\uffab\102\uffab\001\002\000\026\004\uffae\025\uffae\027\uffae" +
    "\030\uffae\035\uffae\036\uffae\041\uffae\051\uffae\052\uffae\102" +
    "\uffae\001\002\000\026\004\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\035\uffb0\036\uffb0\041\uffb0\051\uffb0\052\uffb0\102\uffb0\001" +
    "\002\000\026\004\uffaf\025\uffaf\027\uffaf\030\uffaf\035\uffaf" +
    "\036\uffaf\041\uffaf\051\uffaf\052\uffaf\102\uffaf\001\002\000" +
    "\016\070\034\071\041\101\024\103\032\104\011\107\050" +
    "\001\002\000\016\070\034\071\041\101\024\103\032\104" +
    "\011\107\050\001\002\000\016\070\034\071\041\101\024" +
    "\103\032\104\011\107\050\001\002\000\016\070\034\071" +
    "\041\101\024\103\032\104\011\107\050\001\002\000\016" +
    "\070\034\071\041\101\024\103\032\104\011\107\050\001" +
    "\002\000\016\070\034\071\041\101\024\103\032\104\011" +
    "\107\050\001\002\000\026\004\uffb2\025\uffb2\027\uffb2\030" +
    "\uffb2\035\uffb2\036\uffb2\041\uffb2\051\uffb2\052\uffb2\102\uffb2" +
    "\001\002\000\026\004\uffb3\025\uffb3\027\uffb3\030\uffb3\035" +
    "\uffb3\036\uffb3\041\uffb3\051\uffb3\052\uffb3\102\uffb3\001\002" +
    "\000\026\004\uffb1\025\uffb1\027\uffb1\030\uffb1\035\uffb1\036" +
    "\uffb1\041\uffb1\051\uffb1\052\uffb1\102\uffb1\001\002\000\026" +
    "\004\uffb4\025\uffb4\027\uffb4\030\uffb4\035\uffb4\036\uffb4\041" +
    "\uffb4\051\uffb4\052\uffb4\102\uffb4\001\002\000\026\004\uffb5" +
    "\025\uffb5\027\uffb5\030\uffb5\035\uffb5\036\uffb5\041\uffb5\051" +
    "\uffb5\052\uffb5\102\uffb5\001\002\000\026\004\uffb6\025\uffb6" +
    "\027\uffb6\030\uffb6\035\uffb6\036\uffb6\041\uffb6\051\uffb6\052" +
    "\uffb6\102\uffb6\001\002\000\032\013\uffe1\051\074\052\uffe1" +
    "\054\uffe1\055\uffe1\057\uffe1\063\uffe1\064\uffe1\065\uffe1\066" +
    "\071\067\072\102\uffe1\001\002\000\026\056\uffa0\057\uffa0" +
    "\062\uffa0\064\uffa0\070\uffa0\071\uffa0\101\uffa0\103\uffa0\104" +
    "\uffa0\107\uffa0\001\002\000\026\056\uffa1\057\uffa1\062\uffa1" +
    "\064\uffa1\070\uffa1\071\uffa1\101\uffa1\103\uffa1\104\uffa1\107" +
    "\uffa1\001\002\000\026\056\064\057\066\062\031\064\053" +
    "\070\034\071\041\101\024\103\032\104\011\107\050\001" +
    "\002\000\072\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\056\ufff1\057\ufff1\062\ufff1" +
    "\064\ufff1\070\ufff1\071\ufff1\076\ufff1\077\ufff1\101\ufff1\102" +
    "\ufff1\103\ufff1\104\ufff1\107\ufff1\001\002\000\012\013\uff9c" +
    "\054\uff9c\055\uff9c\102\uff9c\001\002\000\026\013\uff9b\051" +
    "\074\052\067\054\uff9b\055\uff9b\064\070\065\073\066\071" +
    "\067\072\102\uff9b\001\002\000\026\056\064\057\066\062" +
    "\031\064\053\070\034\071\041\101\024\103\032\104\011" +
    "\107\050\001\002\000\026\013\uff9f\051\074\052\067\054" +
    "\uff9f\055\uff9f\064\070\065\073\066\071\067\072\102\uff9f" +
    "\001\002\000\072\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\056\ufff4\057\ufff4\062" +
    "\ufff4\064\ufff4\070\ufff4\071\ufff4\076\ufff4\077\ufff4\101\ufff4" +
    "\102\ufff4\103\ufff4\104\ufff4\107\ufff4\001\002\000\020\051" +
    "\074\052\067\064\070\065\073\066\071\067\072\102\171" +
    "\001\002\000\072\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\056\ufff2\057\ufff2\062" +
    "\ufff2\064\ufff2\070\ufff2\071\ufff2\076\ufff2\077\ufff2\101\ufff2" +
    "\102\ufff2\103\ufff2\104\ufff2\107\ufff2\001\002\000\020\025" +
    "\uffd8\027\uffd8\030\uffd8\035\uffd8\036\uffd8\041\uffd8\102\uffd8" +
    "\001\002\000\024\025\uffd7\027\uffd7\030\uffd7\035\uffd7\036" +
    "\uffd7\041\uffd7\051\121\052\117\102\uffd7\001\002\000\004" +
    "\102\ufffc\001\002\000\072\002\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\056\ufff8\057" +
    "\ufff8\062\ufff8\064\ufff8\070\ufff8\071\ufff8\076\ufff8\077\ufff8" +
    "\101\ufff8\102\ufff8\103\ufff8\104\ufff8\107\ufff8\001\002\000" +
    "\006\057\uffe8\102\uffe8\001\002\000\072\002\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\056\ufff9\057\ufff9\062\ufff9\064\ufff9\070\ufff9\071\ufff9\076" +
    "\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\107\ufff9" +
    "\001\002\000\020\051\074\052\067\063\201\064\070\065" +
    "\073\066\071\067\072\001\002\000\032\013\uffdf\051\uffdf" +
    "\052\uffdf\054\uffdf\055\uffdf\057\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\102\uffdf\001\002\000\064\005\027" +
    "\006\007\007\055\010\052\011\004\012\010\016\013\017" +
    "\204\021\054\022\057\023\023\024\043\056\020\057\021" +
    "\062\031\064\053\070\034\071\041\076\036\077\005\101" +
    "\024\102\037\103\032\104\011\107\050\001\002\000\010" +
    "\012\uff8f\016\uff8f\102\uff8f\001\002\000\006\064\206\065" +
    "\210\001\002\000\072\002\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\056\ufffa\057\ufffa" +
    "\062\ufffa\064\ufffa\070\ufffa\071\ufffa\076\ufffa\077\ufffa\101" +
    "\ufffa\102\ufffa\103\ufffa\104\ufffa\107\ufffa\001\002\000\012" +
    "\026\uff91\057\uff91\103\uff91\104\uff91\001\002\000\012\026" +
    "\211\057\215\103\214\104\213\001\002\000\012\026\uff92" +
    "\057\uff92\103\uff92\104\uff92\001\002\000\022\012\uff94\016" +
    "\uff94\020\uff94\026\uff94\057\uff94\102\uff94\103\uff94\104\uff94" +
    "\001\002\000\010\012\uff90\016\uff90\102\uff90\001\002\000" +
    "\022\012\uff95\016\uff95\020\uff95\026\uff95\057\uff95\102\uff95" +
    "\103\uff95\104\uff95\001\002\000\022\012\uff96\016\uff96\020" +
    "\uff96\026\uff96\057\uff96\102\uff96\103\uff96\104\uff96\001\002" +
    "\000\022\012\uff97\016\uff97\020\uff97\026\uff97\057\uff97\102" +
    "\uff97\103\uff97\104\uff97\001\002\000\022\004\uffca\025\uffca" +
    "\027\uffca\030\uffca\035\uffca\036\uffca\041\uffca\102\uffca\001" +
    "\002\000\026\004\uffc9\025\uffc9\027\uffc9\030\uffc9\035\uffc9" +
    "\036\uffc9\041\uffc9\051\121\052\117\102\uffc9\001\002\000" +
    "\072\002\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\056\ufff3\057\ufff3\062\ufff3\064\ufff3" +
    "\070\ufff3\071\ufff3\076\ufff3\077\ufff3\101\ufff3\102\ufff3\103" +
    "\ufff3\104\ufff3\107\ufff3\001\002\000\010\012\uff98\016\uff98" +
    "\102\uff98\001\002\000\004\102\223\001\002\000\062\005" +
    "\027\006\007\007\055\010\052\011\004\012\010\016\013" +
    "\021\054\022\057\023\023\024\043\056\020\057\021\062" +
    "\031\064\053\070\034\071\041\076\036\077\005\101\024" +
    "\102\037\103\032\104\011\107\050\001\002\000\064\005" +
    "\027\006\007\007\055\010\052\011\004\012\010\015\225" +
    "\016\013\021\054\022\057\023\023\024\043\056\020\057" +
    "\021\062\031\064\053\070\034\071\041\076\036\077\005" +
    "\101\024\102\037\103\032\104\011\107\050\001\002\000" +
    "\010\012\uff99\016\uff99\102\uff99\001\002\000\012\013\uff9d" +
    "\054\uff9d\055\uff9d\102\uff9d\001\002\000\016\051\uffde\052" +
    "\uffde\064\uffde\065\uffde\066\uffde\067\uffde\001\002\000\022" +
    "\004\uffc8\025\uffc8\027\uffc8\030\uffc8\035\uffc8\036\uffc8\041" +
    "\uffc8\102\uffc8\001\002\000\072\002\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\056\ufff5" +
    "\057\ufff5\062\ufff5\064\ufff5\070\ufff5\071\ufff5\076\ufff5\077" +
    "\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\107\ufff5\001\002" +
    "\000\016\006\007\007\055\010\052\011\004\021\054\023" +
    "\023\001\002\000\026\004\uffc7\025\uffc7\027\uffc7\030\uffc7" +
    "\035\uffc7\036\uffc7\041\uffc7\051\121\052\117\102\uffc7\001" +
    "\002\000\006\073\uffc5\074\uffc5\001\002\000\006\073\237" +
    "\074\236\001\002\000\014\025\105\027\111\030\107\073" +
    "\uffc3\074\uffc3\001\002\000\022\004\uffc6\025\uffc6\027\uffc6" +
    "\030\uffc6\035\uffc6\036\uffc6\041\uffc6\102\uffc6\001\002\000" +
    "\006\073\uffc4\074\uffc4\001\002\000\004\002\001\001\002" +
    "\000\010\012\uffec\016\uffec\102\uffec\001\002\000\010\012" +
    "\uffed\016\uffed\102\uffed\001\002\000\072\002\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\056\ufff7\057\ufff7\062\ufff7\064\ufff7\070\ufff7\071\ufff7\076" +
    "\ufff7\077\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\107\ufff7" +
    "\001\002\000\012\026\211\057\215\103\214\104\213\001" +
    "\002\000\012\026\211\057\215\103\214\104\213\001\002" +
    "\000\004\020\250\001\002\000\004\102\251\001\002\000" +
    "\062\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93" +
    "\016\uff93\021\uff93\022\uff93\023\uff93\024\uff93\056\uff93\057" +
    "\uff93\062\uff93\064\uff93\070\uff93\071\uff93\076\uff93\077\uff93" +
    "\101\uff93\102\uff93\103\uff93\104\uff93\107\uff93\001\002\000" +
    "\010\013\253\054\157\055\160\001\002\000\004\102\254" +
    "\001\002\000\062\005\027\006\007\007\055\010\052\011" +
    "\004\012\010\016\013\021\054\022\057\023\023\024\043" +
    "\056\020\057\021\062\031\064\053\070\034\071\041\076" +
    "\036\077\005\101\024\102\037\103\032\104\011\107\050" +
    "\001\002\000\066\005\027\006\007\007\055\010\052\011" +
    "\004\012\010\014\uff9a\015\uff9a\016\013\021\054\022\057" +
    "\023\023\024\043\056\020\057\021\062\031\064\053\070" +
    "\034\071\041\076\036\077\005\101\024\102\037\103\032" +
    "\104\011\107\050\001\002\000\026\025\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb\073\uffcb" +
    "\074\uffcb\001\002\000\026\025\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\073\uffcc\074\uffcc" +
    "\001\002\000\004\102\ufffd\001\002\000\022\025\uffd3\027" +
    "\uffd3\030\uffd3\035\uffd3\036\uffd3\041\uffd3\073\uffd3\074\uffd3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\054\003\014\004\057\005\032\006\013\007" +
    "\034\010\016\013\021\017\015\027\041\030\025\032\044" +
    "\033\027\036\043\037\024\041\046\042\045\045\037\046" +
    "\055\047\011\050\050\051\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\027\041\030\025\032\044\041\251\042\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\244\001" +
    "\001\000\012\013\021\033\027\047\242\050\241\001\001" +
    "\000\002\001\001\000\016\014\112\021\232\022\115\023" +
    "\107\025\111\052\227\001\001\000\050\004\204\005\032" +
    "\006\013\007\034\013\021\017\015\027\041\030\025\032" +
    "\044\033\027\036\043\037\024\041\046\042\045\045\037" +
    "\046\055\047\011\050\050\051\005\001\001\000\012\027" +
    "\041\030\226\032\044\042\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\164\001\001\000\016\014\112" +
    "\021\216\022\115\023\107\025\111\052\215\001\001\000" +
    "\052\004\057\005\032\006\013\007\034\010\201\013\021" +
    "\017\015\027\041\030\025\032\044\033\027\036\043\037" +
    "\024\041\046\042\045\045\037\046\055\047\011\050\050" +
    "\051\005\001\001\000\010\027\041\030\177\032\044\001" +
    "\001\000\002\001\001\000\004\007\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\112\021\172\022\115\023\107\025\111" +
    "\052\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\041\030\167\032\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\041\030\155\032\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\112\021\114\022\115" +
    "\023\107\025\111\052\105\001\001\000\004\007\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\041\030\064\032\044\001\001\000\010\027" +
    "\041\030\102\032\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\041\030\101\032\044\001\001\000" +
    "\010\027\041\030\100\032\044\001\001\000\010\027\041" +
    "\030\077\032\044\001\001\000\010\027\041\030\076\032" +
    "\044\001\001\000\010\027\041\030\075\032\044\001\001" +
    "\000\010\027\041\030\074\032\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\112\022\115\023\107\025\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\140\001\001\000\004\043\137\001\001\000\004" +
    "\043\136\001\001\000\004\043\135\001\001\000\004\043" +
    "\134\001\001\000\004\043\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\154\001\001\000\004\027\153\001\001\000\004\027" +
    "\152\001\001\000\004\027\151\001\001\000\004\027\150" +
    "\001\001\000\004\027\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\041\030\163\032\044" +
    "\042\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\164\001\001\000\010\027\041\030\165\032\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\004\204\005\032\006\013\007\034\013\021\017" +
    "\015\027\041\030\025\032\044\033\027\036\043\037\024" +
    "\041\046\042\045\044\202\045\037\046\055\047\011\050" +
    "\050\051\005\001\001\000\002\001\001\000\004\035\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\004" +
    "\057\005\032\006\013\007\034\010\223\013\021\017\015" +
    "\027\041\030\025\032\044\033\027\036\043\037\024\041" +
    "\046\042\045\045\037\046\055\047\011\050\050\051\005" +
    "\001\001\000\050\004\204\005\032\006\013\007\034\013" +
    "\021\017\015\027\041\030\025\032\044\033\027\036\043" +
    "\037\024\041\046\042\045\045\037\046\055\047\011\050" +
    "\050\051\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\234\045\233\051\005\001\001\000\004" +
    "\040\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\245\001\001\000\004\031\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\160\001\001\000\002\001\001\000\052" +
    "\004\057\005\032\006\013\007\034\010\254\013\021\017" +
    "\015\027\041\030\025\032\044\033\027\036\043\037\024" +
    "\041\046\042\045\045\037\046\055\047\011\050\050\051" +
    "\005\001\001\000\050\004\204\005\032\006\013\007\034" +
    "\013\021\017\015\027\041\030\025\032\044\033\027\036" +
    "\043\037\024\041\046\042\045\045\037\046\055\047\011" +
    "\050\050\051\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	vm = new VarManager();
	cp = new CommandParameter[6];
	com =null;


    }


	public VarManager vm;
	public CommandParameter[] cp, datap, permp, dimp ;
	public CommandParameter[][] cpm;
	public ICommand com;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_stmt ::= for_head i_stmt for_tail 
            {
              Object[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar[] x = (myVar[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[] y = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println("for cycle");
			RESULT= new Object[5];
			RESULT[0] = (myVar)x[0];
			RESULT[1] = (myVar)x[1];
			RESULT[2] = (myVar)x[2];			
			RESULT[3] = parser.vm.extractVar(y[1].toString());  
			RESULT[4] = (String)y[0];					
              CUP$parser$result = new java_cup.runtime.Symbol(37/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_tail ::= Com_For_e i_Op_ps for_arg 
            {
              String[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	//passiamo un vettore di 2 elementi stringe contenenti l'operatore e il fattore
			System.out.println("dentro for tail");
			RESULT= new String[2];
			RESULT[0]= (String)x.toString();
			RESULT[1]= ((myVar)y).getName();
			System.out.println(" valore: "+y.toString());
			System.out.println("operatore: "+x.toString()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(34/*for_tail*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // i_Op_ps ::= Minus 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(27/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // i_Op_ps ::= Plus 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(27/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // for_head ::= Com_For for_arg for_arg for_arg Com_For_m EL 
            {
              myVar[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar z = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("for_head variabili \n"+x.toString()+"\n"+y.toString()+"\n"+z.toString());
		// passiamo un vettore contenente le tre variabili sulle quali controllare il ciclo for
			RESULT= new myVar[3];
			RESULT[0]= x;
			RESULT[1]= y;
			RESULT[2]= z;							
              CUP$parser$result = new java_cup.runtime.Symbol(25/*for_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_arg ::= ID 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for_arg ::= Vint 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(23/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_arg ::= Int 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(23/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_arg ::= Var 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(x); 				
              CUP$parser$result = new java_cup.runtime.Symbol(23/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_stmt ::= if_head Com_If_e 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_stmt ::= if_head Com_If_m EL i_stmt Com_If_e 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_head ::= Com_If conf_exp Com_If_2 EL i_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*if_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conf_exp ::= conf_exp cond_if arit_stmt 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // conf_exp ::= conf_exp cond_if conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // conf_exp ::= C_Not conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // conf_exp ::= conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // conf ::= arit_stmt cond arit_stmt 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*conf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cond_if ::= C_Andd 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cond_if ::= C_Orr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // i_arg ::= Bool 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._bool, new Boolean(x)); 		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // i_arg ::= FUnit 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // i_arg ::= IUnit 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // i_arg ::= Str 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("str: "+x); 
					RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // i_arg ::= Vint 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // i_arg ::= Int 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // date_arg ::= Data 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x;			
              CUP$parser$result = new java_cup.runtime.Symbol(33/*date_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bool_op ::= C_Or 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =x; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bool_op ::= C_And 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =x; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cc_date_cond ::= _where Date_Criteria C_Ug date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Date Criteria UG raccolto");
									parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.UG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cc_date_cond ::= _where Date_Criteria Diver date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Date Criteria DIV raccolto");
									parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.DIV);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cc_date_cond ::= _where Date_Criteria Maggug date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Date Criteria MAGUG raccolto");
									parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAGUG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cc_date_cond ::= _where Date_Criteria Minug date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Date Criteria MINUG raccolto");
									parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MINUG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cc_date_cond ::= _where Date_Criteria Magg date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Date Criteria MAG raccolto");
									parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MAG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cc_date_cond ::= _where Date_Criteria Min date_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Date Criteria MIN raccolto");
									parser.cp[4]=new CommandParameter(ParamType.DATA,a,SignType.MIN);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_date_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cc_permission_cond ::= _where Permission_Criteria C_Ug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Dimension Criteria raccolto");
									parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.toString(),SignType.UG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cc_permission_cond ::= _where Permission_Criteria Diver i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Dimension Criteria raccolto");
									parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.toString(),SignType.DIV);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cc_permission_cond ::= _where Permission_Criteria Maggug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Dimension Criteria raccolto");
									parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.toString(),SignType.MAGUG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cc_permission_cond ::= _where Permission_Criteria Minug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Dimension Criteria raccolto");
									parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.toString(),SignType.MINUG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cc_permission_cond ::= _where Permission_Criteria Magg i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Dimension Criteria raccolto");
									parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.toString(),SignType.MAG);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cc_permission_cond ::= _where Permission_Criteria Min i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
									Utility.mf("Dimension Criteria raccolto");
									parser.cp[5]=new CommandParameter(ParamType.PERMESSI,a.toString(),SignType.MIN);					
								
              CUP$parser$result = new java_cup.runtime.Symbol(17/*cc_permission_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cc_dimension_cond ::= _where Dimension_Criteria C_Ug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cc_dimension_cond ::= _where Dimension_Criteria Diver i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cc_dimension_cond ::= _where Dimension_Criteria Maggug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cc_dimension_cond ::= _where Dimension_Criteria Minug i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cc_dimension_cond ::= _where Dimension_Criteria Magg i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cc_dimension_cond ::= _where Dimension_Criteria Min i_arg 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar a = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cc_dimension_cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cc_conds ::= cc_date_cond 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cc_conds ::= cc_permission_cond 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // i_cc_conds ::= i_cc_conds bool_op cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // i_cc_conds ::= cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _where ::= Where 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _where ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comm_find_2 ::= comm_find_2 Name 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comm_find_2 ::= comm_find_2 Name param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comm_find_2 ::= commands 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comm_find ::= comm_find Com_Ex comm_find_2 Pv 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comm_find ::= comm_find i_cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comm_find ::= comm_find param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comm_find ::= Com_Find i_cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comm_find ::= Com_Find param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LS_stmt ::= LS_stmt Obj 
            {
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
						Utility.mf("LS obj!");
						parser.cp[1]=new CommandParameter(ParamType.BINARIO,o,null);					
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(39/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LS_stmt ::= LS_stmt Order 
            {
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
						Utility.mf("LS Order!");
						parser.cp[0]=new CommandParameter(ParamType.BINARIO,o,null);					
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(39/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LS_stmt ::= Com_Ls 
            {
              Object[] RESULT = null;
		 
						Utility.mf("LS!");
						
						parser.com = new LSCommand("/home/robizz/lt");
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(39/*LS_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // commands ::= LS_stmt 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // commands ::= Com_Cp 
            {
              Object[] RESULT = null;
		 
						Utility.mf("CP!");
						
						parser.com = new CPCommand("/home/robizz/lt");
								
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // commands ::= Com_Rm 
            {
              Object[] RESULT = null;
		 
						Utility.mf("RM!");
						
						parser.com = new RMCommand("/home/robizz/lt");
							
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // commands ::= Com_Mov 
            {
              Object[] RESULT = null;
		 
						Utility.mf("MV!");
						parser.com = new MVCommand("/home/robizz/lt");		
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // commands ::= Com_MKDir 
            {
              Object[] RESULT = null;
		 
						Utility.mf("MKDIR!");
						
						parser.com = new MKDCommand("/home/robizz/lt");
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(35/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // commands ::= Com_Cd Minor 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // commands ::= Com_Cd 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sh_stmt ::= sh_stmt i_cc_conds 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sh_stmt ::= sh_stmt param 
            {
              Object[] RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.cp[3]=p; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sh_stmt ::= commands i_cc_conds 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sh_stmt ::= commands param 
            {
              Object[] RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] c = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CommandParameter p = (CommandParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.cp[2]=p; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= Ext 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CommandParameter(ParamType.FILE,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= File 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CommandParameter(ParamType.FILE,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= Path 
            {
              CommandParameter RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new CommandParameter(ParamType.FILE,x,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arit_arg ::= i_arg 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((myVar)x); System.out.println("i_arg"); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arit_arg ::= Var 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.extractVar(x); 
							System.out.println("Var: "+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arit_stmt ::= C_Not arit_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.makeSOper(((myVar)x),s); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arit_stmt ::= RO arit_stmt RC 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ((myVar)x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arit_stmt ::= arit_arg 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((myVar)x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arit_stmt ::= Minus arit_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.makeSOper(((myVar)x),s); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arit_stmt ::= arit_stmt C_Or arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_stmt ::= arit_stmt C_And arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_stmt ::= arit_stmt Minus arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_stmt ::= arit_stmt Plus arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arit_stmt ::= arit_stmt Div arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arit_stmt ::= arit_stmt Times arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_stmt ::= init_stmt assig_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.vm.add_var(((myVar)x)); 	
              CUP$parser$result = new java_cup.runtime.Symbol(3/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_stmt ::= Com_Str assig_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.vm.add_var(((myVar)x)); 	
              CUP$parser$result = new java_cup.runtime.Symbol(3/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assig_stmt ::= Var 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assig_stmt ::= Var C_Ug arit_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ((myVar)y).setName(x); RESULT = y; 	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_stmt ::= str_stmt if_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_stmt ::= str_stmt for_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_stmt ::= for_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // str_stmt ::= if_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= conf_exp EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= Com_P arit_stmt EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= throw_s EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= start_s EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= comm_find EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= sh_stmt EL 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] x = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						System.out.println("raccolto sh stmt"); 
						/*((ICommand)(((Object[])x)[0])).setCommandParamter(((CommandParameter)((Object[])x)[1]))); 
						((ICommand)(((Object[])x)[0])).exec(); 
						System.out.println(((ICommand)((Object[])x)[0])).getCommandStringResult());
						Object[] o = (Object[])x; */
						for(int i=0; i<6; i++)
							if(parser.cp[i]==null)
								Utility.mf("niente\n");
							else
								Utility.mf("param["+i+"]: "+parser.cp[i].getValue()+"\n");
						parser.com.setCommandParameter(parser.cp);
						parser.com.exec();
						Utility.mf(parser.com.getCommandStringResult());
					
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= str_stmt EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= assig_stmt EL 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.vm.assig(((myVar)x)); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= init_stmt EL 
            {
              Object RESULT = null;
		 parser.vm.getListVar(); 	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_stmt ::= i_stmt stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // i_stmt ::= stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // throw_s ::= Throw_S File 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*throw_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_s ::= Start_S File 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*start_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= start_s i_stmt End_S 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= i_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

