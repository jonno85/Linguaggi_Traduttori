
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Sep 05 16:22:57 CEST 2011
//----------------------------------------------------

package it.polito.lt.skype.generated.parser;

import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Collection;
import java.util.Iterator;
import java.util.Calendar;
import it.polito.lt.skype.manager.*;
import it.polito.lt.skype.command.*;
import it.polito.lt.skype.bot.*;

/** CUP v0.10k generated parser.
  * @version Mon Sep 05 16:22:57 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\023\005\000\002\035\004\000\002\036\004" +
    "\000\002\010\003\000\002\010\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\004\004\000\002\004\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\007\005\000\002\007\003\000\002\005\004\000\002" +
    "\005\004\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\003\000\002\025\005\000" +
    "\002\025\004\000\002\027\003\000\002\027\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\045\004\000\002\045\004\000\002\045\004" +
    "\000\002\045\004\000\002\045\003\000\002\044\003\000" +
    "\002\044\004\000\002\044\003\000\002\044\004\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\006\000\002\020\003\000\002\020\003\000" +
    "\002\020\005\000\002\020\004\000\002\014\002\000\002" +
    "\014\003\000\002\021\003\000\002\021\005\000\002\022" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\037\003\000\002\037\003\000\002\043\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\016" +
    "\003\000\002\016\003\000\002\041\005\000\002\040\003" +
    "\000\002\040\004\000\002\040\005\000\002\040\005\000" +
    "\002\013\007\000\002\047\007\000\002\047\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\030\010\000\002\032\003\000\002\032\003" +
    "\000\002\042\005\000\002\046\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\062\002\000\005\026\006\006\007\051\010" +
    "\005\011\010\015\012\020\054\021\056\022\022\023\042" +
    "\046\017\047\020\052\030\054\053\060\033\061\040\066" +
    "\035\067\004\071\023\072\036\073\031\074\007\077\052" +
    "\001\002\000\004\026\234\001\002\000\026\024\uffd2\026" +
    "\uffd2\027\uffd2\033\uffd2\034\uffd2\035\uffd2\062\233\063\uffd2" +
    "\064\uffd2\072\uffd2\001\002\000\022\024\uffcd\026\uffcd\027" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\063\uffcd\064\uffcd\001\002" +
    "\000\052\004\uffb6\012\uffb6\024\uffb6\026\uffb6\027\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\037\uffb6\041\uffb6\042\uffb6\044\uffb6" +
    "\045\uffb6\047\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\072\uffb6\001\002\000\026\046\017\047\065\052\030" +
    "\054\053\060\033\061\040\071\023\073\031\074\007\077" +
    "\052\001\002\000\010\011\uffee\015\uffee\072\uffee\001\002" +
    "\000\012\025\165\047\171\073\170\074\167\001\002\000" +
    "\010\011\010\015\012\072\221\001\002\000\004\002\216" +
    "\001\002\000\022\004\206\024\104\026\112\027\106\033" +
    "\uffc2\034\107\035\103\072\205\001\002\000\062\002\uffff" +
    "\005\026\006\006\007\051\010\005\011\010\015\012\020" +
    "\054\021\056\022\022\023\042\046\017\047\020\052\030" +
    "\054\053\060\033\061\040\066\035\067\004\071\023\072" +
    "\036\073\031\074\007\077\052\001\002\000\026\046\063" +
    "\047\065\052\030\054\053\060\033\061\040\071\023\073" +
    "\031\074\007\077\052\001\002\000\024\037\uffdd\040\062" +
    "\041\uffdd\042\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\072" +
    "\uffea\001\002\000\006\013\176\014\175\001\002\000\022" +
    "\024\uffce\026\uffce\027\uffce\033\uffce\034\uffce\035\uffce\063" +
    "\uffce\064\uffce\001\002\000\052\004\uffb5\012\uffb5\024\uffb5" +
    "\026\uffb5\027\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5\041" +
    "\uffb5\042\uffb5\044\uffb5\045\uffb5\047\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\072\uffb5\001\002\000\004\072" +
    "\174\001\002\000\020\037\141\041\073\042\066\054\067" +
    "\055\072\056\070\057\071\001\002\000\016\024\104\026" +
    "\112\027\106\033\uffc2\034\107\035\103\001\002\000\060" +
    "\005\026\006\006\007\051\010\005\011\010\015\012\020" +
    "\054\021\056\022\022\023\042\046\017\047\020\052\030" +
    "\054\053\060\033\061\040\066\035\067\004\071\023\072" +
    "\036\073\031\074\007\077\052\001\002\000\026\046\063" +
    "\047\065\052\030\054\053\060\033\061\040\071\023\073" +
    "\031\074\007\077\052\001\002\000\052\004\uffb7\012\uffb7" +
    "\024\uffb7\026\uffb7\027\uffb7\033\uffb7\034\uffb7\035\uffb7\037" +
    "\uffb7\041\uffb7\042\uffb7\044\uffb7\045\uffb7\047\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\072\uffb7\001\002\000" +
    "\006\047\061\072\153\001\002\000\052\004\uffb3\012\uffb3" +
    "\024\uffb3\026\uffb3\027\uffb3\033\uffb3\034\uffb3\035\uffb3\037" +
    "\uffb3\041\uffb3\042\uffb3\044\uffb3\045\uffb3\047\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\057\uffb3\072\uffb3\001\002\000" +
    "\004\072\151\001\002\000\004\026\150\001\002\000\070" +
    "\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\046\ufff0\047\ufff0\052\ufff0\054\ufff0\060\ufff0\061" +
    "\ufff0\066\ufff0\067\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\077\ufff0\001\002\000\016\024\104\026\112\027\106\033" +
    "\uffc2\034\107\035\103\001\002\000\052\004\uffb4\012\uffb4" +
    "\024\uffb4\026\uffb4\027\uffb4\033\uffb4\034\uffb4\035\uffb4\037" +
    "\uffb4\041\uffb4\042\uffb4\044\uffb4\045\uffb4\047\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\072\uffb4\001\002\000" +
    "\034\012\uffdc\037\uffdc\041\uffdc\042\uffdc\044\uffdc\045\uffdc" +
    "\047\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\072" +
    "\uffdc\001\002\000\026\046\063\047\065\052\030\054\053" +
    "\060\033\061\040\071\023\073\031\074\007\077\052\001" +
    "\002\000\004\072\143\001\002\000\034\012\uffe0\037\uffe0" +
    "\041\uffe0\042\uffe0\044\uffe0\045\uffe0\047\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\072\uffe0\001\002\000\012" +
    "\012\uffae\044\uffae\045\uffae\072\uffae\001\002\000\010\044" +
    "\133\045\134\072\136\001\002\000\020\024\uffd3\026\uffd3" +
    "\027\uffd3\033\uffd3\034\uffd3\035\uffd3\072\uffd3\001\002\000" +
    "\010\011\uffef\015\uffef\072\uffef\001\002\000\022\024\uffcc" +
    "\026\uffcc\027\uffcc\033\uffcc\034\uffcc\035\uffcc\063\uffcc\064" +
    "\uffcc\001\002\000\052\004\uffb2\012\uffb2\024\uffb2\026\uffb2" +
    "\027\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\041\uffb2\042" +
    "\uffb2\044\uffb2\045\uffb2\047\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\072\uffb2\001\002\000\026\046\063\047" +
    "\065\052\030\054\053\060\033\061\040\071\023\073\031" +
    "\074\007\077\052\001\002\000\026\024\uffd0\026\uffd0\027" +
    "\uffd0\030\131\033\uffd0\034\uffd0\035\uffd0\063\uffd0\064\uffd0" +
    "\072\uffd0\001\002\000\020\024\104\026\112\027\106\033" +
    "\uffc2\034\107\035\103\072\113\001\002\000\004\047\061" +
    "\001\002\000\070\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\046\ufffb\047\ufffb\052\ufffb\054" +
    "\ufffb\060\ufffb\061\ufffb\066\ufffb\067\ufffb\071\ufffb\072\ufffb" +
    "\073\ufffb\074\ufffb\077\ufffb\001\002\000\006\047\uffe9\072" +
    "\uffe9\001\002\000\010\040\062\047\uffea\072\uffea\001\002" +
    "\000\026\046\063\047\065\052\030\054\053\060\033\061" +
    "\040\071\023\073\031\074\007\077\052\001\002\000\026" +
    "\046\063\047\065\052\030\054\053\060\033\061\040\071" +
    "\023\073\031\074\007\077\052\001\002\000\022\041\073" +
    "\042\066\047\uffeb\054\067\055\072\056\070\057\071\072" +
    "\uffeb\001\002\000\034\012\uffdd\037\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\045\uffdd\047\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\072\uffdd\001\002\000\026\046\063\047\065" +
    "\052\030\054\053\060\033\061\040\071\023\073\031\074" +
    "\007\077\052\001\002\000\026\046\063\047\065\052\030" +
    "\054\053\060\033\061\040\071\023\073\031\074\007\077" +
    "\052\001\002\000\026\046\063\047\065\052\030\054\053" +
    "\060\033\061\040\071\023\073\031\074\007\077\052\001" +
    "\002\000\026\046\063\047\065\052\030\054\053\060\033" +
    "\061\040\071\023\073\031\074\007\077\052\001\002\000" +
    "\026\046\063\047\065\052\030\054\053\060\033\061\040" +
    "\071\023\073\031\074\007\077\052\001\002\000\026\046" +
    "\063\047\065\052\030\054\053\060\033\061\040\071\023" +
    "\073\031\074\007\077\052\001\002\000\034\012\uffe3\037" +
    "\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3\047\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\072\uffe3\001\002\000" +
    "\034\012\uffe5\037\uffe5\041\073\042\uffe5\044\uffe5\045\uffe5" +
    "\047\uffe5\053\uffe5\054\uffe5\055\uffe5\056\070\057\071\072" +
    "\uffe5\001\002\000\034\012\uffe6\037\uffe6\041\uffe6\042\uffe6" +
    "\044\uffe6\045\uffe6\047\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\072\uffe6\001\002\000\034\012\uffe7\037\uffe7" +
    "\041\uffe7\042\uffe7\044\uffe7\045\uffe7\047\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\072\uffe7\001\002\000\034" +
    "\012\uffe4\037\uffe4\041\073\042\uffe4\044\uffe4\045\uffe4\047" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\070\057\071\072\uffe4" +
    "\001\002\000\034\012\uffe2\037\uffe2\041\073\042\uffe2\044" +
    "\uffe2\045\uffe2\047\uffe2\053\uffe2\054\uffe2\055\uffe2\056\070" +
    "\057\071\072\uffe2\001\002\000\034\012\uffde\037\uffde\041" +
    "\uffde\042\uffde\044\uffde\045\uffde\047\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\072\uffde\001\002\000\004\033" +
    "\uffc1\001\002\000\026\004\uffd9\024\uffd9\026\uffd9\027\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\063\uffd9\064\uffd9\072\uffd9\001" +
    "\002\000\020\024\uffd5\026\uffd5\027\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\072\uffd5\001\002\000\026\004\uffdb\024\uffdb\026" +
    "\uffdb\027\uffdb\033\uffdb\034\uffdb\035\uffdb\063\uffdb\064\uffdb" +
    "\072\uffdb\001\002\000\026\004\uffd8\024\uffd8\026\uffd8\027" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\063\uffd8\064\uffd8\072\uffd8" +
    "\001\002\000\026\004\uffc0\024\uffc0\026\uffc0\027\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\041\uffc0\042\uffc0\072\uffc0\001\002" +
    "\000\004\033\121\001\002\000\026\004\uffda\024\uffda\026" +
    "\uffda\027\uffda\033\uffda\034\uffda\035\uffda\063\uffda\064\uffda" +
    "\072\uffda\001\002\000\070\002\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\046\ufff6\047\ufff6\052" +
    "\ufff6\054\ufff6\060\ufff6\061\ufff6\066\ufff6\067\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\077\ufff6\001\002\000\024\024" +
    "\uffd4\026\uffd4\027\uffd4\033\uffd4\034\uffd4\035\uffd4\041\117" +
    "\042\115\072\uffd4\001\002\000\006\033\uffb9\035\uffb9\001" +
    "\002\000\006\033\uffc2\035\103\001\002\000\006\033\uffba" +
    "\035\uffba\001\002\000\026\004\uffbf\024\uffbf\026\uffbf\027" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\041\uffbf\042\uffbf\072\uffbf" +
    "\001\002\000\006\037\122\040\123\001\002\000\020\060" +
    "\033\061\040\071\023\073\031\074\007\075\126\077\052" +
    "\001\002\000\020\060\033\061\040\071\023\073\031\074" +
    "\007\075\126\077\052\001\002\000\026\004\uffbd\024\uffbd" +
    "\026\uffbd\027\uffbd\033\uffbd\034\uffbd\035\uffbd\041\uffbd\042" +
    "\uffbd\072\uffbd\001\002\000\026\004\uffbb\024\uffbb\026\uffbb" +
    "\027\uffbb\033\uffbb\034\uffbb\035\uffbb\041\uffbb\042\uffbb\072" +
    "\uffbb\001\002\000\026\004\uffb8\024\uffb8\026\uffb8\027\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\041\uffb8\042\uffb8\072\uffb8\001" +
    "\002\000\026\004\uffbe\024\uffbe\026\uffbe\027\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\041\uffbe\042\uffbe\072\uffbe\001\002\000" +
    "\026\004\uffbc\024\uffbc\026\uffbc\027\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\041\uffbc\042\uffbc\072\uffbc\001\002\000\024\024" +
    "\uffcf\026\uffcf\027\uffcf\033\uffcf\034\uffcf\035\uffcf\063\uffcf" +
    "\064\uffcf\072\uffcf\001\002\000\034\012\uffe1\037\uffe1\041" +
    "\073\042\uffe1\044\uffe1\045\uffe1\047\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\070\057\071\072\uffe1\001\002\000\026\046" +
    "\uffb0\047\uffb0\052\uffb0\054\uffb0\060\uffb0\061\uffb0\071\uffb0" +
    "\073\uffb0\074\uffb0\077\uffb0\001\002\000\026\046\uffb1\047" +
    "\uffb1\052\uffb1\054\uffb1\060\uffb1\061\uffb1\071\uffb1\073\uffb1" +
    "\074\uffb1\077\uffb1\001\002\000\026\046\063\047\065\052" +
    "\030\054\053\060\033\061\040\071\023\073\031\074\007" +
    "\077\052\001\002\000\070\002\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\046\ufff1\047\ufff1\052" +
    "\ufff1\054\ufff1\060\ufff1\061\ufff1\066\ufff1\067\ufff1\071\ufff1" +
    "\072\ufff1\073\ufff1\074\ufff1\077\ufff1\001\002\000\012\012" +
    "\uffac\044\uffac\045\uffac\072\uffac\001\002\000\030\012\uffab" +
    "\037\141\041\073\042\066\044\uffab\045\uffab\054\067\055" +
    "\072\056\070\057\071\072\uffab\001\002\000\026\046\063" +
    "\047\065\052\030\054\053\060\033\061\040\071\023\073" +
    "\031\074\007\077\052\001\002\000\026\012\uffaf\041\073" +
    "\042\066\044\uffaf\045\uffaf\054\067\055\072\056\070\057" +
    "\071\072\uffaf\001\002\000\070\002\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\046\ufff4\047\ufff4" +
    "\052\ufff4\054\ufff4\060\ufff4\061\ufff4\066\ufff4\067\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\077\ufff4\001\002\000\020" +
    "\041\073\042\066\054\067\055\072\056\070\057\071\072" +
    "\145\001\002\000\070\002\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\046\ufff2\047\ufff2\052\ufff2" +
    "\054\ufff2\060\ufff2\061\ufff2\066\ufff2\067\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\077\ufff2\001\002\000\020\024\uffd7" +
    "\026\uffd7\027\uffd7\033\uffd7\034\uffd7\035\uffd7\072\uffd7\001" +
    "\002\000\024\024\uffd6\026\uffd6\027\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\041\117\042\115\072\uffd6\001\002\000\004\072" +
    "\ufffc\001\002\000\070\002\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\046\ufff8\047\ufff8\052\ufff8" +
    "\054\ufff8\060\ufff8\061\ufff8\066\ufff8\067\ufff8\071\ufff8\072" +
    "\ufff8\073\ufff8\074\ufff8\077\ufff8\001\002\000\006\047\uffe8" +
    "\072\uffe8\001\002\000\070\002\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\046\ufff9\047\ufff9\052" +
    "\ufff9\054\ufff9\060\ufff9\061\ufff9\066\ufff9\067\ufff9\071\ufff9" +
    "\072\ufff9\073\ufff9\074\ufff9\077\ufff9\001\002\000\020\041" +
    "\073\042\066\053\155\054\067\055\072\056\070\057\071" +
    "\001\002\000\034\012\uffdf\037\uffdf\041\uffdf\042\uffdf\044" +
    "\uffdf\045\uffdf\047\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\072\uffdf\001\002\000\062\005\026\006\006\007" +
    "\051\010\005\011\010\015\012\016\160\020\054\021\056" +
    "\022\022\023\042\046\017\047\020\052\030\054\053\060" +
    "\033\061\040\066\035\067\004\071\023\072\036\073\031" +
    "\074\007\077\052\001\002\000\010\011\uff9f\015\uff9f\072" +
    "\uff9f\001\002\000\006\054\162\055\164\001\002\000\070" +
    "\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\046\ufffa\047\ufffa\052\ufffa\054\ufffa\060\ufffa\061" +
    "\ufffa\066\ufffa\067\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\077\ufffa\001\002\000\012\025\uffa1\047\uffa1\073\uffa1\074" +
    "\uffa1\001\002\000\012\025\165\047\171\073\170\074\167" +
    "\001\002\000\012\025\uffa2\047\uffa2\073\uffa2\074\uffa2\001" +
    "\002\000\022\011\uffa4\015\uffa4\017\uffa4\025\uffa4\047\uffa4" +
    "\072\uffa4\073\uffa4\074\uffa4\001\002\000\010\011\uffa0\015" +
    "\uffa0\072\uffa0\001\002\000\022\011\uffa5\015\uffa5\017\uffa5" +
    "\025\uffa5\047\uffa5\072\uffa5\073\uffa5\074\uffa5\001\002\000" +
    "\022\011\uffa6\015\uffa6\017\uffa6\025\uffa6\047\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\001\002\000\022\011\uffa7\015\uffa7\017" +
    "\uffa7\025\uffa7\047\uffa7\072\uffa7\073\uffa7\074\uffa7\001\002" +
    "\000\022\004\uffcb\024\uffcb\026\uffcb\027\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\072\uffcb\001\002\000\026\004\uffca\024\uffca" +
    "\026\uffca\027\uffca\033\uffca\034\uffca\035\uffca\041\117\042" +
    "\115\072\uffca\001\002\000\070\002\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\046\ufff3\047\ufff3" +
    "\052\ufff3\054\ufff3\060\ufff3\061\ufff3\066\ufff3\067\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\077\ufff3\001\002\000\010" +
    "\011\uffa8\015\uffa8\072\uffa8\001\002\000\004\072\177\001" +
    "\002\000\060\005\026\006\006\007\051\010\005\011\010" +
    "\015\012\020\054\021\056\022\022\023\042\046\017\047" +
    "\020\052\030\054\053\060\033\061\040\066\035\067\004" +
    "\071\023\072\036\073\031\074\007\077\052\001\002\000" +
    "\062\005\026\006\006\007\051\010\005\011\010\014\201" +
    "\015\012\020\054\021\056\022\022\023\042\046\017\047" +
    "\020\052\030\054\053\060\033\061\040\066\035\067\004" +
    "\071\023\072\036\073\031\074\007\077\052\001\002\000" +
    "\010\011\uffa9\015\uffa9\072\uffa9\001\002\000\012\012\uffad" +
    "\044\uffad\045\uffad\072\uffad\001\002\000\020\037\uffde\041" +
    "\uffde\042\uffde\054\uffde\055\uffde\056\uffde\057\uffde\001\002" +
    "\000\022\004\uffc9\024\uffc9\026\uffc9\027\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\072\uffc9\001\002\000\070\002\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\046\ufff5" +
    "\047\ufff5\052\ufff5\054\ufff5\060\ufff5\061\ufff5\066\ufff5\067" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\077\ufff5\001\002" +
    "\000\014\006\006\007\051\010\005\020\054\022\022\001" +
    "\002\000\026\004\uffc8\024\uffc8\026\uffc8\027\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\041\117\042\115\072\uffc8\001\002\000" +
    "\006\063\uffc6\064\uffc6\001\002\000\006\063\214\064\213" +
    "\001\002\000\006\063\uffc5\064\uffc5\001\002\000\016\024" +
    "\104\026\112\027\106\034\107\063\uffc3\064\uffc3\001\002" +
    "\000\022\004\uffc7\024\uffc7\026\uffc7\027\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\072\uffc7\001\002\000\006\063\uffc4\064\uffc4" +
    "\001\002\000\004\002\001\001\002\000\010\011\uffec\015" +
    "\uffec\072\uffec\001\002\000\010\011\uffed\015\uffed\072\uffed" +
    "\001\002\000\070\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\046\ufff7\047\ufff7\052\ufff7\054" +
    "\ufff7\060\ufff7\061\ufff7\066\ufff7\067\ufff7\071\ufff7\072\ufff7" +
    "\073\ufff7\074\ufff7\077\ufff7\001\002\000\012\025\165\047" +
    "\171\073\170\074\167\001\002\000\012\025\165\047\171" +
    "\073\170\074\167\001\002\000\004\017\225\001\002\000" +
    "\004\072\226\001\002\000\060\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\015\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\046\uffa3\047\uffa3\052\uffa3\054\uffa3\060\uffa3\061\uffa3" +
    "\066\uffa3\067\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\077" +
    "\uffa3\001\002\000\010\012\230\044\133\045\134\001\002" +
    "\000\004\072\231\001\002\000\060\005\026\006\006\007" +
    "\051\010\005\011\010\015\012\020\054\021\056\022\022" +
    "\023\042\046\017\047\020\052\030\054\053\060\033\061" +
    "\040\066\035\067\004\071\023\072\036\073\031\074\007" +
    "\077\052\001\002\000\064\005\026\006\006\007\051\010" +
    "\005\011\010\013\uffaa\014\uffaa\015\012\020\054\021\056" +
    "\022\022\023\042\046\017\047\020\052\030\054\053\060" +
    "\033\061\040\066\035\067\004\071\023\072\036\073\031" +
    "\074\007\077\052\001\002\000\024\024\uffd1\026\uffd1\027" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\063\uffd1\064\uffd1\072\uffd1" +
    "\001\002\000\004\072\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\054\003\013\004\056\005\031\006\012\007" +
    "\033\010\015\013\020\017\014\024\040\025\024\027\043" +
    "\030\026\033\036\035\042\036\023\040\045\041\044\044" +
    "\046\045\054\046\010\047\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\024\040\025\024\027\043\040\226\041\044\001\001" +
    "\000\002\001\001\000\004\026\221\001\001\000\012\013" +
    "\020\030\026\046\217\047\216\001\001\000\002\001\001" +
    "\000\012\014\110\021\206\022\107\034\203\001\001\000" +
    "\050\004\160\005\031\006\012\007\033\013\020\017\014" +
    "\024\040\025\024\027\043\030\026\033\036\035\042\036" +
    "\023\040\045\041\044\044\046\045\054\046\010\047\047" +
    "\001\001\000\012\024\040\025\202\027\043\041\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\110\021\172\022\107\034\171\001\001\000\052" +
    "\004\056\005\031\006\012\007\033\010\155\013\020\017" +
    "\014\024\040\025\024\027\043\030\026\033\036\035\042" +
    "\036\023\040\045\041\044\044\046\045\054\046\010\047" +
    "\047\001\001\000\010\024\040\025\153\027\043\001\001" +
    "\000\002\001\001\000\004\007\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\110\021\146\022\107\034\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\040\025\143" +
    "\027\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\040\025\131\027\043\001\001\000\002\001\001" +
    "\000\012\014\110\021\113\022\107\034\104\001\001\000" +
    "\004\007\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\040\025\063\027\043\001" +
    "\001\000\010\024\040\025\101\027\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\040\025\100\027" +
    "\043\001\001\000\010\024\040\025\077\027\043\001\001" +
    "\000\010\024\040\025\076\027\043\001\001\000\010\024" +
    "\040\025\075\027\043\001\001\000\010\024\040\025\074" +
    "\027\043\001\001\000\010\024\040\025\073\027\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\115\001\001\000\002\001\001\000\006\014" +
    "\110\022\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\126\043\127\001\001\000" +
    "\006\024\123\043\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\024\040\025\137\027\043\041" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\040\025\141\027\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\004" +
    "\160\005\031\006\012\007\033\013\020\017\014\024\040" +
    "\025\024\027\043\030\026\033\036\035\042\036\023\040" +
    "\045\041\044\042\156\044\046\045\054\046\010\047\047" +
    "\001\001\000\002\001\001\000\004\032\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\056\005\031" +
    "\006\012\007\033\010\177\013\020\017\014\024\040\025" +
    "\024\027\043\030\026\033\036\035\042\036\023\040\045" +
    "\041\044\044\046\045\054\046\010\047\047\001\001\000" +
    "\050\004\160\005\031\006\012\007\033\013\020\017\014" +
    "\024\040\025\024\027\043\030\026\033\036\035\042\036" +
    "\023\040\045\041\044\044\046\045\054\046\010\047\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\210" +
    "\033\207\044\211\001\001\000\004\037\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\222\001\001\000\004\026\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\134\001\001\000\002\001\001\000\052\004" +
    "\056\005\031\006\012\007\033\010\231\013\020\017\014" +
    "\024\040\025\024\027\043\030\026\033\036\035\042\036" +
    "\023\040\045\041\044\044\046\045\054\046\010\047\047" +
    "\001\001\000\050\004\160\005\031\006\012\007\033\013" +
    "\020\017\014\024\040\025\024\027\043\030\026\033\036" +
    "\035\042\036\023\040\045\041\044\044\046\045\054\046" +
    "\010\047\047\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	vm = new VarManager();


    }


public VarManager vm;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for_stmt ::= for_head i_stmt for_tail 
            {
              Object[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar[] x = (myVar[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String[] y = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println("for cycle");
			RESULT= new Object[5];
			RESULT[0] = (myVar)x[0];
			RESULT[1] = (myVar)x[1];
			RESULT[2] = (myVar)x[2];			
			RESULT[3] = parser.vm.extractVar(y[1].toString());  
			RESULT[4] = (String)y[0];					
              CUP$parser$result = new java_cup.runtime.Symbol(36/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_tail ::= Com_For_e i_Op_ps for_arg 
            {
              String[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	//passiamo un vettore di 2 elementi stringe contenenti l'operatore e il fattore
			System.out.println("dentro for tail");
			RESULT= new String[2];
			RESULT[0]= (String)x.toString();
			RESULT[1]= ((myVar)y).getName();
			System.out.println(" valore: "+y.toString());
			System.out.println("operatore: "+x.toString()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(32/*for_tail*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // i_Op_ps ::= Minus 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // i_Op_ps ::= Plus 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 						
              CUP$parser$result = new java_cup.runtime.Symbol(24/*i_Op_ps*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_head ::= Com_For for_arg for_arg for_arg Com_For_m EL 
            {
              myVar[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar z = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("for_head variabili \n"+x.toString()+"\n"+y.toString()+"\n"+z.toString());
		// passiamo un vettore contenente le tre variabili sulle quali controllare il ciclo for
			RESULT= new myVar[3];
			RESULT[0]= x;
			RESULT[1]= y;
			RESULT[2]= z;							
              CUP$parser$result = new java_cup.runtime.Symbol(22/*for_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_arg ::= ID 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_arg ::= Vint 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_arg ::= Int 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 	
              CUP$parser$result = new java_cup.runtime.Symbol(20/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_arg ::= Var 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(x); 				
              CUP$parser$result = new java_cup.runtime.Symbol(20/*for_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_stmt ::= if_head Com_If_e 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_stmt ::= if_head Com_If_m EL i_stmt Com_If_e 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_head ::= Com_If conf_exp Com_If_2 EL i_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*if_head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conf_exp ::= conf_exp cond_if arit_stmt 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conf_exp ::= conf_exp cond_if conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // conf_exp ::= C_Not conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conf_exp ::= conf 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*conf_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conf ::= arit_stmt Cond arit_stmt 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*conf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond_if ::= C_Andd 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond_if ::= C_Orr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*cond_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // i_arg ::= Bool 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._bool, new Boolean(x)); 		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // i_arg ::= FUnit 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // i_arg ::= IUnit 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // i_arg ::= Str 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("str: "+x); 
					RESULT= new myVar(myVar._string, x); 			
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // i_arg ::= Vint 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float x = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= new myVar(myVar._float, x.floatValue()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // i_arg ::= Int 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(myVar._int, x.intValue()); 		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*i_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // date_arg ::= GMA 
            {
              Object[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Calendar x = (Calendar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x;			
              CUP$parser$result = new java_cup.runtime.Symbol(33/*date_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bool_op ::= C_Or 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =x; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bool_op ::= C_And 
            {
              String RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =x; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*bool_op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cc_conds ::= _where Criteria C_Ug date_arg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cc_conds ::= _where Criteria Cond date_arg 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cc_conds ::= _where Criteria C_Ug i_arg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cc_conds ::= _where Criteria Cond i_arg 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // i_cc_conds ::= i_cc_conds bool_op cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // i_cc_conds ::= cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*i_cc_conds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _where ::= Where 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _where ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*_where*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comm_find_2 ::= comm_find_2 Name 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comm_find_2 ::= comm_find_2 Name param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comm_find_2 ::= commands_oa 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comm_find_2 ::= commands 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*comm_find_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comm_find ::= comm_find Com_Ex comm_find_2 Pv 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comm_find ::= comm_find i_cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comm_find ::= comm_find param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comm_find ::= Com_Find i_cc_conds 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comm_find ::= Com_Find param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*comm_find*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // commands ::= Com_Cp 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // commands ::= Com_Rm 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // commands ::= Com_Mov 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // commands_oa ::= Com_Ls Order 
            {
              Object[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
						Utility.mf("LS Order!");
						RESULT = new Object[2];
						RESULT[0] = new LSCommand("/home/robizz/lt");
						CommandParameter[] cp = new CommandParameter[5];
						cp[0]=new CommandParameter(null,o,null);						
						RESULT[1] = cp;
									
					
              CUP$parser$result = new java_cup.runtime.Symbol(34/*commands_oa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // commands_oa ::= Com_Ls 
            {
              Object[] RESULT = null;
		 
						Utility.mf("LS!");
						RESULT = new Object[2];
						RESULT[0] = new LSCommand("/home/robizz/lt");
						RESULT[1] = new CommandParameter[5];			
					
              CUP$parser$result = new java_cup.runtime.Symbol(34/*commands_oa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // commands_oa ::= Com_Cd Minor 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*commands_oa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // commands_oa ::= Com_Cd 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*commands_oa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sh_stmt ::= commands_oa 
            {
              Object[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object[] x = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sh_stmt ::= sh_stmt i_cc_conds 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sh_stmt ::= sh_stmt param 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sh_stmt ::= commands i_cc_conds 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sh_stmt ::= commands param 
            {
              Object[] RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*sh_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param ::= Obj 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= Ext 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= File 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= Path 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arit_arg ::= i_arg 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((myVar)x); System.out.println("i_arg"); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arit_arg ::= Var 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.extractVar(x); 
							System.out.println("Var: "+x); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*arit_arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arit_stmt ::= C_Not arit_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.makeSOper(((myVar)x),s); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arit_stmt ::= RO arit_stmt RC 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ((myVar)x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arit_stmt ::= arit_arg 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ((myVar)x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arit_stmt ::= Minus arit_stmt 
            {
              myVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vm.makeSOper(((myVar)x),s); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arit_stmt ::= arit_stmt C_Or arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_stmt ::= arit_stmt C_And arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_stmt ::= arit_stmt Minus arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_stmt ::= arit_stmt Plus arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arit_stmt ::= arit_stmt Div arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arit_stmt ::= arit_stmt Times arit_stmt 
            {
              myVar RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myVar x = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			System.out.println(s);
			((myVar)x).printVar(); 
			System.out.println("segno operazione: "+s); y.printVar(); 
			RESULT = parser.vm.makeOper(((myVar)x),((myVar)y),s); 		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*arit_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_stmt ::= init_stmt assig_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.vm.add_var(((myVar)x)); 	
              CUP$parser$result = new java_cup.runtime.Symbol(3/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // init_stmt ::= Com_Str assig_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.vm.add_var(((myVar)x)); 	
              CUP$parser$result = new java_cup.runtime.Symbol(3/*init_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assig_stmt ::= Var 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new myVar(x); 		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assig_stmt ::= Var C_Ug arit_stmt 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		myVar y = (myVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ((myVar)y).setName(x); RESULT = y; 	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*assig_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // str_stmt ::= str_stmt if_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // str_stmt ::= str_stmt for_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // str_stmt ::= for_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // str_stmt ::= if_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*str_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= conf_exp EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= Com_P arit_stmt EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= throw_s EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= start_s EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= comm_find EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= sh_stmt EL 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] x = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						System.out.println("raccolto sh stmt"); 
						/*((ICommand)(((Object[])x)[0])).setCommandParamter(((CommandParameter)((Object[])x)[1]))); 
						((ICommand)(((Object[])x)[0])).exec(); 
						System.out.println(((ICommand)((Object[])x)[0])).getCommandStringResult()); */
						Object[] o = (Object[])x;
						ICommand c = (ICommand)o[0];
						CommandParameter[] cp= (CommandParameter[])o[1];
						c.setCommandParameter(cp);
						c.exec();
						Utility.mf(c.getCommandStringResult());
					
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= str_stmt EL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= assig_stmt EL 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.vm.assig(((myVar)x)); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= init_stmt EL 
            {
              Object RESULT = null;
		 parser.vm.getListVar(); 	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_stmt ::= i_stmt stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // i_stmt ::= stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*i_stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // throw_s ::= Throw_S File 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*throw_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_s ::= Start_S File 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*start_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // script ::= start_s i_stmt End_S 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= i_stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

